[
    {
        "db_id": "geography",
        "query": "SELECT city_name FROM city WHERE population > 1000000;",
        "question": "Which cities have a population greater than 1,000,000?",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM city WHERE population > 1000000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, capital FROM state WHERE country_name = 'USA';",
        "question": "What are the state names and capitals in the USA?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, capital FROM state WHERE country_name = 'USA';"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name FROM river WHERE length > 1000;",
        "question": "Which rivers are longer than 1,000 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name FROM river WHERE length > 1000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name FROM lake WHERE area > 1000;",
        "question": "Which lakes have an area greater than 1,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT lake_name FROM lake WHERE area > 1000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude > 4000;",
        "question": "Which mountains have an altitude greater than 4,000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude > 4000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, highest_point FROM highlow WHERE highest_elevation > 3000;",
        "question": "What are the states with the highest points above 3,000 meters and their highest points?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, highest_point FROM highlow WHERE highest_elevation > 3000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, density FROM state WHERE density < 50;",
        "question": "What are the states with a population density less than 50 people per square kilometer?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, density FROM state WHERE density < 50;"
    },
    {
        "db_id": "geography",
        "query": "SELECT border FROM border_info WHERE state_name = 'California';",
        "question": "What are the borders of the state of California?",
        "correctness": 1,
        "gold_parse": "SELECT border FROM border_info WHERE state_name = 'California';"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, state_name FROM city WHERE country_name = 'CAN';",
        "question": "What are the city names and their states in Canada?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, state_name FROM city WHERE country_name = 'CAN';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name FROM state WHERE population > 5000000;",
        "question": "Which states have a population greater than 5,000,000?",
        "correctness": 1,
        "gold_parse": "SELECT state_name FROM state WHERE population > 5000000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, area FROM state WHERE area > 100000;",
        "question": "What are the states with an area greater than 100,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, area FROM state WHERE area > 100000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name FROM city WHERE state_name = 'Texas';",
        "question": "Which cities are located in the state of Texas?",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM city WHERE state_name = 'Texas';"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, state_name FROM lake WHERE country_name = 'USA';",
        "question": "What are the lake names and their states in the USA?",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, state_name FROM lake WHERE country_name = 'USA';"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE country_name = 'IND';",
        "question": "What are the mountain names and their altitudes in India?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE country_name = 'IND';"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE country_name = 'BRA';",
        "question": "What are the river names and their lengths in Brazil?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE country_name = 'BRA';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, highest_elevation FROM highlow WHERE highest_elevation = 'Mount Whitney';",
        "question": "Which state has the highest elevation at Mount Whitney?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, highest_elevation FROM highlow WHERE highest_elevation = 'Mount Whitney';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name FROM state WHERE capital = 'Austin';",
        "question": "Which state has Austin as its capital?",
        "correctness": 1,
        "gold_parse": "SELECT state_name FROM state WHERE capital = 'Austin';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, lowest_point FROM highlow WHERE lowest_point = 'Death Valley';",
        "question": "Which state has Death Valley as its lowest point?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, lowest_point FROM highlow WHERE lowest_point = 'Death Valley';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name FROM state WHERE population < 1000000;",
        "question": "Which states have a population less than 1,000,000?",
        "correctness": 1,
        "gold_parse": "SELECT state_name FROM state WHERE population < 1000000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, density FROM state WHERE density > 200;",
        "question": "What are the states with a population density greater than 200 people per square kilometer?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, density FROM state WHERE density > 200;"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name FROM city WHERE population < 50000;",
        "question": "Which cities have a population less than 50,000?",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM city WHERE population < 50000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, area FROM state WHERE country_name = 'AUS';",
        "question": "What are the states and their areas in Australia?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, area FROM state WHERE country_name = 'AUS';"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name FROM lake WHERE area < 500;",
        "question": "Which lakes have an area less than 500 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT lake_name FROM lake WHERE area < 500;"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude < 1000;",
        "question": "Which mountains have an altitude less than 1,000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude < 1000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length < 500;",
        "question": "Which rivers are shorter than 500 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length < 500;"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, highest_point FROM highlow WHERE highest_point = 'Denali';",
        "question": "Which state has Denali as its highest point?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, highest_point FROM highlow WHERE highest_point = 'Denali';"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, state_name FROM city WHERE city_name = 'Toronto';",
        "question": "What is the state name for the city of Toronto?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, state_name FROM city WHERE city_name = 'Toronto';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name FROM state WHERE population = 0;",
        "question": "Which states have a population of zero?",
        "correctness": 1,
        "gold_parse": "SELECT state_name FROM state WHERE population = 0;"
    },
    {
        "db_id": "geography",
        "query": "SELECT border FROM border_info WHERE state_name = 'Nevada';",
        "question": "What are the borders of the state of Nevada?",
        "correctness": 1,
        "gold_parse": "SELECT border FROM border_info WHERE state_name = 'Nevada';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name FROM state WHERE capital = 'Denver';",
        "question": "Which state has Denver as its capital?",
        "correctness": 1,
        "gold_parse": "SELECT state_name FROM state WHERE capital = 'Denver';"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE country_name = 'CAN';",
        "question": "What are the lake names and their areas in Canada?",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE country_name = 'CAN';"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE country_name = 'MEX';",
        "question": "What are the city names and populations in Mexico?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE country_name = 'MEX';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name FROM state WHERE density IS NULL;",
        "question": "Which states do not have a recorded population density?",
        "correctness": 1,
        "gold_parse": "SELECT state_name FROM state WHERE density IS NULL;"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name FROM river WHERE country_name = 'CHN';",
        "question": "What are the river names in China?",
        "correctness": 1,
        "gold_parse": "SELECT river_name FROM river WHERE country_name = 'CHN';"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name FROM mountain WHERE state_name = 'Colorado';",
        "question": "Which mountains are located in the state of Colorado?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name FROM mountain WHERE state_name = 'Colorado';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE country_name = 'IND';",
        "question": "What are the state names and their populations in India?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE country_name = 'IND';"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name FROM city WHERE population = 100000;",
        "question": "Which cities have a population of 100,000?",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM city WHERE population = 100000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT highest_point, lowest_point FROM highlow WHERE state_name = 'Alaska';",
        "question": "What are the highest and lowest points in the state of Alaska?",
        "correctness": 1,
        "gold_parse": "SELECT highest_point, lowest_point FROM highlow WHERE state_name = 'Alaska';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name FROM state WHERE country_name = 'GBR';",
        "question": "What are the state names in the United Kingdom?",
        "correctness": 1,
        "gold_parse": "SELECT state_name FROM state WHERE country_name = 'GBR';"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name FROM city WHERE country_name = 'USA' AND state_name = 'California';",
        "question": "Which cities are located in California, USA?",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM city WHERE country_name = 'USA' AND state_name = 'California';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, capital FROM state WHERE density > 100;",
        "question": "What are the state names and capitals with a population density greater than 100 people per square kilometer?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, capital FROM state WHERE density > 100;"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, area FROM state WHERE area < 50000;",
        "question": "What are the states with an area less than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, area FROM state WHERE area < 50000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name FROM lake WHERE area > 200;",
        "question": "Which lakes have an area greater than 200 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT lake_name FROM lake WHERE area > 200;"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, state_name FROM mountain WHERE mountain_altitude > 3000;",
        "question": "What are the mountain names and their states with an altitude greater than 3,000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, state_name FROM mountain WHERE mountain_altitude > 3000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 2000;",
        "question": "Which rivers are longer than 2,000 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 2000;"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, highest_elevation FROM highlow WHERE highest_elevation = 'Mount McKinley';",
        "question": "Which state has Mount McKinley as its highest elevation?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, highest_elevation FROM highlow WHERE highest_elevation = 'Mount McKinley';"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author;",
        "question": "What are the names of all authors?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venuename FROM venue;",
        "question": "What are the names of all venues?",
        "correctness": 1,
        "gold_parse": "SELECT venuename FROM venue;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset;",
        "question": "What are the names of all datasets?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal;",
        "question": "What are the names of all journals?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT keyphrasename FROM keyphrase;",
        "question": "What are the names of all keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT keyphrasename FROM keyphrase;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper;",
        "question": "What are the titles of all papers?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, year FROM paper;",
        "question": "What are the titles and publication years of all papers?",
        "correctness": 1,
        "gold_parse": "SELECT title, year FROM paper;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, numciting FROM paper;",
        "question": "What are the titles and number of citing papers for all papers?",
        "correctness": 1,
        "gold_parse": "SELECT title, numciting FROM paper;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, numcitedby FROM paper;",
        "question": "What are the titles and number of cited papers for all papers?",
        "correctness": 1,
        "gold_parse": "SELECT title, numcitedby FROM paper;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venuename FROM venue JOIN paper ON venue.venueid = paper.venueid;",
        "question": "What are the names of venues where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT venuename FROM venue JOIN paper ON venue.venueid = paper.venueid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid;",
        "question": "What are the names of journals where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid;",
        "question": "What are the dataset names associated with papers?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT keyphrasename FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid;",
        "question": "What are the keyphrases associated with papers?",
        "correctness": 1,
        "gold_parse": "SELECT keyphrasename FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid;",
        "question": "What are the names of authors who have written papers?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "What are the titles of papers published after 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid IN (SELECT citingpaperid FROM cite);",
        "question": "What are the names of authors who have cited papers?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid IN (SELECT citingpaperid FROM cite);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper JOIN cite ON paper.paperid = cite.citedpaperid;",
        "question": "What are the titles of papers that have been cited?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper JOIN cite ON paper.paperid = cite.citedpaperid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, venuename FROM paper JOIN venue ON paper.venueid = venue.venueid;",
        "question": "What are the titles of papers and their respective venues?",
        "correctness": 1,
        "gold_parse": "SELECT title, venuename FROM paper JOIN venue ON paper.venueid = venue.venueid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, journalname FROM paper JOIN journal ON paper.journalid = journal.journalid;",
        "question": "What are the titles of papers and their respective journals?",
        "correctness": 1,
        "gold_parse": "SELECT title, journalname FROM paper JOIN journal ON paper.journalid = journal.journalid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, datasetname FROM paper JOIN paperdataset ON paper.paperid = paperdataset.paperid JOIN dataset ON paperdataset.datasetid = dataset.datasetid;",
        "question": "What are the titles of papers and their associated datasets?",
        "correctness": 1,
        "gold_parse": "SELECT title, datasetname FROM paper JOIN paperdataset ON paper.paperid = paperdataset.paperid JOIN dataset ON paperdataset.datasetid = dataset.datasetid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "What are the titles of papers and their associated keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;",
        "question": "What are the titles of papers and their authors?",
        "correctness": 1,
        "gold_parse": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT fieldid FROM field;",
        "question": "What are the field IDs?",
        "correctness": 1,
        "gold_parse": "SELECT fieldid FROM field;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paperid FROM paperfield;",
        "question": "What are the paper IDs associated with fields?",
        "correctness": 1,
        "gold_parse": "SELECT paperid FROM paperfield;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper JOIN paperfield ON paper.paperid = paperfield.paperid;",
        "question": "What are the titles of papers associated with fields?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper JOIN paperfield ON paper.paperid = paperfield.paperid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venuename FROM venue WHERE venueid IN (SELECT venueid FROM paper);",
        "question": "What are the names of venues where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT venuename FROM venue WHERE venueid IN (SELECT venueid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);",
        "question": "What are the names of journals where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset WHERE datasetid IN (SELECT datasetid FROM paperdataset);",
        "question": "What are the names of datasets associated with papers?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset WHERE datasetid IN (SELECT datasetid FROM paperdataset);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT keyphrasename FROM keyphrase WHERE keyphraseid IN (SELECT keyphraseid FROM paperkeyphrase);",
        "question": "What are the names of keyphrases associated with papers?",
        "correctness": 1,
        "gold_parse": "SELECT keyphrasename FROM keyphrase WHERE keyphraseid IN (SELECT keyphraseid FROM paperkeyphrase);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author WHERE authorid IN (SELECT authorid FROM writes);",
        "question": "What are the names of authors who have written papers?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author WHERE authorid IN (SELECT authorid FROM writes);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT fieldid FROM field WHERE fieldid IN (SELECT fieldid FROM paperfield);",
        "question": "What are the field IDs associated with papers?",
        "correctness": 1,
        "gold_parse": "SELECT fieldid FROM field WHERE fieldid IN (SELECT fieldid FROM paperfield);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "What are the titles of papers published before 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid;",
        "question": "What are the names of authors and the titles of papers they wrote?",
        "correctness": 1,
        "gold_parse": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid, venuename FROM venue;",
        "question": "What are the IDs and names of all venues?",
        "correctness": 1,
        "gold_parse": "SELECT venueid, venuename FROM venue;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorid, authorname FROM author;",
        "question": "What are the IDs and names of all authors?",
        "correctness": 1,
        "gold_parse": "SELECT authorid, authorname FROM author;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetid, datasetname FROM dataset;",
        "question": "What are the IDs and names of all datasets?",
        "correctness": 1,
        "gold_parse": "SELECT datasetid, datasetname FROM dataset;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalid, journalname FROM journal;",
        "question": "What are the IDs and names of all journals?",
        "correctness": 1,
        "gold_parse": "SELECT journalid, journalname FROM journal;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT keyphraseid, keyphrasename FROM keyphrase;",
        "question": "What are the IDs and names of all keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT keyphraseid, keyphrasename FROM keyphrase;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paperid, title FROM paper;",
        "question": "What are the IDs and titles of all papers?",
        "correctness": 1,
        "gold_parse": "SELECT paperid, title FROM paper;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT fieldid, paperid FROM paperfield;",
        "question": "What are the field IDs and paper IDs associated with fields?",
        "correctness": 1,
        "gold_parse": "SELECT fieldid, paperid FROM paperfield;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper JOIN paperfield ON paper.paperid = paperfield.paperid WHERE paperfield.fieldid = 1;",
        "question": "What are the titles of papers associated with the field ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper JOIN paperfield ON paper.paperid = paperfield.paperid WHERE paperfield.fieldid = 1;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);",
        "question": "What are the IDs of venues where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalid FROM journal WHERE journalid IN (SELECT journalid FROM paper);",
        "question": "What are the IDs of journals where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT journalid FROM journal WHERE journalid IN (SELECT journalid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetid FROM dataset WHERE datasetid IN (SELECT datasetid FROM paperdataset);",
        "question": "What are the IDs of datasets associated with papers?",
        "correctness": 1,
        "gold_parse": "SELECT datasetid FROM dataset WHERE datasetid IN (SELECT datasetid FROM paperdataset);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT keyphraseid FROM keyphrase WHERE keyphraseid IN (SELECT keyphraseid FROM paperkeyphrase);",
        "question": "What are the IDs of keyphrases associated with papers?",
        "correctness": 1,
        "gold_parse": "SELECT keyphraseid FROM keyphrase WHERE keyphraseid IN (SELECT keyphraseid FROM paperkeyphrase);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorid FROM author WHERE authorname = 'John Doe';",
        "question": "What is the ID of the author named John Doe?",
        "correctness": 1,
        "gold_parse": "SELECT authorid FROM author WHERE authorname = 'John Doe';"
    },
    {
        "db_id": "scholar",
        "query": "SELECT T1.title, T1.year, T2.venuename FROM paper AS T1 JOIN venue AS T2 ON T1.venueid = T2.venueid;",
        "question": "Show the title, year, and venue name for all papers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title, T1.year, T2.venuename FROM paper AS T1 JOIN venue AS T2 ON T1.venueid = T2.venueid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorid, COUNT(*) FROM writes GROUP BY authorid;",
        "question": "How many papers has each author written?",
        "correctness": 1,
        "gold_parse": "SELECT authorid, COUNT(*) FROM writes GROUP BY authorid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname, COUNT(*) FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY authorname;",
        "question": "Show the names of authors and the number of papers they have written.",
        "correctness": 1,
        "gold_parse": "SELECT authorname, COUNT(*) FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY authorname;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT Avg(numcitedby) FROM paper;",
        "question": "What is the average number of citations received by all papers?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(numcitedby) FROM paper;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT Min(year), Avg(year), Max(year) FROM paper;",
        "question": "What is the minimum, average, and maximum publication year across all papers?",
        "correctness": 1,
        "gold_parse": "SELECT Min(year), Avg(year), Max(year) FROM paper;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT Avg(numciting) FROM paper;",
        "question": "What is the average number of papers citing each paper?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(numciting) FROM paper;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;",
        "question": "Show different journals and the number of papers published in each.",
        "correctness": 1,
        "gold_parse": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paperid FROM paper EXCEPT SELECT paperid FROM paperdataset;",
        "question": "Find the IDs of papers that do not have any associated dataset?",
        "correctness": 1,
        "gold_parse": "SELECT paperid FROM paper EXCEPT SELECT paperid FROM paperdataset;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT keyphrasename FROM keyphrase;",
        "question": "What are the different keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT keyphrasename FROM keyphrase;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE numciting > 10 OR numcitedby > 20;",
        "question": "List the titles of papers that have been cited by more than 10 papers or have cited more than 20 papers.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE numciting > 10 OR numcitedby > 20;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT COUNT(DISTINCT fieldid) FROM paperfield;",
        "question": "How many different fields are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT fieldid) FROM paperfield;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, year, journalname FROM paper JOIN journal ON paper.journalid = journal.journalid;",
        "question": "List the title, year, and journal name of all papers.",
        "correctness": 1,
        "gold_parse": "SELECT title, year, journalname FROM paper JOIN journal ON paper.journalid = journal.journalid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT T1.title, T2.authorname FROM paper AS T1 JOIN writes AS T2 ON T1.paperid = T2.paperid;",
        "question": "Show the titles of papers and the names of authors who wrote them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title, T2.authorname FROM paper AS T1 JOIN writes AS T2 ON T1.paperid = T2.paperid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT T1.datasetname, T2.title FROM dataset AS T1 JOIN paperdataset AS T2 ON T1.datasetid = T2.datasetid;",
        "question": "Show the dataset names and the titles of papers associated with them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.datasetname, T2.title FROM dataset AS T1 JOIN paperdataset AS T2 ON T1.datasetid = T2.datasetid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT T1.keyphrasename, T2.title FROM keyphrase AS T1 JOIN paperkeyphrase AS T2 ON T1.keyphraseid = T2.keyphraseid;",
        "question": "Show the keyphrase names and the titles of papers associated with them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.keyphrasename, T2.title FROM keyphrase AS T1 JOIN paperkeyphrase AS T2 ON T1.keyphraseid = T2.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT fieldid, COUNT(*) FROM paperfield GROUP BY fieldid;",
        "question": "Show the field IDs and the number of papers associated with each field.",
        "correctness": 1,
        "gold_parse": "SELECT fieldid, COUNT(*) FROM paperfield GROUP BY fieldid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid, COUNT(*) FROM paper GROUP BY venueid;",
        "question": "Show the venue IDs and the number of papers published in each venue.",
        "correctness": 1,
        "gold_parse": "SELECT venueid, COUNT(*) FROM paper GROUP BY venueid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname, COUNT(*) FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY authorname ORDER BY COUNT(*) DESC;",
        "question": "List the names of authors and the number of papers they have written, ordered by the number of papers in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT authorname, COUNT(*) FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY authorname ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paperid FROM cite WHERE citingpaperid = 1;",
        "question": "Show the IDs of papers cited by the paper with ID 1.",
        "correctness": 1,
        "gold_parse": "SELECT paperid FROM cite WHERE citingpaperid = 1;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT COUNT(DISTINCT journalid) FROM paper;",
        "question": "How many distinct journals are there in which papers are published?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT journalid) FROM paper;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE venueid = 2;",
        "question": "What are the titles of papers published in the venue with ID 2?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE venueid = 2;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE numciting > (SELECT Avg(numciting) FROM paper);",
        "question": "What are the titles of papers that have been cited more than the average number of times?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE numciting > (SELECT Avg(numciting) FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid;",
        "question": "List the names of authors and the titles of papers they have written.",
        "correctness": 1,
        "gold_parse": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "What are the titles of papers and their associated keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, datasetname FROM paper JOIN paperdataset ON paper.paperid = paperdataset.paperid JOIN dataset ON paperdataset.datasetid = dataset.datasetid;",
        "question": "What are the titles of papers and their associated datasets?",
        "correctness": 1,
        "gold_parse": "SELECT title, datasetname FROM paper JOIN paperdataset ON paper.paperid = paperdataset.paperid JOIN dataset ON paperdataset.datasetid = dataset.datasetid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid, COUNT(*) FROM paper GROUP BY venueid;",
        "question": "How many papers have been published in each venue?",
        "correctness": 1,
        "gold_parse": "SELECT venueid, COUNT(*) FROM paper GROUP BY venueid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;",
        "question": "How many papers have been published in each journal?",
        "correctness": 1,
        "gold_parse": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname, COUNT(*) FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY authorname;",
        "question": "How many papers has each author written?",
        "correctness": 1,
        "gold_parse": "SELECT authorname, COUNT(*) FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY authorname;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE numcitedby > 10;",
        "question": "What are the titles of papers that have cited more than 10 papers?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE numcitedby > 10;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT fieldid, COUNT(*) FROM paperfield GROUP BY fieldid;",
        "question": "How many papers are associated with each field?",
        "correctness": 1,
        "gold_parse": "SELECT fieldid, COUNT(*) FROM paperfield GROUP BY fieldid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, year FROM paper WHERE year > 2010 ORDER BY year DESC;",
        "question": "What are the titles of papers published after 2010, ordered by year in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT title, year FROM paper WHERE year > 2010 ORDER BY year DESC;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author WHERE authorid IN (SELECT authorid FROM writes WHERE paperid IN (SELECT paperid FROM paper WHERE year = 2020));",
        "question": "What are the names of authors who have written papers published in the year 2020?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author WHERE authorid IN (SELECT authorid FROM writes WHERE paperid IN (SELECT paperid FROM paper WHERE year = 2020));"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, venueid FROM paper WHERE venueid IS NOT NULL;",
        "question": "What are the titles of papers that have a venue ID?",
        "correctness": 1,
        "gold_parse": "SELECT title, venueid FROM paper WHERE venueid IS NOT NULL;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.year > 2015;",
        "question": "What are the names of authors and the titles of papers they wrote that were published after 2015?",
        "correctness": 1,
        "gold_parse": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, numciting FROM paper ORDER BY numciting DESC;",
        "question": "What are the titles of papers ordered by the number of citing papers in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT title, numciting FROM paper ORDER BY numciting DESC;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, numcitedby FROM paper ORDER BY numcitedby DESC;",
        "question": "What are the titles of papers ordered by the number of cited papers in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT title, numcitedby FROM paper ORDER BY numcitedby DESC;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venuename, title FROM venue JOIN paper ON venue.venueid = paper.venueid ORDER BY venuename ASC;",
        "question": "What are the venue names and titles of papers ordered by the venue name in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT venuename, title FROM venue JOIN paper ON venue.venueid = paper.venueid ORDER BY venuename ASC;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, journalname FROM paper JOIN journal ON paper.journalid = journal.journalid ORDER BY journalname ASC;",
        "question": "What are the titles of papers and their journal names ordered by the journal name in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT title, journalname FROM paper JOIN journal ON paper.journalid = journal.journalid ORDER BY journalname ASC;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname, title FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid ORDER BY datasetname ASC;",
        "question": "What are the dataset names and titles of papers ordered by the dataset name in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname, title FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid ORDER BY datasetname ASC;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT keyphrasename, title FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid ORDER BY keyphrasename ASC;",
        "question": "What are the keyphrase names and titles of papers ordered by the keyphrase name in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT keyphrasename, title FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid ORDER BY keyphrasename ASC;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions > 100;",
        "question": "What is the ID of every singer who has a net worth of more than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions > 100;"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Title, T1.Sales, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "question": "Show the title, sales, and name of the singer for each song.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title, T1.Sales, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Singer_ID, COUNT(*) FROM song GROUP BY Singer_ID;",
        "question": "How many songs has each singer sung?",
        "correctness": 1,
        "gold_parse": "SELECT Singer_ID, COUNT(*) FROM song GROUP BY Singer_ID;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name;",
        "question": "Show the names of singers and the number of songs they have sung.",
        "correctness": 1,
        "gold_parse": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Avg(Sales) FROM song;",
        "question": "What is the average sales of all songs?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(Sales) FROM song;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Min(Birth_Year), Avg(Birth_Year), Max(Birth_Year) FROM singer;",
        "question": "What is the minimum, average, and maximum birth year of all singers?",
        "correctness": 1,
        "gold_parse": "SELECT Min(Birth_Year), Avg(Birth_Year), Max(Birth_Year) FROM singer;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Avg(Highest_Position) FROM song;",
        "question": "What is the average highest position of all songs?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(Highest_Position) FROM song;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;",
        "question": "Show different citizenships and the number of singers associated with each.",
        "correctness": 1,
        "gold_parse": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Song_ID FROM song EXCEPT SELECT Song_ID FROM song WHERE Sales > 1000000;",
        "question": "Find the IDs of songs that do not have sales of more than 1,000,000?",
        "correctness": 1,
        "gold_parse": "SELECT Song_ID FROM song EXCEPT SELECT Song_ID FROM song WHERE Sales > 1000000;"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT Citizenship FROM singer;",
        "question": "What are the different citizenships of singers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Citizenship FROM singer;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000 OR Highest_Position < 10;",
        "question": "List the titles of songs that have sales greater than 500,000 or highest position less than 10.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000 OR Highest_Position < 10;"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(DISTINCT Name) FROM singer;",
        "question": "How many different singers are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Name) FROM singer;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title, Sales, Highest_Position FROM song;",
        "question": "List the title, sales, and highest position of all songs.",
        "correctness": 1,
        "gold_parse": "SELECT Title, Sales, Highest_Position FROM song;"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "question": "Show the titles of songs and the names of singers who sung them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Sales, T2.Citizenship FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "question": "Show the sales of songs and the citizenships of the singers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Sales, T2.Citizenship FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name, COUNT(*) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name;",
        "question": "Show the names of singers and the number of songs they have sung.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, COUNT(*) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Singer_ID, COUNT(*) FROM song GROUP BY Singer_ID;",
        "question": "Show the singer IDs and the number of songs they have sung.",
        "correctness": 1,
        "gold_parse": "SELECT Singer_ID, COUNT(*) FROM song GROUP BY Singer_ID;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name ORDER BY COUNT(*) DESC;",
        "question": "List the names of singers and the number of songs they have sung, ordered by the number of songs in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > (SELECT Avg(Sales) FROM song);",
        "question": "Show the titles of songs that have sales more than the average sales.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > (SELECT Avg(Sales) FROM song);"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(DISTINCT Citizenship) FROM singer;",
        "question": "How many different citizenships are there among the singers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Citizenship) FROM singer;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Citizenship = 'American');",
        "question": "What are the titles of songs sung by American singers?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Citizenship = 'American');"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year > 1980;",
        "question": "What are the names of singers born after 1980?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Birth_Year > 1980;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Title FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 500000;",
        "question": "What are the names of singers and the titles of their songs that have sales greater than 500,000?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Title FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 500000;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Title FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "question": "What are the names of singers and the titles of their songs that reached the highest position?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Title FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 100000;",
        "question": "What are the titles of songs that have sales greater than 100,000?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 100000;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Net_Worth_Millions FROM singer WHERE Net_Worth_Millions > 50;",
        "question": "What are the names and net worths of singers who have a net worth of more than 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Net_Worth_Millions FROM singer WHERE Net_Worth_Millions > 50;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Birth_Year IS NOT NULL;",
        "question": "What are the names and birth years of singers who have a recorded birth year?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Birth_Year IS NOT NULL;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Highest_Position < 10;",
        "question": "What are the titles of songs that have reached a position less than 10?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Highest_Position < 10;"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';",
        "question": "What are the names of Canadian singers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title, Sales FROM song WHERE Sales > 200000;",
        "question": "What are the titles and sales of songs that have sales greater than 200,000?",
        "correctness": 1,
        "gold_parse": "SELECT Title, Sales FROM song WHERE Sales > 200000;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name;",
        "question": "What are the names of singers and the number of songs they have sung?",
        "correctness": 1,
        "gold_parse": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Code FROM country WHERE Population > (SELECT Avg(Population) FROM country);",
        "question": "What is the code of every country that has a population above the average?",
        "correctness": 1,
        "gold_parse": "SELECT Code FROM country WHERE Population > (SELECT Avg(Population) FROM country);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name, T1.Population, T2.Language FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode;",
        "question": "Show the name, population, and language spoken in all cities.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T1.Population, T2.Language FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT CountryCode, COUNT(*) FROM city GROUP BY CountryCode;",
        "question": "How many cities does each country have?",
        "correctness": 1,
        "gold_parse": "SELECT CountryCode, COUNT(*) FROM city GROUP BY CountryCode;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode GROUP BY Name;",
        "question": "Show the names of countries and the number of cities they have.",
        "correctness": 1,
        "gold_parse": "SELECT Name, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode GROUP BY Name;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Avg(SurfaceArea) FROM country;",
        "question": "What is the average surface area of all countries?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(SurfaceArea) FROM country;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Min(LifeExpectancy), Avg(LifeExpectancy), Max(LifeExpectancy) FROM country;",
        "question": "What is the minimum, average, and maximum life expectancy across all countries?",
        "correctness": 1,
        "gold_parse": "SELECT Min(LifeExpectancy), Avg(LifeExpectancy), Max(LifeExpectancy) FROM country;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Avg(Percentage) FROM countrylanguage;",
        "question": "What is the average percentage of language speakers in all countries?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(Percentage) FROM countrylanguage;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Continent, COUNT(*) FROM country GROUP BY Continent;",
        "question": "Show different continents and the number of countries in each.",
        "correctness": 1,
        "gold_parse": "SELECT Continent, COUNT(*) FROM country GROUP BY Continent;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT ID FROM city EXCEPT SELECT Capital FROM country;",
        "question": "Find the IDs of cities that are not capitals of any country?",
        "correctness": 1,
        "gold_parse": "SELECT ID FROM city EXCEPT SELECT Capital FROM country;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT Continent FROM country;",
        "question": "What are the different continents?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Continent FROM country;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population > 1000000 OR Population < 100000;",
        "question": "List the names of cities that have a population greater than 1,000,000 or less than 100,000.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population > 1000000 OR Population < 100000;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(DISTINCT Language) FROM countrylanguage;",
        "question": "How many different languages are spoken?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Language) FROM countrylanguage;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city;",
        "question": "List the names of cities and their populations.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name, T2.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode;",
        "question": "Show the names of countries and the names of their cities.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Continent, T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode;",
        "question": "Show the continents and languages spoken in them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Continent, T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name, T2.Population FROM country AS T1 JOIN city AS T2 ON T1.Capital = T2.ID;",
        "question": "Show the names of countries and the populations of their capitals.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Population FROM country AS T1 JOIN city AS T2 ON T1.Capital = T2.ID;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT CountryCode, COUNT(*) FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(*) DESC;",
        "question": "Show the codes of countries and the number of languages spoken in them, ordered by the number of languages in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT CountryCode, COUNT(*) FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT ID FROM city WHERE Population > 100000;",
        "question": "Show the IDs of cities that have a population greater than 100,000.",
        "correctness": 1,
        "gold_parse": "SELECT ID FROM city WHERE Population > 100000;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(DISTINCT Name) FROM country;",
        "question": "How many distinct country names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Name) FROM country;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE SurfaceArea > 500000);",
        "question": "What are the names of cities in countries that have a surface area greater than 500,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE SurfaceArea > 500000);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population > 100000;",
        "question": "What are the names of cities that have a population greater than 100,000?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population > 100000;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode GROUP BY Name ORDER BY COUNT(*) DESC;",
        "question": "List the names of countries and the number of cities they have, ordered by the number of cities in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT Name, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode GROUP BY Name ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Name;",
        "question": "List the names of countries and the number of languages spoken in them.",
        "correctness": 1,
        "gold_parse": "SELECT Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Name;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent = 'Europe';",
        "question": "What are the names of countries in Europe?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM country WHERE Continent = 'Europe';"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Paris');",
        "question": "What is the name of the country where Paris is located?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Paris');"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > (SELECT Avg(SurfaceArea) FROM country);",
        "question": "What are the names and surface areas of countries that have a surface area above the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > (SELECT Avg(SurfaceArea) FROM country);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent = 'Africa';",
        "question": "What are the names of countries in Africa?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM country WHERE Continent = 'Africa';"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, LifeExpectancy FROM country WHERE LifeExpectancy > (SELECT Avg(LifeExpectancy) FROM country);",
        "question": "What are the names and life expectancies of countries that have a life expectancy above the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name, LifeExpectancy FROM country WHERE LifeExpectancy > (SELECT Avg(LifeExpectancy) FROM country);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Name;",
        "question": "How many languages are spoken in each country?",
        "correctness": 1,
        "gold_parse": "SELECT Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Name;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population > 500000;",
        "question": "What are the names of cities that have a population greater than 500,000?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population > 500000;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Region = 'South America';",
        "question": "What are the names of countries in South America?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM country WHERE Region = 'South America';"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > (SELECT Avg(SurfaceArea) FROM country);",
        "question": "What are the names and surface areas of countries that have a surface area above the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > (SELECT Avg(SurfaceArea) FROM country);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Code2 IS NOT NULL;",
        "question": "What are the names of countries that have a 2-letter code?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM country WHERE Code2 IS NOT NULL;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);",
        "question": "What are the names of cities that have a population below the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode GROUP BY Name;",
        "question": "How many cities does each country have?",
        "correctness": 1,
        "gold_parse": "SELECT Name, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode GROUP BY Name;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent = 'Asia';",
        "question": "What are the names of countries in Asia?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM country WHERE Continent = 'Asia';"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE SurfaceArea > 1000000;",
        "question": "What are the names of countries that have a surface area greater than 1,000,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM country WHERE SurfaceArea > 1000000;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, LifeExpectancy FROM country WHERE LifeExpectancy IS NOT NULL;",
        "question": "What are the names and life expectancies of countries that have a recorded life expectancy?",
        "correctness": 1,
        "gold_parse": "SELECT Name, LifeExpectancy FROM country WHERE LifeExpectancy IS NOT NULL;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);",
        "question": "What are the names of cities that have a population below the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent = 'North America';",
        "question": "What are the names of countries in North America?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM country WHERE Continent = 'North America';"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population < 100000;",
        "question": "What are the names and populations of cities that have a population less than 100,000?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population < 100000;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE IndepYear IS NOT NULL;",
        "question": "What are the names of countries that have a recorded year of independence?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM country WHERE IndepYear IS NOT NULL;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > 500000;",
        "question": "What are the names and surface areas of countries that have a surface area greater than 500,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > 500000;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population > 200000;",
        "question": "What are the names of cities that have a population greater than 200,000?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population > 200000;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT student_id FROM Students WHERE date_left IS NULL;",
        "question": "What are the IDs of students who have not yet left?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM Students WHERE date_left IS NULL;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name, T1.last_name, T2.course_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Courses AS T4 ON T3.course_id = T4.course_id;",
        "question": "Show the first name, last name, and course name for all students.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name, T1.last_name, T2.course_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Courses AS T4 ON T3.course_id = T4.course_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_id, COUNT(*) FROM Degree_Programs GROUP BY department_id;",
        "question": "How many degree programs does each department have?",
        "correctness": 1,
        "gold_parse": "SELECT department_id, COUNT(*) FROM Degree_Programs GROUP BY department_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_id, COUNT(*) FROM Student_Enrolment_Courses GROUP BY course_id;",
        "question": "How many students are enrolled in each course?",
        "correctness": 1,
        "gold_parse": "SELECT course_id, COUNT(*) FROM Student_Enrolment_Courses GROUP BY course_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT Avg(Population) FROM country;",
        "question": "What is the average population of all countries?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(Population) FROM country;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT Min(date_first_registered), Avg(date_first_registered), Max(date_first_registered) FROM Students;",
        "question": "What is the earliest, average, and latest registration date across all students?",
        "correctness": 1,
        "gold_parse": "SELECT Min(date_first_registered), Avg(date_first_registered), Max(date_first_registered) FROM Students;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT Avg(Percentage) FROM countrylanguage;",
        "question": "What is the average percentage of language speakers in all countries?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(Percentage) FROM countrylanguage;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_id, COUNT(*) FROM Courses GROUP BY department_id;",
        "question": "Show different departments and the number of courses in each.",
        "correctness": 1,
        "gold_parse": "SELECT department_id, COUNT(*) FROM Courses GROUP BY department_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT address_id FROM Addresses EXCEPT SELECT permanent_address_id FROM Students;",
        "question": "Find the IDs of addresses that are not used as permanent addresses by any student?",
        "correctness": 1,
        "gold_parse": "SELECT address_id FROM Addresses EXCEPT SELECT permanent_address_id FROM Students;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT state_province_county FROM Addresses;",
        "question": "What are the different states/provinces/counties?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT state_province_county FROM Addresses;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%advanced%';",
        "question": "List the names of courses that have 'advanced' in their description.",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_description LIKE '%advanced%';"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;",
        "question": "How many different departments offer degree programs?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT degree_summary_name, department_name FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id;",
        "question": "List the names of degree programs and their associated departments.",
        "correctness": 1,
        "gold_parse": "SELECT degree_summary_name, department_name FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name, T1.last_name, T2.course_name FROM Students AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_id = T2.student_id JOIN Courses AS T3 ON T2.course_id = T3.course_id;",
        "question": "Show the first name, last name, and course name for all students.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name, T1.last_name, T2.course_name FROM Students AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_id = T2.student_id JOIN Courses AS T3 ON T2.course_id = T3.course_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_summary_name, T2.course_name FROM Degree_Programs AS T1 JOIN Courses AS T2 ON T1.department_id = T2.department_id;",
        "question": "Show the degree summary names and course names for all degree programs.",
        "correctness": 1,
        "gold_parse": "SELECT T1.degree_summary_name, T2.course_name FROM Degree_Programs AS T1 JOIN Courses AS T2 ON T1.department_id = T2.department_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name, T2.course_name FROM Students AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_id = T2.student_id;",
        "question": "Show the first names of students and the course names they are enrolled in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name, T2.course_name FROM Students AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_id = T2.student_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_id, COUNT(*) FROM Student_Enrolment GROUP BY department_id ORDER BY COUNT(*) DESC;",
        "question": "Show the IDs of departments and the number of students enrolled in each, ordered by the number of students in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT department_id, COUNT(*) FROM Student_Enrolment GROUP BY department_id ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_id FROM Courses WHERE course_name LIKE '%Introduction%';",
        "question": "Show the IDs of courses that have 'Introduction' in their name.",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM Courses WHERE course_name LIKE '%Introduction%';"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT COUNT(DISTINCT state_province_county) FROM Addresses;",
        "question": "How many distinct states/provinces/counties are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT state_province_county) FROM Addresses;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Computer Science');",
        "question": "What are the names of courses offered by the Computer Science department?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Computer Science');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses WHERE student_id = 1);",
        "question": "What are the names of courses in which the student with ID 1 is enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses WHERE student_id = 1);"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name, COUNT(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY department_name ORDER BY COUNT(*) DESC;",
        "question": "List the names of departments and the number of degree programs they offer, ordered by the number of degree programs in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT department_name, COUNT(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY department_name ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name, COUNT(*) FROM Sections GROUP BY course_id;",
        "question": "List the section names and the number of sections for each course.",
        "correctness": 1,
        "gold_parse": "SELECT section_name, COUNT(*) FROM Sections GROUP BY course_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_id = (SELECT department_id FROM Degree_Programs WHERE degree_summary_name = 'B.Sc. Computer Science');",
        "question": "What is the name of the department offering the 'B.Sc. Computer Science' degree?",
        "correctness": 1,
        "gold_parse": "SELECT department_name FROM Departments WHERE department_id = (SELECT department_id FROM Degree_Programs WHERE degree_summary_name = 'B.Sc. Computer Science');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_id = (SELECT department_id FROM Courses WHERE course_name = 'Data Structures');",
        "question": "What is the name of the department offering the 'Data Structures' course?",
        "correctness": 1,
        "gold_parse": "SELECT department_name FROM Departments WHERE department_id = (SELECT department_id FROM Courses WHERE course_name = 'Data Structures');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name, COUNT(*) FROM Courses GROUP BY department_id;",
        "question": "What are the names of courses and the number of courses in each department?",
        "correctness": 1,
        "gold_parse": "SELECT course_name, COUNT(*) FROM Courses GROUP BY department_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name, last_name FROM Students WHERE email_address IS NOT NULL;",
        "question": "What are the first and last names of students who have an email address?",
        "correctness": 1,
        "gold_parse": "SELECT first_name, last_name FROM Students WHERE email_address IS NOT NULL;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name, COUNT(*) FROM Courses WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Mathematics') GROUP BY course_name;",
        "question": "What are the names and number of courses offered by the Mathematics department?",
        "correctness": 1,
        "gold_parse": "SELECT course_name, COUNT(*) FROM Courses WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Mathematics') GROUP BY course_name;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name, COUNT(*) FROM Departments GROUP BY department_name;",
        "question": "What are the names of departments and the number of courses they offer?",
        "correctness": 1,
        "gold_parse": "SELECT department_name, COUNT(*) FROM Departments GROUP BY department_name;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name, department_name FROM Courses JOIN Departments ON Courses.department_id = Departments.department_id;",
        "question": "What are the names of courses and their respective departments?",
        "correctness": 1,
        "gold_parse": "SELECT course_name, department_name FROM Courses JOIN Departments ON Courses.department_id = Departments.department_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name, last_name, email_address FROM Students WHERE email_address IS NOT NULL;",
        "question": "What are the first and last names, and email addresses of students who have an email address?",
        "correctness": 1,
        "gold_parse": "SELECT first_name, last_name, email_address FROM Students WHERE email_address IS NOT NULL;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT degree_summary_name, department_name FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id;",
        "question": "What are the names of degree programs and their respective departments?",
        "correctness": 1,
        "gold_parse": "SELECT degree_summary_name, department_name FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';",
        "question": "What are the names of courses that have 'Programming' in their name?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT COUNT(DISTINCT course_id) FROM Student_Enrolment_Courses;",
        "question": "How many distinct courses are students enrolled in?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT course_id) FROM Student_Enrolment_Courses;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections WHERE section_name = 'Section A');",
        "question": "What are the names of courses that have a 'Section A'?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections WHERE section_name = 'Section A');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name, COUNT(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY department_name;",
        "question": "How many degree programs does each department offer?",
        "correctness": 1,
        "gold_parse": "SELECT department_name, COUNT(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY department_name;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name, last_name, date_first_registered FROM Students WHERE date_first_registered < '2020-01-01';",
        "question": "What are the first and last names, and registration dates of students who registered before 2020?",
        "correctness": 1,
        "gold_parse": "SELECT first_name, last_name, date_first_registered FROM Students WHERE date_first_registered < '2020-01-01';"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'John' AND last_name = 'Doe'));",
        "question": "What are the names of courses in which the student named John Doe is enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'John' AND last_name = 'Doe'));"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT degree_summary_name FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Physics');",
        "question": "What are the names of degree programs offered by the Physics department?",
        "correctness": 1,
        "gold_parse": "SELECT degree_summary_name FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Physics');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Math%';",
        "question": "What are the names of courses that have 'Math' in their name?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_name LIKE '%Math%';"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT COUNT(DISTINCT semester_id) FROM Student_Enrolment;",
        "question": "How many distinct semesters do students enroll in?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT semester_id) FROM Student_Enrolment;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT degree_summary_name, COUNT(*) FROM Degree_Programs GROUP BY department_id;",
        "question": "What are the names of degree programs and the number of programs in each department?",
        "correctness": 1,
        "gold_parse": "SELECT degree_summary_name, COUNT(*) FROM Degree_Programs GROUP BY department_id;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');",
        "question": "What are the names of departments that offer degree programs in Engineering?",
        "correctness": 1,
        "gold_parse": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name, COUNT(*) FROM Courses WHERE course_name LIKE '%Data%' GROUP BY course_name;",
        "question": "What are the names and number of courses that have 'Data' in their name?",
        "correctness": 1,
        "gold_parse": "SELECT course_name, COUNT(*) FROM Courses WHERE course_name LIKE '%Data%' GROUP BY course_name;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name, last_name, cell_mobile_number FROM Students WHERE cell_mobile_number IS NOT NULL;",
        "question": "What are the first and last names, and cell/mobile numbers of students who have a cell/mobile number?",
        "correctness": 1,
        "gold_parse": "SELECT first_name, last_name, cell_mobile_number FROM Students WHERE cell_mobile_number IS NOT NULL;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name, last_name, date_left FROM Students WHERE date_left IS NOT NULL;",
        "question": "What are the first and last names, and departure dates of students who have left?",
        "correctness": 1,
        "gold_parse": "SELECT first_name, last_name, date_left FROM Students WHERE date_left IS NOT NULL;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_id FROM Properties WHERE date_sold IS NULL;",
        "question": "What are the IDs of properties that have not yet been sold?",
        "correctness": 1,
        "gold_parse": "SELECT property_id FROM Properties WHERE date_sold IS NULL;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT T1.property_name, T1.room_count, T2.feature_name FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id JOIN Other_Available_Features AS T3 ON T2.feature_id = T3.feature_id;",
        "question": "Show the property name, room count, and feature name for all properties.",
        "correctness": 1,
        "gold_parse": "SELECT T1.property_name, T1.room_count, T2.feature_name FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id JOIN Other_Available_Features AS T3 ON T2.feature_id = T3.feature_id;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code;",
        "question": "How many properties does each property type have?",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT feature_type_code, COUNT(*) FROM Other_Available_Features GROUP BY feature_type_code;",
        "question": "How many features are there for each feature type?",
        "correctness": 1,
        "gold_parse": "SELECT feature_type_code, COUNT(*) FROM Other_Available_Features GROUP BY feature_type_code;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT Avg(vendor_requested_price) FROM Properties;",
        "question": "What is the average vendor requested price for all properties?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(vendor_requested_price) FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT Min(date_on_market), Avg(date_on_market), Max(date_on_market) FROM Properties;",
        "question": "What is the earliest, average, and latest date on market for all properties?",
        "correctness": 1,
        "gold_parse": "SELECT Min(date_on_market), Avg(date_on_market), Max(date_on_market) FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT Avg(room_count) FROM Properties;",
        "question": "What is the average room count for all properties?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(room_count) FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code;",
        "question": "Show different property types and the number of properties in each.",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_id FROM Properties EXCEPT SELECT property_id FROM Other_Property_Features;",
        "question": "Find the IDs of properties that do not have any additional features?",
        "correctness": 1,
        "gold_parse": "SELECT property_id FROM Properties EXCEPT SELECT property_id FROM Other_Property_Features;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT DISTINCT property_type_code FROM Properties;",
        "question": "What are the different property types?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT property_type_code FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE room_count > 5 OR room_count < 3;",
        "question": "List the names of properties that have more than 5 rooms or less than 3 rooms.",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE room_count > 5 OR room_count < 3;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;",
        "question": "How many different property types are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, property_type_code FROM Properties;",
        "question": "List the names of properties and their types.",
        "correctness": 1,
        "gold_parse": "SELECT property_name, property_type_code FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT T1.property_name, T2.feature_name FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id;",
        "question": "Show the names of properties and the names of their features.",
        "correctness": 1,
        "gold_parse": "SELECT T1.property_name, T2.feature_name FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT T1.property_type_code, T2.feature_type_code FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id;",
        "question": "Show the property types and feature types for all properties.",
        "correctness": 1,
        "gold_parse": "SELECT T1.property_type_code, T2.feature_type_code FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT T1.property_name, T2.feature_description FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id;",
        "question": "Show the names of properties and the descriptions of their features.",
        "correctness": 1,
        "gold_parse": "SELECT T1.property_name, T2.feature_description FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;",
        "question": "Show the property types and the number of properties in each, ordered by the number of properties in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_id FROM Properties WHERE vendor_requested_price > 500000;",
        "question": "Show the IDs of properties that have a vendor requested price greater than 500,000.",
        "correctness": 1,
        "gold_parse": "SELECT property_id FROM Properties WHERE vendor_requested_price > 500000;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT COUNT(DISTINCT feature_type_code) FROM Other_Available_Features;",
        "question": "How many distinct feature types are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT feature_type_code) FROM Other_Available_Features;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'Apartment');",
        "question": "What are the names of properties that are apartments?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'Apartment');"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_id IN (SELECT property_id FROM Other_Property_Features WHERE feature_id = 1);",
        "question": "What are the names of properties that have the feature with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE property_id IN (SELECT property_id FROM Other_Property_Features WHERE feature_id = 1);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;",
        "question": "List the property types and the number of properties in each, ordered by the number of properties in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;",
        "question": "List the names of properties and the number of properties in each type.",
        "correctness": 1,
        "gold_parse": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code = 'HSE';",
        "question": "What are the names of properties that are houses?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE property_type_code = 'HSE';"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_id = (SELECT property_id FROM Other_Property_Features WHERE feature_name = 'Swimming Pool');",
        "question": "What is the name of the property that has a swimming pool?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE property_id = (SELECT property_id FROM Other_Property_Features WHERE feature_name = 'Swimming Pool');"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, vendor_requested_price FROM Properties WHERE vendor_requested_price > (SELECT Avg(vendor_requested_price) FROM Properties);",
        "question": "What are the names and vendor requested prices of properties that have a requested price above the average?",
        "correctness": 1,
        "gold_parse": "SELECT property_name, vendor_requested_price FROM Properties WHERE vendor_requested_price > (SELECT Avg(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code = 'COM';",
        "question": "What are the names of properties that are commercial?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE property_type_code = 'COM';"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, agreed_selling_price FROM Properties WHERE agreed_selling_price > (SELECT Avg(agreed_selling_price) FROM Properties);",
        "question": "What are the names and selling prices of properties that have a selling price above the average?",
        "correctness": 1,
        "gold_parse": "SELECT property_name, agreed_selling_price FROM Properties WHERE agreed_selling_price > (SELECT Avg(agreed_selling_price) FROM Properties);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;",
        "question": "How many properties are there in each type?",
        "correctness": 1,
        "gold_parse": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > 750000;",
        "question": "What are the names of properties that have a vendor requested price greater than 750,000?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > 750000;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE date_sold IS NULL;",
        "question": "What are the names of properties that have not yet been sold?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE date_sold IS NULL;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, agreed_selling_price FROM Properties WHERE agreed_selling_price < (SELECT Avg(agreed_selling_price) FROM Properties);",
        "question": "What are the names and selling prices of properties that have a selling price below the average?",
        "correctness": 1,
        "gold_parse": "SELECT property_name, agreed_selling_price FROM Properties WHERE agreed_selling_price < (SELECT Avg(agreed_selling_price) FROM Properties);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'House');",
        "question": "What are the names of properties that are houses?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'House');"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > 1000000;",
        "question": "What are the names of properties that have a vendor requested price greater than 1,000,000?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > 1000000;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE room_count > (SELECT Avg(room_count) FROM Properties);",
        "question": "What are the names of properties that have more rooms than the average?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE room_count > (SELECT Avg(room_count) FROM Properties);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description LIKE '%House%');",
        "question": "What are the names of properties that have 'House' in their type description?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description LIKE '%House%');"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;",
        "question": "What are the names of properties and the number of properties in each type?",
        "correctness": 1,
        "gold_parse": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < (SELECT Avg(vendor_requested_price) FROM Properties);",
        "question": "What are the names of properties that have a vendor requested price below the average?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price < (SELECT Avg(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, COUNT(*) FROM Properties WHERE property_type_code = 'APT' GROUP BY property_name;",
        "question": "What are the names and number of apartments?",
        "correctness": 1,
        "gold_parse": "SELECT property_name, COUNT(*) FROM Properties WHERE property_type_code = 'APT' GROUP BY property_name;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE date_on_market < '2022-01-01';",
        "question": "What are the names of properties that were on the market before 2022?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE date_on_market < '2022-01-01';"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, COUNT(*) FROM Properties WHERE property_type_code = 'FLD' GROUP BY property_name;",
        "question": "What are the names and number of fields?",
        "correctness": 1,
        "gold_parse": "SELECT property_name, COUNT(*) FROM Properties WHERE property_type_code = 'FLD' GROUP BY property_name;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code = (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'Apartment');",
        "question": "What is the name of the property that is an apartment?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE property_type_code = (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'Apartment');"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;",
        "question": "What are the names of properties and the number of properties in each type?",
        "correctness": 1,
        "gold_parse": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);",
        "question": "What is the name of the property that has the highest vendor requested price?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade = 12;",
        "question": "What are the names of highschoolers in grade 12?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade = 12;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id;",
        "question": "Show the names of highschoolers and their friends.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;",
        "question": "How many highschoolers are there in each grade?",
        "correctness": 1,
        "gold_parse": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id;",
        "question": "Show the names of highschoolers and the names of those they like.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT AVG(grade) FROM Highschooler;",
        "question": "What is the average grade of highschoolers?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(grade) FROM Highschooler;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT MIN(grade), AVG(grade), MAX(grade) FROM Highschooler;",
        "question": "What is the minimum, average, and maximum grade of highschoolers?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(grade), AVG(grade), MAX(grade) FROM Highschooler;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT COUNT(DISTINCT liked_id) FROM Likes;",
        "question": "How many distinct highschoolers are liked by others?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT liked_id) FROM Likes;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id, COUNT(*) FROM Friend GROUP BY student_id;",
        "question": "How many friends does each highschooler have?",
        "correctness": 1,
        "gold_parse": "SELECT student_id, COUNT(*) FROM Friend GROUP BY student_id;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend;",
        "question": "Find the IDs of highschoolers who do not have any friends?",
        "correctness": 1,
        "gold_parse": "SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT DISTINCT grade FROM Highschooler;",
        "question": "What are the different grades of highschoolers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT grade FROM Highschooler;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE name LIKE 'A%';",
        "question": "List the names of highschoolers that start with 'A'.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE name LIKE 'A%';"
    },
    {
        "db_id": "network_1",
        "query": "SELECT COUNT(DISTINCT grade) FROM Highschooler;",
        "question": "How many different grades are there among highschoolers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT grade) FROM Highschooler;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id;",
        "question": "Show the names of highschoolers and the names of the students they like.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id;",
        "question": "Show the names of highschoolers and the names of their friends.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id;",
        "question": "Show the names of highschoolers and the names of those who like them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.grade FROM Highschooler AS T1 JOIN Highschooler AS T2 ON T1.ID = T2.ID WHERE T1.grade = 9;",
        "question": "Show the names and grades of highschoolers who are in grade 9.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.grade FROM Highschooler AS T1 JOIN Highschooler AS T2 ON T1.ID = T2.ID WHERE T1.grade = 9;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id;",
        "question": "Show the names of highschoolers and the names of those who are friends with them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade > 10;",
        "question": "What are the names of highschoolers in grades above 10?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade > 10;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT COUNT(DISTINCT name) FROM Highschooler;",
        "question": "How many distinct highschooler names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM Highschooler;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MAX(grade) FROM Highschooler);",
        "question": "What are the names of highschoolers in the highest grade?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade = (SELECT MAX(grade) FROM Highschooler);"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MIN(grade) FROM Highschooler);",
        "question": "What are the names of highschoolers in the lowest grade?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade = (SELECT MIN(grade) FROM Highschooler);"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id;",
        "question": "Show the names of highschoolers and the names of those who like them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes);",
        "question": "What are the names of highschoolers who are liked by others?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes);"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes WHERE liked_id = 1);",
        "question": "What are the names of highschoolers who like the student with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes WHERE liked_id = 1);"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name, grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = 2);",
        "question": "What are the names and grades of highschoolers who are friends with the student with ID 2?",
        "correctness": 1,
        "gold_parse": "SELECT name, grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = 2);"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T2.student_id = 3;",
        "question": "Show the names of highschoolers who are friends with the student with ID 3.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T2.student_id = 3;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id WHERE T2.liked_id = 4;",
        "question": "Show the names of highschoolers who like the student with ID 4.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id WHERE T2.liked_id = 4;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'John');",
        "question": "What are the names of highschoolers who are in the same grade as John?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'John');"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Alice'));",
        "question": "What are the names of highschoolers who are friends with Alice?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Alice'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Bob'));",
        "question": "What are the names of highschoolers who are liked by Bob?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Bob'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Charlie'));",
        "question": "What are the names of highschoolers who are friends with Charlie?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Charlie'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MAX(grade) FROM Highschooler);",
        "question": "What are the names of highschoolers who are in the highest grade?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade = (SELECT MAX(grade) FROM Highschooler);"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MIN(grade) FROM Highschooler);",
        "question": "What are the names of highschoolers who are in the lowest grade?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade = (SELECT MIN(grade) FROM Highschooler);"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Eve');",
        "question": "What are the names of highschoolers who are in the same grade as Eve?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Eve');"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));",
        "question": "What are the names of highschoolers who are friends with David?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.student_id = 5;",
        "question": "Show the names of highschoolers who like the student with ID 5.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.student_id = 5;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Frank'));",
        "question": "What are the names of highschoolers who are liked by Frank?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Frank'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade > (SELECT AVG(grade) FROM Highschooler);",
        "question": "What are the names of highschoolers who are in grades above the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade > (SELECT AVG(grade) FROM Highschooler);"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT AVG(grade) FROM Highschooler);",
        "question": "What are the names of highschoolers who are in grades below the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade < (SELECT AVG(grade) FROM Highschooler);"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Grace'));",
        "question": "What are the names of highschoolers who are friends with Grace?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Grace'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Hank'));",
        "question": "What are the names of highschoolers who like Hank?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Hank'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Ivy');",
        "question": "What are the names of highschoolers who are in the same grade as Ivy?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Ivy');"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Jack'));",
        "question": "What are the names of highschoolers who are liked by Jack?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Jack'));"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Country = 'USA';",
        "question": "What are the names of singers from the USA?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Country = 'USA';"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T1.Name, T2.concert_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "question": "Show the names of singers and the names of the concerts they participated in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.concert_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "How many concerts are there for each concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T1.Name, T2.Theme FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID;",
        "question": "Show the names of stadiums and the themes of the concerts held there.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Theme FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT AVG(Capacity) FROM stadium;",
        "question": "What is the average capacity of stadiums?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(Capacity) FROM stadium;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT MIN(Age), AVG(Age), MAX(Age) FROM singer;",
        "question": "What is the minimum, average, and maximum age of singers?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(Age), AVG(Age), MAX(Age) FROM singer;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT COUNT(DISTINCT concert_ID) FROM singer_in_concert;",
        "question": "How many distinct concerts have singers participated in?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT concert_ID) FROM singer_in_concert;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Stadium_ID, COUNT(*) FROM concert GROUP BY Stadium_ID;",
        "question": "How many concerts have been held in each stadium?",
        "correctness": 1,
        "gold_parse": "SELECT Stadium_ID, COUNT(*) FROM concert GROUP BY Stadium_ID;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Stadium_ID FROM stadium EXCEPT SELECT Stadium_ID FROM concert;",
        "question": "Find the IDs of stadiums that have not hosted any concerts?",
        "correctness": 1,
        "gold_parse": "SELECT Stadium_ID FROM stadium EXCEPT SELECT Stadium_ID FROM concert;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT DISTINCT Location FROM stadium;",
        "question": "What are the different locations of stadiums?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Location FROM stadium;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Name LIKE 'A%';",
        "question": "List the names of singers that start with 'A'.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Name LIKE 'A%';"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT COUNT(DISTINCT Country) FROM singer;",
        "question": "How many different countries are represented by the singers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM singer;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, Theme FROM concert;",
        "question": "List the names and themes of all concerts.",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, Theme FROM concert;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T1.Name, T2.Theme FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID;",
        "question": "Show the names of stadiums and the themes of the concerts held there.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Theme FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T1.Name, T2.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID;",
        "question": "Show the names of stadiums and their locations.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T1.Name, T2.concert_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "question": "Show the names of singers and the concerts they participated in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.concert_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T1.Name, T2.concert_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "question": "Show the names of singers and the concerts they participated in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.concert_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age > 30;",
        "question": "What are the names of singers who are older than 30?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age > 30;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT COUNT(DISTINCT Name) FROM singer;",
        "question": "How many distinct singer names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Name) FROM singer;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "What are the names of the oldest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "What are the names of the youngest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "What are the names of the oldest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "What are the names of the youngest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age > 40;",
        "question": "What are the names of singers who are older than 40?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age > 40;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age < 20;",
        "question": "What are the names of singers who are younger than 20?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age < 20;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "What are the names of the oldest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "What are the names of the youngest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'John');",
        "question": "What are the names of singers who are the same age as John?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'John');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Alice');",
        "question": "What are the names of singers who are the same age as Alice?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Alice');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Bob');",
        "question": "What are the names of singers who are the same age as Bob?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Bob');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Charlie');",
        "question": "What are the names of singers who are the same age as Charlie?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Charlie');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "What are the names of the oldest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "What are the names of the youngest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'David');",
        "question": "What are the names of singers who are the same age as David?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'David');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Eve');",
        "question": "What are the names of singers who are the same age as Eve?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Eve');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Frank');",
        "question": "What are the names of singers who are the same age as Frank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Frank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Grace');",
        "question": "What are the names of singers who are the same age as Grace?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Grace');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);",
        "question": "What are the names of singers who are older than the average age?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age < (SELECT AVG(Age) FROM singer);",
        "question": "What are the names of singers who are younger than the average age?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age < (SELECT AVG(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "What are the names of singers who are the same age as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Ivy');",
        "question": "What are the names of singers who are the same age as Ivy?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Ivy');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Jack');",
        "question": "What are the names of singers who are the same age as Jack?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Jack');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');",
        "question": "What are the names of singers who are the same age as Kate?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE department = 'Computer Science';",
        "question": "What are the names of courses in the Computer Science department?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE department = 'Computer Science';"
    },
    {
        "db_id": "advising",
        "query": "SELECT T1.name, T2.name FROM course AS T1 JOIN area AS T2 ON T1.course_id = T2.course_id;",
        "question": "Show the names of courses and their respective areas.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM course AS T1 JOIN area AS T2 ON T1.course_id = T2.course_id;"
    },
    {
        "db_id": "advising",
        "query": "SELECT department, COUNT(*) FROM course GROUP BY department;",
        "question": "How many courses are there in each department?",
        "correctness": 1,
        "gold_parse": "SELECT department, COUNT(*) FROM course GROUP BY department;"
    },
    {
        "db_id": "advising",
        "query": "SELECT T1.name, T2.score FROM instructor AS T1 JOIN comment_instructor AS T2 ON T1.instructor_id = T2.instructor_id;",
        "question": "Show the names of instructors and their respective scores.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.score FROM instructor AS T1 JOIN comment_instructor AS T2 ON T1.instructor_id = T2.instructor_id;"
    },
    {
        "db_id": "advising",
        "query": "SELECT AVG(num_enrolled) FROM course;",
        "question": "What is the average number of students enrolled in courses?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(num_enrolled) FROM course;"
    },
    {
        "db_id": "advising",
        "query": "SELECT MIN(total_gpa), AVG(total_gpa), MAX(total_gpa) FROM student;",
        "question": "What is the minimum, average, and maximum GPA of students?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(total_gpa), AVG(total_gpa), MAX(total_gpa) FROM student;"
    },
    {
        "db_id": "advising",
        "query": "SELECT COUNT(DISTINCT instructor_id) FROM comment_instructor;",
        "question": "How many distinct instructors have received comments?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT instructor_id) FROM comment_instructor;"
    },
    {
        "db_id": "advising",
        "query": "SELECT course_id, COUNT(*) FROM course_offering GROUP BY course_id;",
        "question": "How many offerings are there for each course?",
        "correctness": 1,
        "gold_parse": "SELECT course_id, COUNT(*) FROM course_offering GROUP BY course_id;"
    },
    {
        "db_id": "advising",
        "query": "SELECT course_id FROM course EXCEPT SELECT pre_course_id FROM course_prerequisite;",
        "question": "Find the IDs of courses that do not have any prerequisites?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM course EXCEPT SELECT pre_course_id FROM course_prerequisite;"
    },
    {
        "db_id": "advising",
        "query": "SELECT DISTINCT semester FROM course_offering;",
        "question": "What are the different semesters in which courses are offered?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT semester FROM course_offering;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE name LIKE 'Data%';",
        "question": "List the names of courses that start with 'Data'.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE name LIKE 'Data%';"
    },
    {
        "db_id": "advising",
        "query": "SELECT COUNT(DISTINCT department) FROM course;",
        "question": "How many different departments are represented by the courses?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT department) FROM course;"
    },
    {
        "db_id": "advising",
        "query": "SELECT course_id, advisory_requirement FROM course;",
        "question": "List the course IDs and their advisory requirements.",
        "correctness": 1,
        "gold_parse": "SELECT course_id, advisory_requirement FROM course;"
    },
    {
        "db_id": "advising",
        "query": "SELECT T1.name, T2.name FROM instructor AS T1 JOIN offering_instructor AS T2 ON T1.instructor_id = T2.instructor_id;",
        "question": "Show the names of instructors and the courses they teach.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM instructor AS T1 JOIN offering_instructor AS T2 ON T1.instructor_id = T2.instructor_id;"
    },
    {
        "db_id": "advising",
        "query": "SELECT T1.name, T2.course_id FROM student AS T1 JOIN gsi AS T2 ON T1.student_id = T2.student_id;",
        "question": "Show the names of students and the courses they are GSIs for.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.course_id FROM student AS T1 JOIN gsi AS T2 ON T1.student_id = T2.student_id;"
    },
    {
        "db_id": "advising",
        "query": "SELECT T1.name, T2.name FROM instructor AS T1 JOIN comment_instructor AS T2 ON T1.instructor_id = T2.instructor_id;",
        "question": "Show the names of instructors and the comments they received.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM instructor AS T1 JOIN comment_instructor AS T2 ON T1.instructor_id = T2.instructor_id;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE credits = '3';",
        "question": "What are the names of courses with 3 credits?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE credits = '3';"
    },
    {
        "db_id": "advising",
        "query": "SELECT COUNT(DISTINCT name) FROM course;",
        "question": "How many distinct course names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM course;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE credits = (SELECT MAX(credits) FROM course);",
        "question": "What are the names of courses with the highest number of credits?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE credits = (SELECT MAX(credits) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE credits = (SELECT MIN(credits) FROM course);",
        "question": "What are the names of courses with the lowest number of credits?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE credits = (SELECT MIN(credits) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT T1.name, T2.name FROM course AS T1 JOIN course_prerequisite AS T2 ON T1.course_id = T2.pre_course_id;",
        "question": "Show the names of courses and their prerequisites.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.name FROM course AS T1 JOIN course_prerequisite AS T2 ON T1.course_id = T2.pre_course_id;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 100;",
        "question": "What are the names of courses with more than 100 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 100;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 50;",
        "question": "What are the names of courses with less than 50 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 50;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM course);",
        "question": "What are the names of courses with the highest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);",
        "question": "What are the names of courses with the lowest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 150;",
        "question": "What are the names of courses with more than 150 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 150;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 30;",
        "question": "What are the names of courses with less than 30 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 30;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM course);",
        "question": "What are the names of courses with the highest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);",
        "question": "What are the names of courses with the lowest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > (SELECT AVG(num_enrolled) FROM course);",
        "question": "What are the names of courses with enrollment above the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > (SELECT AVG(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < (SELECT AVG(num_enrolled) FROM course);",
        "question": "What are the names of courses with enrollment below the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < (SELECT AVG(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 200;",
        "question": "What are the names of courses with more than 200 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 200;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 20;",
        "question": "What are the names of courses with less than 20 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 20;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 250;",
        "question": "What are the names of courses with more than 250 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 250;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 10;",
        "question": "What are the names of courses with less than 10 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 10;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM course);",
        "question": "What are the names of courses with the highest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);",
        "question": "What are the names of courses with the lowest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > (SELECT AVG(num_enrolled) FROM course);",
        "question": "What are the names of courses with enrollment above the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > (SELECT AVG(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < (SELECT AVG(num_enrolled) FROM course);",
        "question": "What are the names of courses with enrollment below the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < (SELECT AVG(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 300;",
        "question": "What are the names of courses with more than 300 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 300;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 5;",
        "question": "What are the names of courses with less than 5 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 5;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 350;",
        "question": "What are the names of courses with more than 350 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 350;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 2;",
        "question": "What are the names of courses with less than 2 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 2;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM course);",
        "question": "What are the names of courses with the highest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);",
        "question": "What are the names of courses with the lowest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > (SELECT AVG(num_enrolled) FROM course);",
        "question": "What are the names of courses with enrollment above the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > (SELECT AVG(num_enrolled) FROM course);"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < (SELECT AVG(num_enrolled) FROM course);",
        "question": "What are the names of courses with enrollment below the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < (SELECT AVG(num_enrolled) FROM course);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Nationality = 'USA';",
        "question": "What are the names of poker players from the USA?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Nationality = 'USA';"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name, T2.Earnings FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;",
        "question": "Show the names of poker players and their earnings.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Earnings FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;",
        "question": "How many poker players are there from each nationality?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name, T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;",
        "question": "Show the names of poker players and their money rank.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT AVG(Earnings) FROM poker_player;",
        "question": "What is the average earnings of poker players?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(Earnings) FROM poker_player;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT MIN(Earnings), AVG(Earnings), MAX(Earnings) FROM poker_player;",
        "question": "What is the minimum, average, and maximum earnings of poker players?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(Earnings), AVG(Earnings), MAX(Earnings) FROM poker_player;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT COUNT(DISTINCT People_ID) FROM poker_player;",
        "question": "How many distinct poker players are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT People_ID) FROM poker_player;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT People_ID, COUNT(*) FROM poker_player GROUP BY People_ID;",
        "question": "How many records are there for each poker player?",
        "correctness": 1,
        "gold_parse": "SELECT People_ID, COUNT(*) FROM poker_player GROUP BY People_ID;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT People_ID FROM poker_player EXCEPT SELECT People_ID FROM people;",
        "question": "Find the IDs of poker players that do not have a corresponding record in the people table?",
        "correctness": 1,
        "gold_parse": "SELECT People_ID FROM poker_player EXCEPT SELECT People_ID FROM people;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT DISTINCT Nationality FROM people;",
        "question": "What are the different nationalities of poker players?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nationality FROM people;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Name LIKE 'J%';",
        "question": "List the names of poker players that start with 'J'.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Name LIKE 'J%';"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT COUNT(DISTINCT Name) FROM people;",
        "question": "How many different poker player names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Name) FROM people;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Final_Table_Made, COUNT(*) FROM poker_player GROUP BY Final_Table_Made;",
        "question": "How many poker players have made it to the final table?",
        "correctness": 1,
        "gold_parse": "SELECT Final_Table_Made, COUNT(*) FROM poker_player GROUP BY Final_Table_Made;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name, T2.Final_Table_Made FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;",
        "question": "Show the names of poker players and the number of final tables they have made.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Final_Table_Made FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name, T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;",
        "question": "Show the names of poker players and their best finish positions.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height > 180;",
        "question": "What are the names of poker players who are taller than 180 cm?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height > 180;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT COUNT(DISTINCT Name) FROM people;",
        "question": "How many distinct poker player names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Name) FROM people;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);",
        "question": "What are the names of the tallest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "What are the names of the shortest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);",
        "question": "What are the names of the tallest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "What are the names of the shortest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height > 190;",
        "question": "What are the names of poker players who are taller than 190 cm?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height > 190;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height < 160;",
        "question": "What are the names of poker players who are shorter than 160 cm?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height < 160;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);",
        "question": "What are the names of the tallest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "What are the names of the shortest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height > 185;",
        "question": "What are the names of poker players who are taller than 185 cm?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height > 185;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height < 155;",
        "question": "What are the names of poker players who are shorter than 155 cm?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height < 155;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);",
        "question": "What are the names of the tallest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "What are the names of the shortest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'John');",
        "question": "What are the names of poker players who are the same height as John?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'John');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Alice');",
        "question": "What are the names of poker players who are the same height as Alice?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Alice');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Bob');",
        "question": "What are the names of poker players who are the same height as Bob?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Bob');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Charlie');",
        "question": "What are the names of poker players who are the same height as Charlie?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Charlie');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);",
        "question": "What are the names of the tallest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "What are the names of the shortest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'David');",
        "question": "What are the names of poker players who are the same height as David?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'David');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Eve');",
        "question": "What are the names of poker players who are the same height as Eve?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Eve');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Frank');",
        "question": "What are the names of poker players who are the same height as Frank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Frank');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Grace');",
        "question": "What are the names of poker players who are the same height as Grace?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Grace');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height > (SELECT AVG(Height) FROM people);",
        "question": "What are the names of poker players who are taller than the average height?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height > (SELECT AVG(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height < (SELECT AVG(Height) FROM people);",
        "question": "What are the names of poker players who are shorter than the average height?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height < (SELECT AVG(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Hank');",
        "question": "What are the names of poker players who are the same height as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Hank');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Ivy');",
        "question": "What are the names of poker players who are the same height as Ivy?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Ivy');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Jack');",
        "question": "What are the names of poker players who are the same height as Jack?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Jack');"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Kate');",
        "question": "What are the names of poker players who are the same height as Kate?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Kate');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline FROM airlines WHERE Country = 'USA';",
        "question": "What are the names of airlines from the USA?",
        "correctness": 1,
        "gold_parse": "SELECT Airline FROM airlines WHERE Country = 'USA';"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.AirportName FROM airlines AS T1 JOIN airports AS T2 ON T1.Country = T2.Country;",
        "question": "Show the names of airlines and their corresponding airports in the same country.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.AirportName FROM airlines AS T1 JOIN airports AS T2 ON T1.Country = T2.Country;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;",
        "question": "How many airlines are there in each country?",
        "correctness": 1,
        "gold_parse": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Show the names of airlines and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AVG(FlightNo) FROM flights;",
        "question": "What is the average flight number?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(FlightNo) FROM flights;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT MIN(FlightNo), AVG(FlightNo), MAX(FlightNo) FROM flights;",
        "question": "What is the minimum, average, and maximum flight number?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(FlightNo), AVG(FlightNo), MAX(FlightNo) FROM flights;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT COUNT(DISTINCT Airline) FROM flights;",
        "question": "How many distinct airlines have flights?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Airline) FROM flights;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline, COUNT(*) FROM flights GROUP BY Airline;",
        "question": "How many flights are there for each airline?",
        "correctness": 1,
        "gold_parse": "SELECT Airline, COUNT(*) FROM flights GROUP BY Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline FROM flights EXCEPT SELECT uid FROM airlines;",
        "question": "Find the IDs of flights that do not have a corresponding record in the airlines table?",
        "correctness": 1,
        "gold_parse": "SELECT Airline FROM flights EXCEPT SELECT uid FROM airlines;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT DISTINCT City FROM airports;",
        "question": "What are the different cities with airports?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT City FROM airports;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE City LIKE 'N%';",
        "question": "List the names of airports in cities that start with 'N'.",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE City LIKE 'N%';"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT COUNT(DISTINCT AirportName) FROM airports;",
        "question": "How many different airport names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT AirportName) FROM airports;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;",
        "question": "How many flights are there from each source airport?",
        "correctness": 1,
        "gold_parse": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;",
        "question": "Show the names of source airports and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport;",
        "question": "Show the names of destination airports and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT City FROM airports WHERE Country = 'Canada';",
        "question": "What are the names of cities with airports in Canada?",
        "correctness": 1,
        "gold_parse": "SELECT City FROM airports WHERE Country = 'Canada';"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT COUNT(DISTINCT Country) FROM airports;",
        "question": "How many distinct countries have airports?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM airports;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);",
        "question": "What are the names of airports with the highest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);",
        "question": "What are the names of airports with the lowest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);",
        "question": "What are the names of airports with the highest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);",
        "question": "What are the names of airports with the lowest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode > 'LAX';",
        "question": "What are the names of airports with airport codes greater than 'LAX'?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode > 'LAX';"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode < 'SFO';",
        "question": "What are the names of airports with airport codes less than 'SFO'?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode < 'SFO';"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);",
        "question": "What are the names of airports with the highest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);",
        "question": "What are the names of airports with the lowest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode > 'JFK';",
        "question": "What are the names of airports with airport codes greater than 'JFK'?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode > 'JFK';"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode < 'ORD';",
        "question": "What are the names of airports with airport codes less than 'ORD'?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode < 'ORD';"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);",
        "question": "What are the names of airports with the highest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);",
        "question": "What are the names of airports with the lowest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode > 'ATL';",
        "question": "What are the names of airports with airport codes greater than 'ATL'?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode > 'ATL';"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode < 'LHR';",
        "question": "What are the names of airports with airport codes less than 'LHR'?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode < 'LHR';"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);",
        "question": "What are the names of airports with the highest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);",
        "question": "What are the names of airports with the lowest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'New York');",
        "question": "What are the names of airports in New York?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'New York');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Los Angeles');",
        "question": "What are the names of airports in Los Angeles?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Los Angeles');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Chicago');",
        "question": "What are the names of airports in Chicago?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Chicago');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'San Francisco');",
        "question": "What are the names of airports in San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'San Francisco');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);",
        "question": "What are the names of airports with the highest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MAX(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);",
        "question": "What are the names of airports with the lowest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Houston');",
        "question": "What are the names of airports in Houston?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Houston');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Miami');",
        "question": "What are the names of airports in Miami?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Miami');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Dallas');",
        "question": "What are the names of airports in Dallas?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Dallas');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Boston');",
        "question": "What are the names of airports in Boston?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Boston');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode > (SELECT AVG(AirportCode) FROM airports);",
        "question": "What are the names of airports with airport codes above the average?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode > (SELECT AVG(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode < (SELECT AVG(AirportCode) FROM airports);",
        "question": "What are the names of airports with airport codes below the average?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode < (SELECT AVG(AirportCode) FROM airports);"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Seattle');",
        "question": "What are the names of airports in Seattle?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Seattle');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Atlanta');",
        "question": "What are the names of airports in Atlanta?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Atlanta');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Denver');",
        "question": "What are the names of airports in Denver?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Denver');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Orlando');",
        "question": "What are the names of airports in Orlando?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Orlando');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM author WHERE oid = 1;",
        "question": "What are the names of authors belonging to organization with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM author WHERE oid = 1;"
    },
    {
        "db_id": "academic",
        "query": "SELECT T1.name, T2.title FROM author AS T1 JOIN writes AS T2 ON T1.aid = T2.aid JOIN publication AS T3 ON T2.pid = T3.pid;",
        "question": "Show the names of authors and the titles of their publications.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.title FROM author AS T1 JOIN writes AS T2 ON T1.aid = T2.aid JOIN publication AS T3 ON T2.pid = T3.pid;"
    },
    {
        "db_id": "academic",
        "query": "SELECT continent, COUNT(*) FROM organization GROUP BY continent;",
        "question": "How many organizations are there on each continent?",
        "correctness": 1,
        "gold_parse": "SELECT continent, COUNT(*) FROM organization GROUP BY continent;"
    },
    {
        "db_id": "academic",
        "query": "SELECT T1.name, T2.citation_num FROM publication AS T2 JOIN writes AS T1 ON T1.aid = T2.aid;",
        "question": "Show the names of authors and the number of citations of their publications.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.citation_num FROM publication AS T2 JOIN writes AS T1 ON T1.aid = T2.aid;"
    },
    {
        "db_id": "academic",
        "query": "SELECT AVG(citation_num) FROM publication;",
        "question": "What is the average number of citations per publication?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(citation_num) FROM publication;"
    },
    {
        "db_id": "academic",
        "query": "SELECT MIN(citation_num), AVG(citation_num), MAX(citation_num) FROM publication;",
        "question": "What is the minimum, average, and maximum number of citations per publication?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(citation_num), AVG(citation_num), MAX(citation_num) FROM publication;"
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT(DISTINCT aid) FROM writes;",
        "question": "How many distinct authors have written publications?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT aid) FROM writes;"
    },
    {
        "db_id": "academic",
        "query": "SELECT aid, COUNT(*) FROM writes GROUP BY aid;",
        "question": "How many publications has each author written?",
        "correctness": 1,
        "gold_parse": "SELECT aid, COUNT(*) FROM writes GROUP BY aid;"
    },
    {
        "db_id": "academic",
        "query": "SELECT aid FROM writes EXCEPT SELECT aid FROM author;",
        "question": "Find the IDs of authors who do not have a corresponding record in the author table?",
        "correctness": 1,
        "gold_parse": "SELECT aid FROM writes EXCEPT SELECT aid FROM author;"
    },
    {
        "db_id": "academic",
        "query": "SELECT DISTINCT name FROM domain;",
        "question": "What are the different domain names?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM domain;"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM author WHERE name LIKE 'J%';",
        "question": "List the names of authors that start with 'J'.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM author WHERE name LIKE 'J%';"
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT(DISTINCT name) FROM author;",
        "question": "How many different author names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM author;"
    },
    {
        "db_id": "academic",
        "query": "SELECT cid, COUNT(*) FROM publication GROUP BY cid;",
        "question": "How many publications are there for each conference?",
        "correctness": 1,
        "gold_parse": "SELECT cid, COUNT(*) FROM publication GROUP BY cid;"
    },
    {
        "db_id": "academic",
        "query": "SELECT T1.name, T2.citation_num FROM author AS T1 JOIN writes AS T2 ON T1.aid = T2.aid JOIN publication AS T3 ON T2.pid = T3.pid;",
        "question": "Show the names of authors and the number of citations of their publications.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.citation_num FROM author AS T1 JOIN writes AS T2 ON T1.aid = T2.aid JOIN publication AS T3 ON T2.pid = T3.pid;"
    },
    {
        "db_id": "academic",
        "query": "SELECT T1.name, T2.title FROM author AS T1 JOIN writes AS T2 ON T1.aid = T2.aid JOIN publication AS T3 ON T2.pid = T3.pid;",
        "question": "Show the names of authors and the titles of their publications.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.title FROM author AS T1 JOIN writes AS T2 ON T1.aid = T2.aid JOIN publication AS T3 ON T2.pid = T3.pid;"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM author WHERE oid = 1;",
        "question": "What are the names of authors belonging to organization with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM author WHERE oid = 1;"
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT(DISTINCT name) FROM domain;",
        "question": "How many different domain names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM domain;"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);",
        "question": "What are the names of journals with the highest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the names of journals with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);",
        "question": "What are the names of journals with the highest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the names of journals with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid > 10;",
        "question": "What are the names of journals with journal IDs greater than 10?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid > 10;"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid < 5;",
        "question": "What are the names of journals with journal IDs less than 5?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid < 5;"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);",
        "question": "What are the names of journals with the highest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the names of journals with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid > 15;",
        "question": "What are the names of journals with journal IDs greater than 15?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid > 15;"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid < 7;",
        "question": "What are the names of journals with journal IDs less than 7?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid < 7;"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);",
        "question": "What are the names of journals with the highest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the names of journals with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid > 20;",
        "question": "What are the names of journals with journal IDs greater than 20?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid > 20;"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid < 10;",
        "question": "What are the names of journals with journal IDs less than 10?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid < 10;"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);",
        "question": "What are the names of journals with the highest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the names of journals with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of AI');",
        "question": "What are the names of journals that have the same name as 'Journal of AI'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of AI');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Data Science');",
        "question": "What are the names of journals that have the same name as 'Journal of Data Science'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Data Science');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Machine Learning');",
        "question": "What are the names of journals that have the same name as 'Journal of Machine Learning'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Machine Learning');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Robotics');",
        "question": "What are the names of journals that have the same name as 'Journal of Robotics'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Robotics');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);",
        "question": "What are the names of journals with the highest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the names of journals with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Physics');",
        "question": "What are the names of journals that have the same name as 'Journal of Physics'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Physics');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');",
        "question": "What are the names of journals that have the same name as 'Journal of Chemistry'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Biology');",
        "question": "What are the names of journals that have the same name as 'Journal of Biology'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Biology');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Mathematics');",
        "question": "What are the names of journals that have the same name as 'Journal of Mathematics'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Mathematics');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid > (SELECT AVG(jid) FROM journal);",
        "question": "What are the names of journals with journal IDs above the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid > (SELECT AVG(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid < (SELECT AVG(jid) FROM journal);",
        "question": "What are the names of journals with journal IDs below the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid < (SELECT AVG(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Computer Science');",
        "question": "What are the names of journals that have the same name as 'Journal of Computer Science'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Computer Science');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Engineering');",
        "question": "What are the names of journals that have the same name as 'Journal of Engineering'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Engineering');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Medicine');",
        "question": "What are the names of journals that have the same name as 'Journal of Medicine'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Medicine');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Environmental Science');",
        "question": "What are the names of journals that have the same name as 'Journal of Environmental Science'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Environmental Science');"
    },
    {
        "db_id": "car_1",
        "query": "SELECT CountryName FROM countries WHERE Continent = 1;",
        "question": "What are the names of countries in continent with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT CountryName FROM countries WHERE Continent = 1;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker;",
        "question": "Show the names of car makers and their models.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Continent, COUNT(*) FROM countries GROUP BY Continent;",
        "question": "How many countries are there in each continent?",
        "correctness": 1,
        "gold_parse": "SELECT Continent, COUNT(*) FROM countries GROUP BY Continent;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker;",
        "question": "Show the full names of car makers and their models.",
        "correctness": 1,
        "gold_parse": "SELECT T1.FullName, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT AVG(Horsepower) FROM cars_data;",
        "question": "What is the average horsepower of cars?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(Horsepower) FROM cars_data;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT MIN(Horsepower), AVG(Horsepower), MAX(Horsepower) FROM cars_data;",
        "question": "What is the minimum, average, and maximum horsepower of cars?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(Horsepower), AVG(Horsepower), MAX(Horsepower) FROM cars_data;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(DISTINCT Maker) FROM model_list;",
        "question": "How many distinct car makers have models?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Maker) FROM model_list;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Maker, COUNT(*) FROM model_list GROUP BY Maker;",
        "question": "How many models does each car maker have?",
        "correctness": 1,
        "gold_parse": "SELECT Maker, COUNT(*) FROM model_list GROUP BY Maker;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Id FROM car_makers EXCEPT SELECT Maker FROM model_list;",
        "question": "Find the IDs of car makers that do not have a corresponding record in the model list?",
        "correctness": 1,
        "gold_parse": "SELECT Id FROM car_makers EXCEPT SELECT Maker FROM model_list;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT Continent FROM continents;",
        "question": "What are the different continents?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Continent FROM continents;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Model FROM model_list WHERE Model LIKE 'C%';",
        "question": "List the models of cars that start with 'C'.",
        "correctness": 1,
        "gold_parse": "SELECT Model FROM model_list WHERE Model LIKE 'C%';"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(DISTINCT Model) FROM model_list;",
        "question": "How many different car models are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Model) FROM model_list;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Maker, COUNT(*) FROM car_names GROUP BY Maker;",
        "question": "How many car names does each maker have?",
        "correctness": 1,
        "gold_parse": "SELECT Maker, COUNT(*) FROM car_names GROUP BY Maker;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Make, T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model;",
        "question": "Show the car makes and their models.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Make, T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Make, T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model;",
        "question": "Show the car makes and their models.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Make, T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT CountryName FROM countries WHERE Continent = 2;",
        "question": "What are the names of countries in continent with ID 2?",
        "correctness": 1,
        "gold_parse": "SELECT CountryName FROM countries WHERE Continent = 2;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(DISTINCT Continent) FROM continents;",
        "question": "How many different continents are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Continent) FROM continents;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the highest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the lowest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the highest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the lowest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id > 5;",
        "question": "What are the full names of car makers with IDs greater than 5?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id > 5;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id < 3;",
        "question": "What are the full names of car makers with IDs less than 3?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id < 3;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the highest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the lowest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id > 10;",
        "question": "What are the full names of car makers with IDs greater than 10?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id > 10;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id < 5;",
        "question": "What are the full names of car makers with IDs less than 5?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id < 5;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the highest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the lowest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id > 15;",
        "question": "What are the full names of car makers with IDs greater than 15?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id > 15;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id < 7;",
        "question": "What are the full names of car makers with IDs less than 7?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id < 7;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the highest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the lowest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id > 20;",
        "question": "What are the full names of car makers with IDs greater than 20?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id > 20;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id < 10;",
        "question": "What are the full names of car makers with IDs less than 10?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id < 10;"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the highest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the lowest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Toyota');",
        "question": "What are the full names of car makers that have the same name as 'Toyota'?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Toyota');"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Honda');",
        "question": "What are the full names of car makers that have the same name as 'Honda'?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Honda');"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Ford');",
        "question": "What are the full names of car makers that have the same name as 'Ford'?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Ford');"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Chevrolet');",
        "question": "What are the full names of car makers that have the same name as 'Chevrolet'?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Chevrolet');"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the highest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the lowest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Nissan');",
        "question": "What are the full names of car makers that have the same name as 'Nissan'?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Nissan');"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'BMW');",
        "question": "What are the full names of car makers that have the same name as 'BMW'?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'BMW');"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Audi');",
        "question": "What are the full names of car makers that have the same name as 'Audi'?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Audi');"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Mercedes-Benz');",
        "question": "What are the full names of car makers that have the same name as 'Mercedes-Benz'?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Mercedes-Benz');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality = 'American';",
        "question": "What are the names of American conductors?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Nationality = 'American';"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "question": "Show the names of orchestras and their conductors.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Nationality, COUNT(*) FROM conductor GROUP BY Nationality;",
        "question": "How many conductors are there for each nationality?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality, COUNT(*) FROM conductor GROUP BY Nationality;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Year_of_Work FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "question": "Show the names of orchestras and the years of work of their conductors.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Year_of_Work FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT AVG(Age) FROM conductor;",
        "question": "What is the average age of conductors?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(Age) FROM conductor;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT MIN(Age), AVG(Age), MAX(Age) FROM conductor;",
        "question": "What is the minimum, average, and maximum age of conductors?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(Age), AVG(Age), MAX(Age) FROM conductor;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT COUNT(DISTINCT Conductor_ID) FROM orchestra;",
        "question": "How many distinct conductors have orchestras?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Conductor_ID) FROM orchestra;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Conductor_ID, COUNT(*) FROM orchestra GROUP BY Conductor_ID;",
        "question": "How many orchestras does each conductor have?",
        "correctness": 1,
        "gold_parse": "SELECT Conductor_ID, COUNT(*) FROM orchestra GROUP BY Conductor_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Conductor_ID FROM conductor EXCEPT SELECT Conductor_ID FROM orchestra;",
        "question": "Find the IDs of conductors that do not have a corresponding record in the orchestra table?",
        "correctness": 1,
        "gold_parse": "SELECT Conductor_ID FROM conductor EXCEPT SELECT Conductor_ID FROM orchestra;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT DISTINCT Nationality FROM conductor;",
        "question": "What are the different nationalities of conductors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nationality FROM conductor;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Name LIKE 'J%';",
        "question": "List the names of conductors that start with 'J'.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Name LIKE 'J%';"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT COUNT(DISTINCT Name) FROM conductor;",
        "question": "How many different conductor names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Name) FROM conductor;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Orchestra, COUNT(*) FROM performance GROUP BY Orchestra_ID;",
        "question": "How many performances does each orchestra have?",
        "correctness": 1,
        "gold_parse": "SELECT Orchestra, COUNT(*) FROM performance GROUP BY Orchestra_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Date FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID;",
        "question": "Show the names of orchestras and the dates of their performances.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Date FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Type FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID;",
        "question": "Show the names of orchestras and the types of their performances.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Type FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality = 'British';",
        "question": "What are the names of British conductors?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Nationality = 'British';"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT COUNT(DISTINCT Nationality) FROM conductor;",
        "question": "How many different nationalities are there among conductors?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Nationality) FROM conductor;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the lowest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the lowest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID > 5;",
        "question": "What are the names of conductors with IDs greater than 5?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID > 5;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 3;",
        "question": "What are the names of conductors with IDs less than 3?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 3;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the lowest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID > 10;",
        "question": "What are the names of conductors with IDs greater than 10?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID > 10;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 5;",
        "question": "What are the names of conductors with IDs less than 5?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 5;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the lowest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID > 15;",
        "question": "What are the names of conductors with IDs greater than 15?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID > 15;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 7;",
        "question": "What are the names of conductors with IDs less than 7?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 7;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the lowest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID > 20;",
        "question": "What are the names of conductors with IDs greater than 20?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID > 20;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 10;",
        "question": "What are the names of conductors with IDs less than 10?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 10;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the lowest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'John');",
        "question": "What are the names of conductors that have the same name as 'John'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'John');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Michael');",
        "question": "What are the names of conductors that have the same name as 'Michael'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Michael');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Sarah');",
        "question": "What are the names of conductors that have the same name as 'Sarah'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Sarah');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "What are the names of conductors that have the same name as 'Emma'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the lowest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'David');",
        "question": "What are the names of conductors that have the same name as 'David'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'David');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Anna');",
        "question": "What are the names of conductors that have the same name as 'Anna'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Anna');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Paul');",
        "question": "What are the names of conductors that have the same name as 'Paul'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Paul');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Lisa');",
        "question": "What are the names of conductors that have the same name as 'Lisa'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Lisa');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE city = 'San Francisco';",
        "question": "What are the names of businesses in San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE city = 'San Francisco';"
    },
    {
        "db_id": "yelp",
        "query": "SELECT T1.name, T2.category_name FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id;",
        "question": "Show the names of businesses and their categories.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.category_name FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT city, COUNT(*) FROM business GROUP BY city;",
        "question": "How many businesses are there in each city?",
        "correctness": 1,
        "gold_parse": "SELECT city, COUNT(*) FROM business GROUP BY city;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT T1.name, T2.day, T2.count FROM business AS T1 JOIN checkin AS T2 ON T1.business_id = T2.business_id;",
        "question": "Show the names of businesses and the days they received check-ins.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.day, T2.count FROM business AS T1 JOIN checkin AS T2 ON T1.business_id = T2.business_id;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT AVG(rating) FROM business;",
        "question": "What is the average rating of businesses?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(rating) FROM business;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT MIN(rating), AVG(rating), MAX(rating) FROM business;",
        "question": "What is the minimum, average, and maximum rating of businesses?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(rating), AVG(rating), MAX(rating) FROM business;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT(DISTINCT business_id) FROM category;",
        "question": "How many distinct businesses have categories?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT business_id) FROM category;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT business_id, COUNT(*) FROM review GROUP BY business_id;",
        "question": "How many reviews does each business have?",
        "correctness": 1,
        "gold_parse": "SELECT business_id, COUNT(*) FROM review GROUP BY business_id;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT business_id FROM business EXCEPT SELECT business_id FROM category;",
        "question": "Find the IDs of businesses that do not have a corresponding record in the category table?",
        "correctness": 1,
        "gold_parse": "SELECT business_id FROM business EXCEPT SELECT business_id FROM category;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT DISTINCT state FROM business;",
        "question": "What are the different states where businesses are located?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT state FROM business;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE name LIKE 'B%';",
        "question": "List the names of businesses that start with 'B'.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE name LIKE 'B%';"
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT(DISTINCT name) FROM business;",
        "question": "How many different business names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM business;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT business_id, COUNT(*) FROM checkin GROUP BY business_id;",
        "question": "How many check-ins does each business have?",
        "correctness": 1,
        "gold_parse": "SELECT business_id, COUNT(*) FROM checkin GROUP BY business_id;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT T1.name, T2.neighbourhood_name FROM business AS T1 JOIN neighbourhood AS T2 ON T1.business_id = T2.business_id;",
        "question": "Show the names of businesses and their neighbourhoods.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.neighbourhood_name FROM business AS T1 JOIN neighbourhood AS T2 ON T1.business_id = T2.business_id;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT T1.name, T2.rating, T2.text FROM business AS T1 JOIN review AS T2 ON T1.business_id = T2.business_id;",
        "question": "Show the names of businesses and their reviews.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name, T2.rating, T2.text FROM business AS T1 JOIN review AS T2 ON T1.business_id = T2.business_id;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE city = 'Los Angeles';",
        "question": "What are the names of businesses in Los Angeles?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE city = 'Los Angeles';"
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT(DISTINCT city) FROM business;",
        "question": "How many different cities have businesses?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT city) FROM business;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);",
        "question": "What are the names of businesses with the highest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the names of businesses with the lowest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);",
        "question": "What are the names of businesses with the highest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the names of businesses with the lowest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid > 5;",
        "question": "What are the names of businesses with IDs greater than 5?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid > 5;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid < 3;",
        "question": "What are the names of businesses with IDs less than 3?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid < 3;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);",
        "question": "What are the names of businesses with the highest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the names of businesses with the lowest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid > 10;",
        "question": "What are the names of businesses with IDs greater than 10?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid > 10;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid < 5;",
        "question": "What are the names of businesses with IDs less than 5?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid < 5;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);",
        "question": "What are the names of businesses with the highest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the names of businesses with the lowest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid > 15;",
        "question": "What are the names of businesses with IDs greater than 15?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid > 15;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid < 7;",
        "question": "What are the names of businesses with IDs less than 7?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid < 7;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);",
        "question": "What are the names of businesses with the highest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the names of businesses with the lowest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid > 20;",
        "question": "What are the names of businesses with IDs greater than 20?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid > 20;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid < 10;",
        "question": "What are the names of businesses with IDs less than 10?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid < 10;"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);",
        "question": "What are the names of businesses with the highest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the names of businesses with the lowest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Starbucks');",
        "question": "What are the names of businesses that have the same name as 'Starbucks'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Starbucks');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'McDonalds');",
        "question": "What are the names of businesses that have the same name as 'McDonalds'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'McDonalds');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Walmart');",
        "question": "What are the names of businesses that have the same name as 'Walmart'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Walmart');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Costco');",
        "question": "What are the names of businesses that have the same name as 'Costco'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Costco');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);",
        "question": "What are the names of businesses with the highest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the names of businesses with the lowest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'KFC');",
        "question": "What are the names of businesses that have the same name as 'KFC'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'KFC');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Target');",
        "question": "What are the names of businesses that have the same name as 'Target'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Target');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Apple Store');",
        "question": "What are the names of businesses that have the same name as 'Apple Store'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Apple Store');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');",
        "question": "What are the names of businesses that have the same name as 'Best Buy'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name, nationality FROM actor WHERE birth_city = 'New York City';",
        "question": "What is the name and nationality of every actor born in New York City?",
        "correctness": 1,
        "gold_parse": "SELECT name, nationality FROM actor WHERE birth_city = 'New York City';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT M.title, M.release_year FROM movie AS M JOIN directed_by AS D ON M.mid = D.msid JOIN director AS DIR ON D.did = DIR.did WHERE DIR.name = 'Steven Spielberg';",
        "question": "Show the title and release year of all movies directed by directors named 'Steven Spielberg'.",
        "correctness": 1,
        "gold_parse": "SELECT M.title, M.release_year FROM movie AS M JOIN directed_by AS D ON M.mid = D.msid JOIN director AS DIR ON D.did = DIR.did WHERE DIR.name = 'Steven Spielberg';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT G.genre, COUNT(*) FROM genre AS G JOIN classification AS C ON G.gid = C.gid GROUP BY G.genre;",
        "question": "List all genres and the number of movies in each genre.",
        "correctness": 1,
        "gold_parse": "SELECT G.genre, COUNT(*) FROM genre AS G JOIN classification AS C ON G.gid = C.gid GROUP BY G.genre;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT P.name FROM producer AS P JOIN made_by AS M ON P.pid = M.pid GROUP BY P.name HAVING COUNT(M.msid) > 5;",
        "question": "Find the names of all producers who have produced more than 5 movies.",
        "correctness": 1,
        "gold_parse": "SELECT P.name FROM producer AS P JOIN made_by AS M ON P.pid = M.pid GROUP BY P.name HAVING COUNT(M.msid) > 5;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT country_code FROM company;",
        "question": "What are the different countries where movie production companies are based?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT country_code FROM company;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name, birth_year FROM actor WHERE nationality = 'American';",
        "question": "What are the names and birth years of American actors?",
        "correctness": 1,
        "gold_parse": "SELECT name, birth_year FROM actor WHERE nationality = 'American';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE release_year > 2000;",
        "question": "Which movies were released after the year 2000?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE release_year > 2000;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT M.title, G.genre FROM movie AS M JOIN classification AS C ON M.mid = C.msid JOIN genre AS G ON C.gid = G.gid WHERE G.genre = 'Comedy';",
        "question": "What are the titles of comedy movies?",
        "correctness": 1,
        "gold_parse": "SELECT M.title, G.genre FROM movie AS M JOIN classification AS C ON M.mid = C.msid JOIN genre AS G ON C.gid = G.gid WHERE G.genre = 'Comedy';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, budget FROM movie ORDER BY budget DESC;",
        "question": "What are the titles and budgets of movies ordered by budget in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT title, budget FROM movie ORDER BY budget DESC;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE budget > 1000000;",
        "question": "Which movies had a budget greater than 1 million dollars?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE budget > 1000000;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT name FROM actor WHERE gender = 'Female';",
        "question": "What are the names of all female actors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM actor WHERE gender = 'Female';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons > 3;",
        "question": "Which TV series have more than 3 seasons?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE num_of_seasons > 3;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM tv_series WHERE num_of_episodes > 50;",
        "question": "What are the titles and release years of TV series with more than 50 episodes?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM tv_series WHERE num_of_episodes > 50;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT nationality FROM director;",
        "question": "What are the different nationalities of directors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT nationality FROM director;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE release_year BETWEEN 1990 AND 2000;",
        "question": "Which movies were released between 1990 and 2000?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE release_year BETWEEN 1990 AND 2000;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name, birth_city FROM actor WHERE nationality = 'British';",
        "question": "What are the names and birth cities of British actors?",
        "correctness": 1,
        "gold_parse": "SELECT name, birth_city FROM actor WHERE nationality = 'British';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie WHERE title_aka IS NOT NULL;",
        "question": "Which movies have an alternate title?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie WHERE title_aka IS NOT NULL;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT birth_city FROM actor;",
        "question": "What are the different birth cities of actors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT birth_city FROM actor;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT P.name, M.title FROM producer AS P JOIN made_by AS MB ON P.pid = MB.pid JOIN movie AS M ON MB.msid = M.mid;",
        "question": "What are the names of producers and the titles of the movies they produced?",
        "correctness": 1,
        "gold_parse": "SELECT P.name, M.title FROM producer AS P JOIN made_by AS MB ON P.pid = MB.pid JOIN movie AS M ON MB.msid = M.mid;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE release_year < 1980;",
        "question": "Which movies were released before 1980?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE release_year < 1980;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM director WHERE birth_year < 1960;",
        "question": "Which directors were born before 1960?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM director WHERE birth_year < 1960;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_year > 1990;",
        "question": "Which actors were born after 1990?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE birth_year > 1990;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie WHERE budget > 50000000;",
        "question": "Which movies had a budget greater than 50 million dollars and what were their release years?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie WHERE budget > 50000000;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE budget IS NOT NULL;",
        "question": "Which TV series have a recorded budget?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE budget IS NOT NULL;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_year IS NULL;",
        "question": "Which actors do not have a recorded birth year?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE birth_year IS NULL;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE budget < 1000000;",
        "question": "Which movies had a budget less than 1 million dollars?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE budget < 1000000;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM producer WHERE nationality = 'Canadian';",
        "question": "What are the names of Canadian producers?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM producer WHERE nationality = 'Canadian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT genre FROM genre;",
        "question": "What are the different genres of movies?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT genre FROM genre;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE budget IS NULL;",
        "question": "Which movies do not have a recorded budget?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE budget IS NULL;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie ORDER BY release_year DESC;",
        "question": "What are the titles and release years of movies ordered by release year in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie ORDER BY release_year DESC;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM director WHERE birth_city = 'Los Angeles';",
        "question": "Which directors were born in Los Angeles?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM director WHERE birth_city = 'Los Angeles';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE release_year = 2020;",
        "question": "Which TV series were released in 2020?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE release_year = 2020;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE gender = 'Male' AND nationality = 'Indian';",
        "question": "What are the names of male Indian actors?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE gender = 'Male' AND nationality = 'Indian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE title_aka IS NULL;",
        "question": "Which movies do not have an alternate title?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE title_aka IS NULL;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT gender FROM director;",
        "question": "What are the different genders of directors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT gender FROM director;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "What are the names of Australian actors?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE budget BETWEEN 1000000 AND 5000000;",
        "question": "Which movies had a budget between 1 million and 5 million dollars?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE budget BETWEEN 1000000 AND 5000000;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM director WHERE nationality = 'French';",
        "question": "What are the names of French directors?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM director WHERE nationality = 'French';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_city = 'London';",
        "question": "Which actors were born in London?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE birth_city = 'London';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM tv_series WHERE release_year > 2010;",
        "question": "What are the titles and release years of TV series released after 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM tv_series WHERE release_year > 2010;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT nationality FROM actor;",
        "question": "What are the different nationalities of actors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT nationality FROM actor;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM producer WHERE birth_city = 'Toronto';",
        "question": "Which producers were born in Toronto?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM producer WHERE birth_city = 'Toronto';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE release_year = 1999;",
        "question": "Which movies were released in 1999?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE release_year = 1999;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons < 2;",
        "question": "Which TV series have less than 2 seasons?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE num_of_seasons < 2;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie WHERE release_year = 1985;",
        "question": "What are the titles and release years of movies released in 1985?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie WHERE release_year = 1985;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM director WHERE nationality = 'Japanese';",
        "question": "What are the names of Japanese directors?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM director WHERE nationality = 'Japanese';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE release_year > 2015;",
        "question": "Which movies were released after 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE release_year > 2015;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name, nationality FROM actor WHERE birth_city = 'New York City';",
        "question": "What is the name and nationality of every actor born in New York City?",
        "correctness": 1,
        "gold_parse": "SELECT name, nationality FROM actor WHERE birth_city = 'New York City';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT M.title, M.release_year FROM movie AS M JOIN directed_by AS D ON M.mid = D.msid JOIN director AS DIR ON D.did = DIR.did WHERE DIR.name = 'Steven Spielberg';",
        "question": "Show the title and release year of all movies directed by directors named 'Steven Spielberg'.",
        "correctness": 1,
        "gold_parse": "SELECT M.title, M.release_year FROM movie AS M JOIN directed_by AS D ON M.mid = D.msid JOIN director AS DIR ON D.did = DIR.did WHERE DIR.name = 'Steven Spielberg';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT G.genre, COUNT(*) FROM genre AS G JOIN classification AS C ON G.gid = C.gid GROUP BY G.genre;",
        "question": "List all genres and the number of movies in each genre.",
        "correctness": 1,
        "gold_parse": "SELECT G.genre, COUNT(*) FROM genre AS G JOIN classification AS C ON G.gid = C.gid GROUP BY G.genre;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT P.name FROM producer AS P JOIN made_by AS M ON P.pid = M.pid GROUP BY P.name HAVING COUNT(M.msid) > 5;",
        "question": "Find the names of all producers who have produced more than 5 movies.",
        "correctness": 1,
        "gold_parse": "SELECT P.name FROM producer AS P JOIN made_by AS M ON P.pid = M.pid GROUP BY P.name HAVING COUNT(M.msid) > 5;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT country_code FROM company;",
        "question": "What are the different countries where movie production companies are based?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT country_code FROM company;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name FROM battle WHERE result = 'victory'",
        "question": "What are the names of battles that ended in victory?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM battle WHERE result = 'victory'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "query": "SELECT name FROM battle WHERE result = 'victory'",
        "question": "What are the names of battles that ended in victory?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM battle WHERE result = 'victory'"
    },
    {
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name FROM battle WHERE result = 'victory'",
        "question": "What are the names of battles that ended in victory?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM battle WHERE result = 'victory'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name FROM battle WHERE result = 'victory'",
        "question": "What are the names of battles that ended in victory?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM battle WHERE result = 'victory'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name FROM battle WHERE result = 'victory'",
        "question": "What are the names of battles that ended in victory?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM battle WHERE result = 'victory'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name FROM battle WHERE result = 'victory'",
        "question": "What are the names of battles that ended in victory?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM battle WHERE result = 'victory'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name FROM battle WHERE result = 'victory'",
        "question": "What are the names of battles that ended in victory?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM battle WHERE result = 'victory'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name FROM battle WHERE result = 'victory'",
        "question": "What are the names of battles that ended in victory?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM battle WHERE result = 'victory'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "department_management",
        "query": "SELECT count(*) FROM head WHERE age  >  56",
        "question": "How many heads of the departments are older than 56 ?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM head WHERE age  >  56"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT count(*) FROM club",
        "question": "How many clubs are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM club"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT count(*) FROM club",
        "question": "Count the number of clubs.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM club"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "List the name of clubs in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "What are the names of clubs, ordered alphabetically?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manager ,  Captain FROM club",
        "question": "What are the managers and captains of clubs?",
        "correctness": 1,
        "gold_parse": "SELECT Manager ,  Captain FROM club"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manager ,  Captain FROM club",
        "question": "Return the managers and captains of all clubs.",
        "correctness": 1,
        "gold_parse": "SELECT Manager ,  Captain FROM club"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
        "question": "List the name of clubs whose manufacturer is not \"Nike\"",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club WHERE Manufacturer != \"Nike\""
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
        "question": "What are the names of clubs who do not have the manufacturer Nike?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club WHERE Manufacturer != \"Nike\""
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM player ORDER BY Wins_count ASC",
        "question": "What are the names of players in ascending order of wins count?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM player ORDER BY Wins_count ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM player ORDER BY Wins_count ASC",
        "question": "Return the names of players in order of count of wins, ascending.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM player ORDER BY Wins_count ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the name of the player with the highest earnings?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
        "question": "Return the name of the player who earns the most money.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
        "question": "What are the distinct countries of players with earnings higher than 1200000?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
        "question": "From which countries are players who make more than 1200000 from?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
        "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "question": "Show names of players and names of clubs they are in.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "question": "What are the names of players and the corresponding clubs that they are in?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
        "question": "Show names of clubs that have players with more than 2 win counts.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
        "question": "What are the names of clubs that have players who have won more than twice?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
        "question": "Show names of players from the club with manager \"Sam Allardyce\".",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\""
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
        "question": "What are the names of players from the club managed by Sam Allardyce?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\""
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
        "question": "Show names of clubs in descending order of average earnings of players belonging.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
        "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
        "question": "Show different manufacturers and the number of clubs they are associated with.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
        "question": "How many clubs use each manufacturer?",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common manufacturer of clubs.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which manufacturer is most common among clubs?",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "List the manufacturers that are associated with more than one club.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Which manufacturers work for more than 1 club?",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
        "question": "List the country that have more than one player.",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
        "question": "Which countries have produced more than one player?",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "question": "List the name of clubs that do not have players.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "question": "What are the names of clubs that do not have any players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
        "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
        "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT COUNT (DISTINCT Country) FROM player",
        "question": "What is the number of distinct countries of all players?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT Country) FROM player"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT COUNT (DISTINCT Country) FROM player",
        "question": "How many different countries are players from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT Country) FROM player"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
        "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
        "correctness": 1,
        "gold_parse": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\""
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
        "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
        "correctness": 1,
        "gold_parse": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\""
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
        "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
        "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
        "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
        "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
        "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
        "correctness": 1,
        "gold_parse": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
        "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
        "correctness": 1,
        "gold_parse": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
        "correctness": 1,
        "gold_parse": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
        "correctness": 1,
        "gold_parse": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2",
        "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "e_commerce",
        "query": "select t1.product_id ,  t1.product_name ,  t1.product_price ,  t1.product_color from products as t1 join order_items as t2 on t1.product_id  =  t2.product_id join orders as t3 on t2.order_id  =  t3.order_id group by t1.product_id having count(*) < 2",
        "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
        "correctness": 1,
        "gold_parse": "select t1.product_id ,  t1.product_name ,  t1.product_price ,  t1.product_color from products as t1 join order_items as t2 on t1.product_id  =  t2.product_id join orders as t3 on t2.order_id  =  t3.order_id group by t1.product_id having count(*) < 2"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
        "question": "Which orders have at least 2 products on it? List the order id and date.",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
        "question": "What are the ids and dates of the orders with at least two products?",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which product are listed in orders most frequently? List the id, product name and price.",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1",
        "question": "Which order have the least sum of the product prices. List the order id and sum.",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1",
        "question": "What is the order that total cost the least , and how much is the total cost ?",
        "correctness": 1,
        "gold_parse": "select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most popular payment method?",
        "correctness": 1,
        "gold_parse": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the payment method that most customers use?",
        "correctness": 1,
        "gold_parse": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
        "question": "How many number of products does each gender of customers buy? List the gender and the number",
        "correctness": 1,
        "gold_parse": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
        "question": "How many products does each gender buy?",
        "correctness": 1,
        "gold_parse": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
        "question": "How many orders has each gender of customers placed?",
        "correctness": 1,
        "gold_parse": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
        "question": "How many orders has each gender placed?",
        "correctness": 1,
        "gold_parse": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "List the customers' first name, middle initial, last name and payment methods.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
        "question": "List the invoices' status, date and the date of shipment.",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
        "question": "What are the statuses, dates, and shipment dates for all invoices?",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "List the names of the products being shipped and the corresponding shipment date.",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
        "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
        "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What is the product name and the color of the ordered items which have been shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What are the names and colors of all products that have been shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
        "question": "What are invoices status of all the orders which have not been shipped?",
        "correctness": 1,
        "gold_parse": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
        "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
        "correctness": 1,
        "gold_parse": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )"
    },
    {
        "db_id": "e_commerce",
        "query": "select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id",
        "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
        "correctness": 1,
        "gold_parse": "select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id",
        "question": "For each order, what is its id, date, and total amount paid?",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(DISTINCT customer_id) FROM Orders",
        "question": "How many customers have placed any order?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Orders"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(DISTINCT customer_id) FROM Orders",
        "question": "How many different customers have ordered things?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Orders"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
        "question": "How many item states are there in the orders?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT order_item_status_code) FROM Order_items"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
        "question": "How many different item status codes are there listed in ordered items?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT order_item_status_code) FROM Order_items"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
        "question": "How many different payment methods are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
        "question": "How many different payment methods can customers choose from?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
        "correctness": 1,
        "gold_parse": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
        "correctness": 1,
        "gold_parse": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
        "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
        "correctness": 1,
        "gold_parse": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
        "question": "What are the sizes of all products whose name includes the word 'Dell'?",
        "correctness": 1,
        "gold_parse": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "question": "What are the product price and the product size of the products whose price is above average?",
        "correctness": 1,
        "gold_parse": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "question": "What are the prices and sizes of all products whose price is above the mean?",
        "correctness": 1,
        "gold_parse": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "How many kinds of products have not been sold?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "What is the number of products that have not been ordered yet?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
        "question": "How many customers do not have any payment method?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
        "question": "How many customers do not have a listed payment method?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code ,  date_order_placed FROM Orders",
        "question": "What are all the order status and all the dates of orders?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code ,  date_order_placed FROM Orders"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code ,  date_order_placed FROM Orders",
        "question": "What are the status codes and dates placed for all of the orders?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code ,  date_order_placed FROM Orders"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
        "question": "List the address, town and county information of the customers who live in the USA.",
        "correctness": 1,
        "gold_parse": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
        "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
        "correctness": 1,
        "gold_parse": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "question": "List all the pairs of buyer first names and product names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(*) FROM Shipment_Items",
        "question": "How many items are shipped?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Shipment_Items"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(*) FROM Shipment_Items",
        "question": "How many products have been shipped?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Shipment_Items"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT avg(product_price) FROM Products",
        "question": "What is the product average price?",
        "correctness": 1,
        "gold_parse": "SELECT avg(product_price) FROM Products"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT avg(product_price) FROM Products",
        "question": "How much do the products cost on average?",
        "correctness": 1,
        "gold_parse": "SELECT avg(product_price) FROM Products"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "What is the average price of the products being ordered?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "What is the price of all products being ordered on average?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "What are the email address, town and county of the customers who are of the least common gender?",
        "correctness": 1,
        "gold_parse": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
        "correctness": 1,
        "gold_parse": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
        "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
        "correctness": 1,
        "gold_parse": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
        "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
        "correctness": 1,
        "gold_parse": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "question": "What is the most uncommon order status?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "question": "What is the least common order status?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
        "question": "For all the products sold for more than 3 times, list their id and description.",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
        "question": "For all products sold more than 3 times, what are their ids and descriptions?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
        "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
        "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
        "question": "what are all shipment tracking numbers and shipment dates?",
        "correctness": 1,
        "gold_parse": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
        "question": "What are the tracking numbers and dates for all shipments listed?",
        "correctness": 1,
        "gold_parse": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )",
        "question": "What are the color, description and size of the products priced below the maximum price.",
        "correctness": 1,
        "gold_parse": "SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )"
    },
    {
        "db_id": "e_commerce",
        "query": "select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )",
        "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
        "correctness": 1,
        "gold_parse": "select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)",
        "question": "Return the names of directors who are older than the average age.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT name FROM director ORDER BY age DESC LIMIT 1",
        "question": "Find the the name of the oldest director.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM director ORDER BY age DESC LIMIT 1"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT count(*) FROM channel WHERE internet LIKE \"%bbc%\"",
        "question": "How many channels have the word 'bbc' in their internet link?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM channel WHERE internet LIKE \"%bbc%\""
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel",
        "question": "How many different digital terrestrial channels are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT title FROM program ORDER BY start_year DESC",
        "question": "List all program titles in the order of starting year. List the most recent one first.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM program ORDER BY start_year DESC"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which director is in charge of the most programs?",
        "correctness": 1,
        "gold_parse": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and age of the director who is in charge of the most programs?",
        "correctness": 1,
        "gold_parse": "SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1",
        "question": "Return the title of the program that began most recently.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1",
        "question": "Find the name and website link of the channels that have more than one program.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id",
        "question": "Find the number of programs for each channel. Return the name of each channel as well.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)",
        "question": "Find the number of channels that do not run any program.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
        "question": "What is the name of the director who is in the \"Dracula\" program?",
        "correctness": 1,
        "gold_parse": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and internet web of the channel that is directed by the most directors.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT name FROM director WHERE age BETWEEN 30 AND 60",
        "question": "Find the name of the directors whose age is between 30 and 60.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM director WHERE age BETWEEN 30 AND 60"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60",
        "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60"
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != \"Hank Baskett\"",
        "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != \"Hank Baskett\""
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT count(*) FROM radio",
        "question": "How many radios are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM radio"
    },
    {
        "db_id": "tv_shows",
        "query": "select transmitter from radio order by erp_kw asc",
        "question": "List the transmitters of radios in ascending order of erp kw .",
        "correctness": 1,
        "gold_parse": "select transmitter from radio order by erp_kw asc"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT tv_show_name ,  Original_Airdate FROM tv_show",
        "question": "What are the names and original air dates of tv shows?",
        "correctness": 1,
        "gold_parse": "SELECT tv_show_name ,  Original_Airdate FROM tv_show"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\"",
        "question": "List the station names of city channels whose affiliation is not \"ABC\".",
        "correctness": 1,
        "gold_parse": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\""
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30",
        "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
        "correctness": 1,
        "gold_parse": "SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1",
        "question": "What is the transmitter of the radio with the largest ERP_kW?",
        "correctness": 1,
        "gold_parse": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT avg(ERP_kW) FROM radio",
        "question": "What is the average ERP across all radios?",
        "correctness": 1,
        "gold_parse": "SELECT avg(ERP_kW) FROM radio"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation",
        "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common affiliation for city channels.",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3",
        "question": "List the affiliations shared by more than three city channels.",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC",
        "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
        "correctness": 1,
        "gold_parse": "SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID",
        "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC",
        "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter",
        "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
        "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
        "correctness": 1,
        "gold_parse": "SELECT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
        "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
        "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "question": "What are the names of the drivers who are citizens of the 'United States'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM driver WHERE citizenship  =  'United States'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "question": "Return the names of drivers with citizenship from the United States.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM driver WHERE citizenship  =  'United States'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
        "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
        "correctness": 1,
        "gold_parse": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
        "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
        "correctness": 1,
        "gold_parse": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
        "correctness": 1,
        "gold_parse": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the vehicle that has been driven the fewest times.",
        "correctness": 1,
        "gold_parse": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
        "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
        "correctness": 1,
        "gold_parse": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
        "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
        "correctness": 1,
        "gold_parse": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT build_year ,  model ,  builder FROM vehicle",
        "question": "What are the build year, model name and builder of the vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT build_year ,  model ,  builder FROM vehicle"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT build_year ,  model ,  builder FROM vehicle",
        "question": "Give the build year, model, and builder of each vehicle.",
        "correctness": 1,
        "gold_parse": "SELECT build_year ,  model ,  builder FROM vehicle"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
        "question": "How many drivers have driven vehicles built in 2012?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
        "question": "Count the number of different drivers who have driven vehicles built in 2012.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
        "question": "How many drivers have raced in 'NASCAR'?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
        "question": "Count the number of drivers who have raced in NASCAR.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT avg(top_speed) FROM vehicle",
        "question": "What is the average top speed of vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(top_speed) FROM vehicle"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT avg(top_speed) FROM vehicle",
        "question": "Return the average top speed across all vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT avg(top_speed) FROM vehicle"
    },
    {
        "db_id": "vehicle_driver",
        "query": "select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000",
        "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
        "correctness": 1,
        "gold_parse": "select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000",
        "question": "Return the names of drivers who have driven vehicles with power over 5000.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
        "question": "Which car models have total production larger than 100 or top speed higher than 150?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
        "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
        "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
        "correctness": 1,
        "gold_parse": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
        "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
        "correctness": 1,
        "gold_parse": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
        "question": "What are the models which have not been driven by any drivers?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
        "question": "Return the models of vehicles that have never been driven.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
        "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
        "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
        "question": "How many vehicles have maximum top speed?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
        "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT name FROM driver ORDER BY name",
        "question": "Show all driver names in the alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM driver ORDER BY name"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT name FROM driver ORDER BY name",
        "question": "What are the names of drivers, returned in alphbetical order?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM driver ORDER BY name"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
        "question": "How many drivers have been racing in each racing series?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
        "question": "Count the number of drivers that have raced in each series.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
        "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
        "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
        "question": "How many drivers have not driven any cars?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
        "question": "Count the number of drivers who have not driven any vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT count(*) FROM Exams",
        "question": "How many exams are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Exams"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT count(*) FROM Exams",
        "question": "Count the number of exams.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Exams"
    },
    {
        "db_id": "online_exams",
        "query": "select distinct subject_code from exams order by subject_code asc",
        "question": "List the distinct subject code of exams in ascending alphabetical order .",
        "correctness": 1,
        "gold_parse": "select distinct subject_code from exams order by subject_code asc"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
        "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
        "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
        "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
        "question": "What are the type of questions and their counts?",
        "correctness": 1,
        "gold_parse": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
        "question": "For each question type, return its type code and its count of occurrence.",
        "correctness": 1,
        "gold_parse": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
        "question": "What are the distinct student answer texts that received comments \"Normal\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\""
    },
    {
        "db_id": "online_exams",
        "query": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
        "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\""
    },
    {
        "db_id": "online_exams",
        "query": "SELECT count(DISTINCT Comments) FROM Student_Answers",
        "question": "How many different comments are there for student answers?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Comments) FROM Student_Answers"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT count(DISTINCT Comments) FROM Student_Answers",
        "question": "Count the number of different comments for student answers.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Comments) FROM Student_Answers"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
        "question": "List all the student answer texts in descending order of count.",
        "correctness": 1,
        "gold_parse": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
        "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
        "correctness": 1,
        "gold_parse": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
        "question": "Please show the first names of students and the dates of their answers.",
        "correctness": 1,
        "gold_parse": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
        "question": "For each student answer, find the first name of the student and the date of the answer.",
        "correctness": 1,
        "gold_parse": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
        "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
        "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "Please show the least common assessment for students.",
        "correctness": 1,
        "gold_parse": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "Which assessment has the smallest frequency count?",
        "correctness": 1,
        "gold_parse": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
        "question": "Please show the first names of the students that have at least two answer records.",
        "correctness": 1,
        "gold_parse": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
        "question": "Which students have 2 or more answer records? Give me their first names.",
        "correctness": 1,
        "gold_parse": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common valid answer text?",
        "correctness": 1,
        "gold_parse": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Find the valid answer text that appeared most frequently.",
        "correctness": 1,
        "gold_parse": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
        "question": "List the last names of the students whose gender is not \"M\".",
        "correctness": 1,
        "gold_parse": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\""
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
        "question": "What are the last names of the students with gender other than \"M\"?",
        "correctness": 1,
        "gold_parse": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\""
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
        "question": "List each gender and the corresponding number of students.",
        "correctness": 1,
        "gold_parse": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
        "question": "For each gender, return the gender code and the number of students who identify as that gender.",
        "correctness": 1,
        "gold_parse": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
        "question": "List the last names of the students whose gender is \"F\" or \"M\".",
        "correctness": 1,
        "gold_parse": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\""
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
        "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
        "correctness": 1,
        "gold_parse": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\""
    },
    {
        "db_id": "online_exams",
        "query": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
        "question": "List the first names of the students who do not have any answers.",
        "correctness": 1,
        "gold_parse": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
        "question": "Which students do not have any answers? Find their first names.",
        "correctness": 1,
        "gold_parse": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
        "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
        "correctness": 1,
        "gold_parse": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\""
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
        "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
        "correctness": 1,
        "gold_parse": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\""
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
        "question": "Show the types of questions that have at least three questions.",
        "correctness": 1,
        "gold_parse": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
        "question": "Which types of questions have 3 or more questions? Return the questions type code.",
        "correctness": 1,
        "gold_parse": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT * FROM Students",
        "question": "Show all information on students.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM Students"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT * FROM Students",
        "question": "What is al the available information of each student?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM Students"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Addresses",
        "question": "How many addresses do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Addresses"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Addresses",
        "question": "Count the number of addresses.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Addresses"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT address_id ,  address_details FROM Addresses",
        "question": "List all address ids and address details.",
        "correctness": 1,
        "gold_parse": "SELECT address_id ,  address_details FROM Addresses"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT address_id ,  address_details FROM Addresses",
        "question": "What are all the address ids and address details?",
        "correctness": 1,
        "gold_parse": "SELECT address_id ,  address_details FROM Addresses"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Products",
        "question": "How many products do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Products",
        "question": "Count the number of products.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
        "question": "Show all product ids, product type codes, and product name.",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_type_code ,  product_name FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
        "question": "What are the ids, type codes, and names for all products?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_type_code ,  product_name FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
        "question": "What is the price for the product with name Monitor?",
        "correctness": 1,
        "gold_parse": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
        "question": "Give the price of the Monitor product.",
        "correctness": 1,
        "gold_parse": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "question": "Show the minimum, average, maximum price for all products.",
        "correctness": 1,
        "gold_parse": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "question": "What are the minimum, average, and maximum prices across all products?",
        "correctness": 1,
        "gold_parse": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
        "question": "What is the average price for products with type Clothes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
        "question": "Return the average price of Clothes.",
        "correctness": 1,
        "gold_parse": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
        "question": "How many hardware type products do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
        "question": "Count the number of products of the type Hardware.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
        "question": "Show all product names with price higher than the average.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
        "question": "What are the names of products that have a price above the average for all products.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
        "question": "Show all hardware product names with price higher than the average price of hardware type products.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
        "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
        "question": "What is the name of the most expensive product with type Clothes?",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
        "question": "Give the name of the most expensive Clothes product.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "What is the product id and product name for the cheapest Hardware type product?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "Give the id and name of the cheapest Hardware product.",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products ORDER BY product_price DESC",
        "question": "List all product names in descending order of price.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products ORDER BY product_price DESC"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products ORDER BY product_price DESC",
        "question": "What are the names of the products, sorted by descending price?",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products ORDER BY product_price DESC"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
        "question": "Show all hardware type products in ascending order of price.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
        "question": "What are the names of all Hardware products, sorted by price ascending?",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
        "question": "List all product type codes and the number of products in each type.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
        "question": "How many products are there for each product type?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
        "question": "Show all product type codes and the average price for each type.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
        "question": "What is the average price of products for each product type?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
        "question": "What are the product type code with at least two products?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
        "question": "Give the product type codes of product types that have two or more products.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the product type code with most number of products?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most frequent product type code?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Customers",
        "question": "How many customers do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Customers",
        "question": "Count the number of customers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT customer_id ,  customer_name FROM Customers",
        "question": "Show all customer ids and customer names.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  customer_name FROM Customers"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT customer_id ,  customer_name FROM Customers",
        "question": "What are the ids and names of all customers?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  customer_name FROM Customers"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
        "question": "What is the customer address, customer phone, and customer email for Jeromy?",
        "correctness": 1,
        "gold_parse": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
        "question": "Give the address, phone, and email for customers with the name Jeromy.",
        "correctness": 1,
        "gold_parse": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
        "question": "Show all payment method codes and the number of customers in each code.",
        "correctness": 1,
        "gold_parse": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
        "question": "How many customers use each payment method?",
        "correctness": 1,
        "gold_parse": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the payment method code used by most number of customers?",
        "correctness": 1,
        "gold_parse": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the code of the payment method that is most commonly used.",
        "correctness": 1,
        "gold_parse": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
        "question": "Show all customer names with the  payment method code used by least number of customers.",
        "correctness": 1,
        "gold_parse": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
        "question": "What are the names of customers who use the least common payment method?",
        "correctness": 1,
        "gold_parse": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
        "question": "What is the payment method and customer number for customer named Jeromy?",
        "correctness": 1,
        "gold_parse": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
        "question": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
        "correctness": 1,
        "gold_parse": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT DISTINCT payment_method_code FROM Customers",
        "question": "What are the distinct payment methods used by customers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT payment_method_code FROM Customers"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT DISTINCT payment_method_code FROM Customers",
        "question": "Give the different payment method codes that customers use.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT payment_method_code FROM Customers"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
        "question": "Show the id and the product type for all products, order by product name.",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
        "question": "What are the ids and product types for all products, sorted alphabetically by product name?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the product type with least number of products?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the code of the product type that is least common?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Customer_orders",
        "question": "How many customer orders do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Customer_orders",
        "question": "Count the number of customer orders.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
        "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
        "question": "What were the ids, dates, and status codes for orders made by Jeromy?",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "question": "Show all customer names, ids and the number of orders by each customer.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "question": "What are the names, ids, and number of orders made for each customer?",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the customer id, name, phone, and email for the customer with most orders?",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
        "question": "Show all order status and the number of orders in each status.",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
        "question": "How many orders have each order status code?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the order status code that is most common?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the order status code that is most frequent across customer orders.",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
        "question": "How many customers do not have an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
        "question": "Count the number of customers who have not made an order.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "Show all product names without an order.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "What are the names of products that have not been ordered?",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "How many products named Monitor have been ordered?",
        "correctness": 1,
        "gold_parse": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "What is the total number of Monitor products that have been ordered?",
        "correctness": 1,
        "gold_parse": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "How many customers have ordered the product named Monitor?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "Count the number of different customers who have bought a Monitor Product.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "question": "How many customers have an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "question": "Count the number of differnt customers who have made an order.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
        "question": "Show all customer ids without an order.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
        "question": "What are the ids of customers who have not made an order?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
        "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
        "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;"
    },
    {
        "db_id": "region_building",
        "query": "SELECT count(*) FROM building",
        "question": "How many buildings are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM building"
    },
    {
        "db_id": "region_building",
        "query": "SELECT count(*) FROM building",
        "question": "Count the number of buildings.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM building"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
        "question": "List the names of buildings in ascending order of number of stories.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM building ORDER BY Number_of_Stories ASC"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
        "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM building ORDER BY Number_of_Stories ASC"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Address FROM building ORDER BY Completed_Year DESC",
        "question": "List the addresses of buildings in descending order of building completion year.",
        "correctness": 1,
        "gold_parse": "SELECT Address FROM building ORDER BY Completed_Year DESC"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Address FROM building ORDER BY Completed_Year DESC",
        "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
        "correctness": 1,
        "gold_parse": "SELECT Address FROM building ORDER BY Completed_Year DESC"
    },
    {
        "db_id": "region_building",
        "query": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
        "question": "What is the maximum number of stories of buildings not completed in 1980?",
        "correctness": 1,
        "gold_parse": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
        "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
        "correctness": 1,
        "gold_parse": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT avg(Population) FROM region",
        "question": "What is the average population for all regions?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Population) FROM region"
    },
    {
        "db_id": "region_building",
        "query": "SELECT avg(Population) FROM region",
        "question": "Compute the average population of a region.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Population) FROM region"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM region ORDER BY Name ASC",
        "question": "What are the names of regions in ascending alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM region ORDER BY Name ASC"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM region ORDER BY Name ASC",
        "question": "List the names of regions in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM region ORDER BY Name ASC"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Capital FROM region WHERE Area  >  10000",
        "question": "What are the capitals of the regions with area bigger than 10000?",
        "correctness": 1,
        "gold_parse": "SELECT Capital FROM region WHERE Area  >  10000"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Capital FROM region WHERE Area  >  10000",
        "question": "Give me the capitals of the regions whose area is larger than 10000.",
        "correctness": 1,
        "gold_parse": "SELECT Capital FROM region WHERE Area  >  10000"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
        "question": "List the capital of the region with the largest population.",
        "correctness": 1,
        "gold_parse": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
        "question": "Which region has the largest population? Give me the capital of the region.",
        "correctness": 1,
        "gold_parse": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
        "question": "List the names of the regions with the top 5 largest areas.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
        "question": "What are the names of the 5 largest regions in terms of area?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "question": "Show the names of buildings and the names of regions they are in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "question": "For each building, return the name of the building and the name of the region it belongs to.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of regions that have more than one building.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
        "question": "Which regions have more than one building? Give me the names of the regions.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the capital of the region that has the most buildings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which region has the largest number of buildings? Show me the capital of the region.",
        "correctness": 1,
        "gold_parse": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "question": "Show addresses of buildings and the capitals of regions they are in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "question": "For each building, return the address of the building and the name of the region it belongs to.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
        "question": "Please show each completion year and the number of buildings completed in that year.",
        "correctness": 1,
        "gold_parse": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
        "question": "For completion year, return the year and the number of buildings completed.",
        "correctness": 1,
        "gold_parse": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the year in which the most buildings are completed.",
        "correctness": 1,
        "gold_parse": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "In which year did the most building constructions complete?",
        "correctness": 1,
        "gold_parse": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
        "question": "List the names of regions that do not have any buildings.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
        "question": "What are the names of regions in which there are no buildings?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
        "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
        "correctness": 1,
        "gold_parse": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
        "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
        "correctness": 1,
        "gold_parse": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15"
    },
    {
        "db_id": "region_building",
        "query": "SELECT DISTINCT Address FROM building",
        "question": "Show the distinct addresses of buildings.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Address FROM building"
    },
    {
        "db_id": "region_building",
        "query": "SELECT DISTINCT Address FROM building",
        "question": "Give me a list of distinct building addresses.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Address FROM building"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
        "question": "Show the completed years of buildings in descending order of the number of stories.",
        "correctness": 1,
        "gold_parse": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
        "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
        "correctness": 1,
        "gold_parse": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC"
    },
    {
        "db_id": "government_shift",
        "query": "select channel_details from channels order by channel_details",
        "question": "List details of all the channel in alphabetical order .",
        "correctness": 1,
        "gold_parse": "select channel_details from channels order by channel_details"
    },
    {
        "db_id": "government_shift",
        "query": "select channel_details from channels order by channel_details",
        "question": "What is the list of channel details ordered alphabetically ?",
        "correctness": 1,
        "gold_parse": "select channel_details from channels order by channel_details"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT count(*) FROM services",
        "question": "How many services are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM services"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT count(*) FROM services",
        "question": "Count the number of services.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM services"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common analytical layer type code?",
        "correctness": 1,
        "gold_parse": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the analytical layer type code that appears most often.",
        "correctness": 1,
        "gold_parse": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
        "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
        "correctness": 1,
        "gold_parse": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
        "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
        "correctness": 1,
        "gold_parse": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\""
    },
    {
        "db_id": "government_shift",
        "query": "select t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id group by t1.service_details having count(*)  >  3",
        "question": "Find the details of the services that have been used by more than 3 times .",
        "correctness": 1,
        "gold_parse": "select t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id group by t1.service_details having count(*)  >  3"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3",
        "question": "Which services were used by customers by more than 3 times? Give me the service details.",
        "correctness": 1,
        "gold_parse": "SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the details of the customer who has used services the most times.",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "government_shift",
        "query": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
        "question": "return the details of the customer with largest count of used services.",
        "correctness": 1,
        "gold_parse": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1"
    },
    {
        "db_id": "government_shift",
        "query": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
        "question": "Find the name of the customer who has used the most types of services .",
        "correctness": 1,
        "gold_parse": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1"
    },
    {
        "db_id": "government_shift",
        "query": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
        "question": "Which customer has used the most types of services ? Give me the customer details .",
        "correctness": 1,
        "gold_parse": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1"
    },
    {
        "db_id": "government_shift",
        "query": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
        "question": "Find the details of the customer who has never used any services .",
        "correctness": 1,
        "gold_parse": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)"
    },
    {
        "db_id": "government_shift",
        "query": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
        "question": "Which customers never used any services ? Give me the customer details .",
        "correctness": 1,
        "gold_parse": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)"
    },
    {
        "db_id": "government_shift",
        "query": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
        "question": "Find the details of the customers who have used the least-used service .",
        "correctness": 1,
        "gold_parse": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)"
    },
    {
        "db_id": "government_shift",
        "query": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
        "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
        "correctness": 1,
        "gold_parse": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
        "question": "How many distinct customer and services details are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
        "question": "Count the total number of available customers and services details.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
        "question": "Find all the customers whose name contains \"Kutch\".",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
        "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
        "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
        "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
        "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
        "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\""
    },
    {
        "db_id": "government_shift",
        "query": "select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  \"15 ij\"",
        "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
        "correctness": 1,
        "gold_parse": "select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  \"15 ij\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\"",
        "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\""
    },
    {
        "db_id": "government_shift",
        "query": "select t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id where t2.status_code  =  \"stuck\" and services_and_channels_details  =  \"bad\"",
        "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
        "correctness": 1,
        "gold_parse": "select t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id where t2.status_code  =  \"stuck\" and services_and_channels_details  =  \"bad\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  \"Stuck\" AND services_and_channels_details  =  \"bad\"",
        "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  \"Stuck\" AND services_and_channels_details  =  \"bad\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
        "question": "How many integration platforms are successful?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
        "question": "Count the number of integration platforms that have \"Success\" in the details.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\""
    },
    {
        "db_id": "government_shift",
        "query": "select distinct t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id join integration_platform as t3 where t3.integration_platform_details  =  \"fail\"",
        "question": "List the details of all the customers who are associated with a failed integration platform .",
        "correctness": 1,
        "gold_parse": "select distinct t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id join integration_platform as t3 where t3.integration_platform_details  =  \"fail\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  \"Fail\"",
        "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  \"Fail\""
    },
    {
        "db_id": "government_shift",
        "query": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
        "question": "Which service ( s ) has never been used by any customer ? List their details .",
        "correctness": 1,
        "gold_parse": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id"
    },
    {
        "db_id": "government_shift",
        "query": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
        "question": "Find details of the services that no customer has ever used . Return the service details .",
        "correctness": 1,
        "gold_parse": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
        "question": "Find all the layer type codes with their corresponding usage count.",
        "correctness": 1,
        "gold_parse": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
        "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
        "correctness": 1,
        "gold_parse": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code"
    },
    {
        "db_id": "government_shift",
        "query": "select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  \"unsatisfied\"",
        "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
        "correctness": 1,
        "gold_parse": "select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  \"unsatisfied\""
    },
    {
        "db_id": "government_shift",
        "query": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  \"Unsatisfied\"",
        "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  \"Unsatisfied\""
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT count(*) FROM vehicles",
        "question": "How many vehicles do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM vehicles"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT count(*) FROM vehicles",
        "question": "Count the number of vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM vehicles"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles ORDER BY model_year DESC",
        "question": "Show names for all vehicles in descending order of model year.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles ORDER BY model_year DESC"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles ORDER BY model_year DESC",
        "question": "What are the names of all vehicles, ordered by model year descending?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles ORDER BY model_year DESC"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT DISTINCT type_of_powertrain FROM vehicles",
        "question": "List all distinct types of powertrain of vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT type_of_powertrain FROM vehicles"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT DISTINCT type_of_powertrain FROM vehicles",
        "question": "What are the different types of powertrains?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT type_of_powertrain FROM vehicles"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
        "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
        "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
        "question": "Show types of powertrain with vehicles both from 2014 and 2013.",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
        "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
        "question": "Show all types of powertrain and the number of vehicles in each type.",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
        "question": "How many vehicles have each type of powertrain?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the type of powertrain with most number of vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
        "question": "Which type of powertrain is most common?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
        "question": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
        "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
        "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
        "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age ,  membership_credit FROM customers",
        "question": "Show the name, age, membership credit for all customers?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  membership_credit FROM customers"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age ,  membership_credit FROM customers",
        "question": "What are the names, ages, and membership credits for all customers?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  membership_credit FROM customers"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
        "question": "Show the name and age of the customer with maximum membership credit.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
        "question": "What is the name and age of the customer with the most membership credit?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
        "question": "What is the average age for customers with a membership credit above the average?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
        "question": "Return the average age for customers who have membership above the average across all customers.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT * FROM discount",
        "question": "Show all information for all discounts.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM discount"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT * FROM discount",
        "question": "Return all information about discounts.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM discount"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
        "question": "Show the name and total hours of renting for each vehicle.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
        "question": "What are the names and total rental hours for each vehicle?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
        "question": "Show the name of vehicles with no renting history.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
        "question": "What are the names of vehicles that have never been rented?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
        "question": "Show the name of customer with at least two renting history records.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
        "question": "What are the names of customers who have two or more records of rental history?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the name and model year of the vehicle with most number of renting history records.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name and model year of the vehicle which has been rented the most times?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
        "question": "Show the vehicle name with a descending order of total hours of renting.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
        "question": "What are the names of vehicles, sorted descending by total hours of renting?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the discount name with most number of renting history records?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the discount that corresponds to the most rental history records.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
        "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
        "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
        "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
        "correctness": 1,
        "gold_parse": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
        "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
        "correctness": 1,
        "gold_parse": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT avg(amount_of_loan) FROM Student_Loans",
        "question": "What is the average amount of a student loan?",
        "correctness": 1,
        "gold_parse": "SELECT avg(amount_of_loan) FROM Student_Loans"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT avg(amount_of_loan) FROM Student_Loans",
        "question": "Compute the average amount of student loans.",
        "correctness": 1,
        "gold_parse": "SELECT avg(amount_of_loan) FROM Student_Loans"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
        "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
        "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
        "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
        "correctness": 1,
        "gold_parse": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
        "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
        "correctness": 1,
        "gold_parse": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
        "question": "List the biographical data of the students who never had a detention or student loan .",
        "correctness": 1,
        "gold_parse": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
        "question": "Which students never had a detention or student loan ? Find their biographical data .",
        "correctness": 1,
        "gold_parse": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
        "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
        "correctness": 1,
        "gold_parse": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
        "question": "List the amount and date of loan for the students who have two or more achievements.",
        "correctness": 1,
        "gold_parse": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
        "question": "List the detail and id of the teacher who teaches the most courses.",
        "correctness": 1,
        "gold_parse": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "question": "What are the distinct descriptions of all the detentions which have ever happened?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "question": "Return the distinct descriptions of all the detentions that have happened.",
        "correctness": 1,
        "gold_parse": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
        "question": "List the personal details and the address type descriptions of all the students.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
        "question": "What are the personal details and the address type descriptions of each student?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
        "question": "List the the address details and the biographical information of the students.",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
        "question": "What are the address details and biographical information of each student?",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
        "question": "List the biographical data and the date of the transcript of all the students.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
        "question": "What are the biographical data and the date of transcript issuance of each student?",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
        "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
        "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
        "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )",
        "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 ) except select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details not in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 )",
        "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
        "correctness": 1,
        "gold_parse": "select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 ) except select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details not in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
        "question": "Which students have gone through any event? List the students' biographical data and event date.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
        "question": "Find the biographical data and event date for students who participated in any events.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
        "question": "How are all the achievements described? List the achievement detail and the type description.",
        "correctness": 1,
        "gold_parse": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
        "question": "What are the achievement detail and the type description of each achievements?",
        "correctness": 1,
        "gold_parse": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
        "question": "How many teachers have taught a student who has not won any achievements?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
        "question": "Count the number of teachers who have taught students who have never won an achievement.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
        "question": "List the date of the transcripts and the transcript details.",
        "correctness": 1,
        "gold_parse": "SELECT date_of_transcript ,  transcript_details FROM Transcripts"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
        "question": "What are the date and detail of each transcript?",
        "correctness": 1,
        "gold_parse": "SELECT date_of_transcript ,  transcript_details FROM Transcripts"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "question": "List the achievement type code, achievement details and the date of the achievements.",
        "correctness": 1,
        "gold_parse": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "question": "What are the type code, details, and date of each achievement?",
        "correctness": 1,
        "gold_parse": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
        "question": "Show the detention start time and end time of the detentions.",
        "correctness": 1,
        "gold_parse": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
        "question": "What are the starting time and ending time of each detention record?",
        "correctness": 1,
        "gold_parse": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
        "question": "Show the biographical information of the students whose details include the substring 'Suite'.",
        "correctness": 1,
        "gold_parse": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
        "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
        "correctness": 1,
        "gold_parse": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
        "question": "List the details for all the pairs of teachers and students who are in the same class.",
        "correctness": 1,
        "gold_parse": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
        "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
        "correctness": 1,
        "gold_parse": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "Which students take 2 courses? List student id and details.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "What are the ids and details of the students who take 2 courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the least common detention type? Show the type code and the description.",
        "correctness": 1,
        "gold_parse": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "Give me the type code and description of the least common detention type.",
        "correctness": 1,
        "gold_parse": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
        "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
        "question": "Find the biographical data and details for students whose student loan is above the average amount.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
        "question": "When was the earliest date of loan?",
        "correctness": 1,
        "gold_parse": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
        "question": "Return the earliest date of loan in the record.",
        "correctness": 1,
        "gold_parse": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
        "question": "Which student has the loan with the minimum value? List the student's biographical information.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
        "question": "Find the biographical information of the student with the smallest student loan.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
        "question": "When was the transcript issued for the student with loan of maximum value?",
        "correctness": 1,
        "gold_parse": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
        "question": "What is the transcript issuance date for the student with the largest amount of loan?",
        "correctness": 1,
        "gold_parse": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
        "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
        "correctness": 1,
        "gold_parse": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
        "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
        "correctness": 1,
        "gold_parse": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "select student_id ,  sum(amount_of_loan) from student_loans group by student_id",
        "question": "How much total loan does each student have ? List the student ids and the amounts .",
        "correctness": 1,
        "gold_parse": "select student_id ,  sum(amount_of_loan) from student_loans group by student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id",
        "question": "For each student, find the student id and the total amount of loan he or she has.",
        "correctness": 1,
        "gold_parse": "SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "How many courses does each student take? List the student id, the student biographical data and the course count.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "question": "How many students have gone through a detention?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Detention"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "question": "Count the number of students who have a detention record.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Detention"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code and description of the most common student address type?",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common student address type? Give me the code and description of the address type.",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
        "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
        "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
        "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
        "correctness": 1,
        "gold_parse": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
        "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
        "correctness": 1,
        "gold_parse": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT datetime_detention_start FROM Detention",
        "question": "When did all the detentions start?",
        "correctness": 1,
        "gold_parse": "SELECT datetime_detention_start FROM Detention"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT datetime_detention_start FROM Detention",
        "question": "Give me the detention start date for all the detention records.",
        "correctness": 1,
        "gold_parse": "SELECT datetime_detention_start FROM Detention"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name FROM Author",
        "question": "List all the author names.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Author"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name FROM Author",
        "question": "What are the names of all the authors?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Author"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client",
        "question": "Show all Client names and their addresses.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client",
        "question": "What are the names and addressed of all clients?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title ,  isbn ,  SalePrice FROM Book",
        "question": "List all Book titles, ISBNs, and sale prices.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  isbn ,  SalePrice FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title ,  isbn ,  SalePrice FROM Book",
        "question": "What are the titles, ISBNs, and sale prices for all books?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  isbn ,  SalePrice FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT count(*) FROM Book",
        "question": "How many books do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT count(*) FROM Book",
        "question": "Count the number of books.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT count(*) FROM Author",
        "question": "How many authors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Author"
    },
    {
        "db_id": "book_1",
        "query": "SELECT count(*) FROM Author",
        "question": "Count the number of authors.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Author"
    },
    {
        "db_id": "book_1",
        "query": "SELECT count(*) FROM Client",
        "question": "How many clients are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Client"
    },
    {
        "db_id": "book_1",
        "query": "SELECT count(*) FROM Client",
        "question": "Return the number of clients.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Client"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client ORDER BY name",
        "question": "List names and addresses of all clients in alphabetical order by their names.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client ORDER BY name"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client ORDER BY name",
        "question": "What are the names and addressed of all clients, ordered alphabetically by name?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client ORDER BY name"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
        "question": "Show all book titles and corresponding author names.",
        "correctness": 1,
        "gold_parse": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
        "question": "What are the names of all books and their corresponding authors?",
        "correctness": 1,
        "gold_parse": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
        "question": "Show all order ids and their client names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
        "question": "What are the ids of all orders and the corresponding client names?",
        "correctness": 1,
        "gold_parse": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
        "question": "Show all author names and the numbers of books each has written.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
        "question": "What are the names of all the authors, and how many books has each written?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor"
    },
    {
        "db_id": "book_1",
        "query": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
        "question": "Show all book isbns and the numbers of orders for each.",
        "correctness": 1,
        "gold_parse": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn"
    },
    {
        "db_id": "book_1",
        "query": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
        "question": "What are all isbns for each book, and how many times has each been ordered?",
        "correctness": 1,
        "gold_parse": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn"
    },
    {
        "db_id": "book_1",
        "query": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
        "question": "Show all book isbns and the total amount ordered for each.",
        "correctness": 1,
        "gold_parse": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn"
    },
    {
        "db_id": "book_1",
        "query": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
        "question": "What are the isbns for all books, and what is the total amount ordered for each?",
        "correctness": 1,
        "gold_parse": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the book title corresponding to the book with the most number of orders.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the title of the book that has been ordered the greatest number of times?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
        "question": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
        "question": "What is the title and purchase price of the book that has the highest total order amount?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
        "question": "Show the titles of books that have been ordered.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn"
    },
    {
        "db_id": "book_1",
        "query": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
        "question": "What are the different titles of books that have been ordered in the past?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn"
    },
    {
        "db_id": "book_1",
        "query": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
        "question": "Show the names of clients who have ordered at least once.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "book_1",
        "query": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
        "question": "What are the names of the different clients who have made an order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
        "question": "Show all client names and the number of orders each has made.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
        "question": "What are the names of all the clients, and how many times has each of them ordered?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the client with the most number of orders?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the client who has made the most orders.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
        "question": "Show the client names and their total amounts of books ordered.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
        "question": "What are the names of all the clients, and the total amount of books ordered by each?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
        "question": "Show the client name who has the most total amount of books ordered.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
        "question": "What is the name of the client who has ordered the greatest total amount of books?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
        "question": "Show all book titles for books that have no orders.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
        "question": "What are the titles of books that have never been ordered?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
        "question": "Show all client names for clients who have not made orders.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
        "question": "What are the names of clients who have never made an order?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "book_1",
        "query": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
        "question": "What is the maximum and the minimum sale price?",
        "correctness": 1,
        "gold_parse": "SELECT max(saleprice) ,  min(saleprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
        "question": "Give the maximum and minimum sale price of books.",
        "correctness": 1,
        "gold_parse": "SELECT max(saleprice) ,  min(saleprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "question": "What is the average purchase price and the average sale price?",
        "correctness": 1,
        "gold_parse": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "question": "Give the average purchase price and average sale price for books.",
        "correctness": 1,
        "gold_parse": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT max(saleprice - purchaseprice) FROM Book",
        "question": "What is the maximum difference between the sale price and purchase price?",
        "correctness": 1,
        "gold_parse": "SELECT max(saleprice - purchaseprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT max(saleprice - purchaseprice) FROM Book",
        "question": "Return the largest difference in sale price and purchase price.",
        "correctness": 1,
        "gold_parse": "SELECT max(saleprice - purchaseprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
        "question": "List all book titles which have sale prices higher than the average.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
        "question": "What are the titles of books with sale prices above the average sale price across all books?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)"
    },
    {
        "db_id": "book_1",
        "query": "select title from book order by saleprice asc limit 1",
        "question": "List all book titles which have the lowest sale price .",
        "correctness": 1,
        "gold_parse": "select title from book order by saleprice asc limit 1"
    },
    {
        "db_id": "book_1",
        "query": "select title from book order by saleprice asc limit 1",
        "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
        "correctness": 1,
        "gold_parse": "select title from book order by saleprice asc limit 1"
    },
    {
        "db_id": "book_1",
        "query": "select title from book order by purchaseprice  desc limit 1",
        "question": "List all book titles which have highest purchase prices .",
        "correctness": 1,
        "gold_parse": "select title from book order by purchaseprice  desc limit 1"
    },
    {
        "db_id": "book_1",
        "query": "select title from book order by purchaseprice  desc limit 1",
        "question": "What are the titles of books with the highest purchase price across all books ?",
        "correctness": 1,
        "gold_parse": "select title from book order by purchaseprice  desc limit 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
        "question": "What is the average sale price of books written by George Orwell?",
        "correctness": 1,
        "gold_parse": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
        "question": "Give the average sale price of books authored by George Orwell.",
        "correctness": 1,
        "gold_parse": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
        "question": "What are sale prices of books written by Plato?",
        "correctness": 1,
        "gold_parse": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
        "question": "Return the sale prices of books authored by Plato.",
        "correctness": 1,
        "gold_parse": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
        "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
        "question": "Give the title of book by George Orwell that has the lowest saleprice.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
        "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
        "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
        "question": "Who is the author of the book \"Pride and Prejudice\"?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
        "question": "Give the name of the author who wrote the book titled Pride and Prejudice.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
        "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
        "question": "What are the titles of all books written by an author with a name that contains Plato?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
        "question": "How many orders do we have for \"Pride and Prejudice\"?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
        "question": "Return the number of orders received for Pride and Prejudice.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
        "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
        "correctness": 1,
        "gold_parse": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
        "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
        "correctness": 1,
        "gold_parse": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
        "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
        "correctness": 1,
        "gold_parse": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
        "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
        "correctness": 1,
        "gold_parse": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
        "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
        "correctness": 1,
        "gold_parse": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
        "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
        "correctness": 1,
        "gold_parse": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
        "question": "Show all client names who have orders for \"Pride and Prejudice\".",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
        "question": "What are the names of clients who have ordered Pride and Prejudice?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT count(*) FROM book",
        "question": "How many books are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM book"
    },
    {
        "db_id": "book_review",
        "query": "SELECT Title FROM book ORDER BY Title ASC",
        "question": "List the titles of books in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM book ORDER BY Title ASC"
    },
    {
        "db_id": "book_review",
        "query": "SELECT Title FROM book ORDER BY Pages DESC",
        "question": "List the titles of books in descending order of pages.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM book ORDER BY Pages DESC"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE ,  Release FROM book",
        "question": "What are the types and release dates of books?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE ,  Release FROM book"
    },
    {
        "db_id": "book_review",
        "query": "SELECT max(Chapters) ,  min(Chapters) FROM book",
        "question": "What are the maximum and minimum number of chapters for each book?",
        "correctness": 1,
        "gold_parse": "SELECT max(Chapters) ,  min(Chapters) FROM book"
    },
    {
        "db_id": "book_review",
        "query": "SELECT Title FROM book WHERE TYPE != \"Poet\"",
        "question": "What are the titles of books that are not \"Poet\"?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM book WHERE TYPE != \"Poet\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(Rating) FROM review",
        "question": "What is the average rating in reviews?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Rating) FROM review"
    },
    {
        "db_id": "book_review",
        "query": "SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID",
        "question": "What are the titles and ratings of books?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID"
    },
    {
        "db_id": "book_review",
        "query": "SELECT T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1",
        "question": "What is the rating of the book with the largest number of chapters?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1"
    },
    {
        "db_id": "book_review",
        "query": "SELECT T2.Rank FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Pages ASC LIMIT 1",
        "question": "What is the rank of the book with the smallest number of pages?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Rank FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Pages ASC LIMIT 1"
    },
    {
        "db_id": "book_review",
        "query": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rank LIMIT 1",
        "question": "What is the title of the book with the highest rank in the review?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rank LIMIT 1"
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "What is the average number of readers for books of type \"Novel\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE",
        "question": "For each book type return the type and the number of books of that type.",
        "correctness": 1,
        "gold_parse": "SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common type of books?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "What are the types of books that have at least three books belonging to?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC",
        "question": "List the titles of books in ascending order of the ratings in review?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC"
    },
    {
        "db_id": "book_review",
        "query": "SELECT T1.Title ,  T1.audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Readers_in_Million DESC",
        "question": "List the title and audio length for all the books in descending order of the number of readers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title ,  T1.audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Readers_in_Million DESC"
    },
    {
        "db_id": "book_review",
        "query": "SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
        "question": "How many books do not have reviews?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50",
        "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50"
    },
    {
        "db_id": "book_review",
        "query": "SELECT count(DISTINCT TYPE) FROM book",
        "question": "How many distinct types of book are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT TYPE) FROM book"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE ,  title FROM book EXCEPT SELECT T1.type ,  T1.title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID;",
        "question": "What are the type and title of the books that are not rated?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE ,  title FROM book EXCEPT SELECT T1.type ,  T1.title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID;"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT count(*) FROM customer",
        "question": "How many customers are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customer"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT count(*) FROM customer",
        "question": "Count the number of customers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customer"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
        "question": "List the names of customers in ascending order of level of membership.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
        "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Nationality ,  Card_Credit FROM customer",
        "question": "What are the nationalities and card credits of customers?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  Card_Credit FROM customer"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Nationality ,  Card_Credit FROM customer",
        "question": "Find the nationality and card credit of each customer.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  Card_Credit FROM customer"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
        "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\""
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
        "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\""
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
        "question": "What is the average card credit of customers with membership level higher than 1?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
        "question": "Find the average card credit customers whose membership level is above 1.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
        "question": "What is the card credit of the customer with the highest membership level?",
        "correctness": 1,
        "gold_parse": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
        "question": "Find the customer with the highest membership level and return his or her card credit.",
        "correctness": 1,
        "gold_parse": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
        "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
        "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common nationality of customers.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which nationality does the most customers have?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
        "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
        "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
        "question": "Show the names of customers and names of dishes they order.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
        "question": "For each order, return the customer name and the dish name.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
        "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
        "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name",
        "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name"
    },
    {
        "db_id": "restaurant_bills",
        "query": "select t1.name ,  sum(t2.quantity) from customer as t1 join customer_order as t2 on t1.customer_id  =  t2.customer_id group by t1.name",
        "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
        "correctness": 1,
        "gold_parse": "select t1.name ,  sum(t2.quantity) from customer as t1 join customer_order as t2 on t1.customer_id  =  t2.customer_id group by t1.name"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
        "question": "Show the customers with total quantity of order bigger than 1.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
        "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT DISTINCT Manager FROM branch",
        "question": "Show distinct managers of branches.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Manager FROM branch"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT DISTINCT Manager FROM branch",
        "question": "Who are the distinct managers of branches?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Manager FROM branch"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
        "question": "List the names of customers that do not have any order.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
        "question": "Which customers do not have any order? Give me the customer names.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT count(*) FROM member",
        "question": "How many members are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM member"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT Name FROM member ORDER BY Age ASC",
        "question": "List the names of members in ascending order of age.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM member ORDER BY Age ASC"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT Name ,  Nationality FROM member",
        "question": "What are the names and nationalities of the members?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Nationality FROM member"
    },
    {
        "db_id": "club_leader",
        "query": "select name from member where nationality != \"england\"",
        "question": "List the names of members whose nationality is not `` England '' .",
        "correctness": 1,
        "gold_parse": "select name from member where nationality != \"england\""
    },
    {
        "db_id": "club_leader",
        "query": "SELECT Name FROM member WHERE Age  =  19 OR Age  =  20",
        "question": "Show the names of members whose age is either 19 or 20.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM member WHERE Age  =  19 OR Age  =  20"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT Name FROM member ORDER BY Age DESC LIMIT 1",
        "question": "What is the name of the oldest member?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM member ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality",
        "question": "Show different nationalities along with the number of members of each nationality.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common nationality of members.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Show the nations that have at least two members.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID",
        "question": "Show the names of club leaders and the names of clubs they joined.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Overall_Ranking  <  100",
        "question": "Show the names of club leaders of clubs with overall ranking higher than 100.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Overall_Ranking  <  100"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T1.Year_Join  <  2018",
        "question": "Show the names of club leaders that joined their club before 2018.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T1.Year_Join  <  2018"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Club_Name  =  \"Houston\"",
        "question": "Show the name of the leader of the club named \"Houston\".",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Club_Name  =  \"Houston\""
    },
    {
        "db_id": "club_leader",
        "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)",
        "question": "List the names of members that are not club leaders.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19",
        "question": "Show the nations that have both members older than 22 and members younger than 19.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT avg(T2.age) FROM club_leader AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id",
        "question": "What is the average age of all the club leaders?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.age) FROM club_leader AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id"
    },
    {
        "db_id": "club_leader",
        "query": "SELECT club_name FROM club WHERE club_name LIKE '%state%'",
        "question": "Which club name contains the string 'state'?",
        "correctness": 1,
        "gold_parse": "SELECT club_name FROM club WHERE club_name LIKE '%state%'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
        "question": "List all collections' subset. List the subsets' names.",
        "correctness": 1,
        "gold_parse": "SELECT Collection_Subset_Name FROM Collection_Subsets;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
        "question": "What are the collection susbset names?",
        "correctness": 1,
        "gold_parse": "SELECT Collection_Subset_Name FROM Collection_Subsets;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
        "question": "What is detail of collection subset with name 'Top collection'?",
        "correctness": 1,
        "gold_parse": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
        "question": "What collection details are there on the subset named 'Top collection'?",
        "correctness": 1,
        "gold_parse": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Subset_Name FROM Document_Subsets;",
        "question": "List all documents's subset. List the subset's name.",
        "correctness": 1,
        "gold_parse": "SELECT Document_Subset_Name FROM Document_Subsets;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Subset_Name FROM Document_Subsets;",
        "question": "What are the document subset names?",
        "correctness": 1,
        "gold_parse": "SELECT Document_Subset_Name FROM Document_Subsets;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
        "question": "What is the detail of document subset with name 'Best for 2000'?",
        "correctness": 1,
        "gold_parse": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
        "question": "What are the details on the document subsets that are named 'Best for 2000'?",
        "correctness": 1,
        "gold_parse": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects;",
        "question": "List document id of all documents.",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects;",
        "question": "What is the object id of the document objects?",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "question": "What is the parent document of document owned by Marlin? List the document id.",
        "correctness": 1,
        "gold_parse": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "question": "What are the document object ids of the objects owned by Marlin?",
        "correctness": 1,
        "gold_parse": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
        "question": "What is the owner of document with the Description 'Braeden Collection'?",
        "correctness": 1,
        "gold_parse": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
        "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
        "correctness": 1,
        "gold_parse": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "question": "What is the owner of the parent document of document owned by 'Marlin'?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
        "question": "What are the different descriptions of all the parent documents?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
        "question": "What is the unique description of every parent document?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
        "question": "How many documents owned by Marlin?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
        "question": "What is the count of documents owned by Marlin?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "List all documents ids that are not the parent of other documents.",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "What are the ids of the documents that are not parent documents?",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
        "question": "How many child documents does each parent document has? List the document id and the number.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
        "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collection_Name FROM Collections;",
        "question": "List the name of all collections.",
        "correctness": 1,
        "gold_parse": "SELECT Collection_Name FROM Collections;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collection_Name FROM Collections;",
        "question": "what are the collection names?",
        "correctness": 1,
        "gold_parse": "SELECT Collection_Name FROM Collections;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
        "question": "What is the description of collection named Best?",
        "correctness": 1,
        "gold_parse": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
        "question": "What are the collection descriptions that are named as 'Best'?",
        "correctness": 1,
        "gold_parse": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
        "question": "What is the name of the parent collection of the collection named Nice?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
        "question": "What are the names of all parent collections of the collection named Nice?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
        "question": "Which collection is not the parent of other collection? List the collection's name.",
        "correctness": 1,
        "gold_parse": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
        "question": "What are the names of the collections that are not the parent of the other collections?",
        "correctness": 1,
        "gold_parse": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
        "question": "List document that have more than one child. List the document id.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
        "question": "What are the ids of the documents that have more than one child?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
        "question": "How many child collection does the collection named Best has?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
        "question": "What is the number of child collections belonging to the collection named Best?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
        "question": "List all document which is related to document owned by Ransom . List the document id .",
        "correctness": 1,
        "gold_parse": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
        "question": "What are the document object ids of the related to the document owned by Ransom ?",
        "correctness": 1,
        "gold_parse": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
        "question": "List collection subset id, name and number of collections in each subset.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
        "question": "What are the collection subset ids, names, and number of collections for each subset?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which document has most of child? List the document id and the number of child.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
        "question": "For each document object id, how many children do they have?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1;",
        "question": "Which document has least number of related documents? List the document id and the number of related documents.",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "select document_object_id , count(*) from document_subset_members group by document_object_id order by count(*) asc limit 1;",
        "question": "What is the document object id with the least number of documents ?",
        "correctness": 1,
        "gold_parse": "select document_object_id , count(*) from document_subset_members group by document_object_id order by count(*) asc limit 1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "select document_object_id , count(*) from document_subset_members group by document_object_id having count(*) between 2 and 4;",
        "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
        "correctness": 1,
        "gold_parse": "select document_object_id , count(*) from document_subset_members group by document_object_id having count(*) between 2 and 4;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;",
        "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
        "question": "List all owner of documents that is related to documents owned by Braeden.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
        "question": "What are the different owners of documents that are related to ones owned by Braeden?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
        "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
        "question": "What are the different subset names of all documents owned by Braeden?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
        "question": "List subset id, name and number of different documents in each subset.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
        "question": "What is the subset id, name, and number of different documents for each subset?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
        "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
        "correctness": 1,
        "gold_parse": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
        "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
        "correctness": 1,
        "gold_parse": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
        "question": "For document subset named 'Best for 2000', List all document id that in this subset.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
        "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID",
        "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "select distinct t3.document_subset_name ,  t1.document_object_id from document_subset_members as t1 join document_subset_members  as t2 on t1.related_document_object_id = t2.document_object_id join document_subsets as t3 on t2.document_subset_id =  t3.document_subset_id",
        "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
        "correctness": 1,
        "gold_parse": "select distinct t3.document_subset_name ,  t1.document_object_id from document_subset_members as t1 join document_subset_members  as t2 on t1.related_document_object_id = t2.document_object_id join document_subsets as t3 on t2.document_subset_id =  t3.document_subset_id"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'",
        "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
        "correctness": 1,
        "gold_parse": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
        "question": "What is the collection name of a document owned by 'Ransom'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
        "question": "How many collections does each document belong to? List the count and the document id.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
        "question": "For each document object id, how many collections does it belong to?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
        "question": "How many documents does collection named 'Best' has?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
        "question": "What is the number of documents in the collection named 'Best'?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
        "question": "List the document id of all documents in collection named Best.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
        "question": "What is the number of document object ids in the collection named Best?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which collection have most number of documents? List collection name, id and number of documents.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
        "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
        "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
        "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
        "question": "List id of documents that in collection named Best but not in document subset Best for 2000.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\""
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
        "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\""
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
        "question": "List id of documents that in document subset Best for 2000 or in collection named Best.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
        "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
        "question": "List all name of collections that are related to collection named Best.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
        "question": "What are the names of the collections that are related to the collection named Best?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
        "question": "How many collections that are related to collection named Best?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
        "question": "How many different collections are related to the one named 'Best'?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
        "question": "Which collection subset does collection name Best in? List collection subset name.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
        "question": "What are the collection subsets that the collection named 'Best' in?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT count(*) FROM songs WHERE name LIKE \"%Love%\"",
        "question": "How many songs contain \"Love\" in their names?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM songs WHERE name LIKE \"%Love%\""
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT name FROM songs ORDER BY name",
        "question": "List the name of the songs in ascending, lexicographical order.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM songs ORDER BY name"
    },
    {
        "db_id": "sing_contest",
        "query": "select name , language from songs",
        "question": "List the names and languages of the songs .",
        "correctness": 1,
        "gold_parse": "select name , language from songs"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score",
        "question": "What are the maximum and minimum voice sound quality score of the performances?",
        "correctness": 1,
        "gold_parse": "SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
        "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
        "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'",
        "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'",
        "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "What are the ids and names of the participants who have performed at least two songs?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)",
        "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5",
        "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'",
        "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
        "correctness": 1,
        "gold_parse": "SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the song sung by the most participants?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9",
        "question": "How many performances have a stage presence score less than 7 or higher than 9?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );",
        "question": "How many songs listed are not performed?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language",
        "question": "What are the average rhythm scores for the songs in each different language?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
        "question": "What are the distinct names of the participants who have sung a song in 'English'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
        "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT name FROM songs WHERE name LIKE \"%Is%\"",
        "question": "Which song names have the substring \"Is\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM songs WHERE name LIKE \"%Is%\""
    },
    {
        "db_id": "sing_contest",
        "query": "select t2.original_artist from performance_score as t1 join songs as t2 on t2.id  =  t1.songs_id where t1.rhythm_tempo  >  5 order by t1.voice_sound_quality desc",
        "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
        "correctness": 1,
        "gold_parse": "select t2.original_artist from performance_score as t1 join songs as t2 on t2.id  =  t1.songs_id where t1.rhythm_tempo  >  5 order by t1.voice_sound_quality desc"
    },
    {
        "db_id": "address_1",
        "query": "SELECT count(*) FROM City",
        "question": "How many cities do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM City"
    },
    {
        "db_id": "address_1",
        "query": "SELECT count(*) FROM City",
        "question": "Count the number of cities.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM City"
    },
    {
        "db_id": "address_1",
        "query": "select distinct state from city",
        "question": "List all different states .",
        "correctness": 1,
        "gold_parse": "select distinct state from city"
    },
    {
        "db_id": "address_1",
        "query": "SELECT DISTINCT state FROM City",
        "question": "What are all the distinct states?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT state FROM City"
    },
    {
        "db_id": "address_1",
        "query": "SELECT count(DISTINCT country) FROM City",
        "question": "How many countries do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT country) FROM City"
    },
    {
        "db_id": "address_1",
        "query": "SELECT count(DISTINCT country) FROM City",
        "question": "Count the number of coutries.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT country) FROM City"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city_name ,  city_code ,  state ,  country FROM City",
        "question": "Show names, codes, states, countries for all cities.",
        "correctness": 1,
        "gold_parse": "SELECT city_name ,  city_code ,  state ,  country FROM City"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city_name ,  city_code ,  state ,  country FROM City",
        "question": "What are the names, codes, states, and countries for all cities?",
        "correctness": 1,
        "gold_parse": "SELECT city_name ,  city_code ,  state ,  country FROM City"
    },
    {
        "db_id": "address_1",
        "query": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
        "question": "What is the latitude and longitude for Baltimore?",
        "correctness": 1,
        "gold_parse": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
        "question": "What latitude and longitude correspond to Baltimore?",
        "correctness": 1,
        "gold_parse": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT city_name FROM City WHERE state  =  \"PA\"",
        "question": "Show names for all cities in state PA.",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM City WHERE state  =  \"PA\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT city_name FROM City WHERE state  =  \"PA\"",
        "question": "What are the names of all cities in PA?",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM City WHERE state  =  \"PA\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
        "question": "How many cities are in Canada?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM City WHERE country  =  \"CANADA\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
        "question": "Count the number of cities in Canada.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM City WHERE country  =  \"CANADA\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
        "question": "Show names for all USA city ordered by latitude.",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
        "question": "What are all the city names for cities in the USA, ordered by latitude?",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state ,  count(*) FROM City GROUP BY state",
        "question": "Show all states and number of cities in each state.",
        "correctness": 1,
        "gold_parse": "SELECT state ,  count(*) FROM City GROUP BY state"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state ,  count(*) FROM City GROUP BY state",
        "question": "How many cities are in each state?",
        "correctness": 1,
        "gold_parse": "SELECT state ,  count(*) FROM City GROUP BY state"
    },
    {
        "db_id": "address_1",
        "query": "select country ,  count(*) from city group by country",
        "question": "Show all countries and number of cities in each .",
        "correctness": 1,
        "gold_parse": "select country ,  count(*) from city group by country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT country ,  count(*) FROM City GROUP BY country",
        "question": "How many cities are there in each country?",
        "correctness": 1,
        "gold_parse": "SELECT country ,  count(*) FROM City GROUP BY country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
        "question": "List all states with at least two cities.",
        "correctness": 1,
        "gold_parse": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
        "question": "Which states have at least two cities?",
        "correctness": 1,
        "gold_parse": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
        "question": "Which state has most number of cities?",
        "correctness": 1,
        "gold_parse": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the state that has the most cities.",
        "correctness": 1,
        "gold_parse": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
        "question": "Which country has fewest number of cities?",
        "correctness": 1,
        "gold_parse": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
        "question": "Give the country with the fewest number of cities.",
        "correctness": 1,
        "gold_parse": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
        "question": "Show the first name and the last name for students living in state MD.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
        "question": "What are the full names of students living in MD?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
        "question": "How many students live in China?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
        "question": "Count the number of students living in China.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
        "question": "Return the first name and major of students are living in Baltimore?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
        "question": "What are the first names and majors of students living in Baltimore?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "Show the number of students living in each country.",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "How many students live in each country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
        "question": "Find the number of students living in each city.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
        "question": "How many students live in each city?",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
        "question": "Which state has most number of students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the state that has the most students.",
        "correctness": 1,
        "gold_parse": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
        "question": "Which country has least number of students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
        "question": "Give the country with the fewest students.",
        "correctness": 1,
        "gold_parse": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Show names for all cities where at least three students live.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "What are the names of cities with at least three students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
        "question": "Show all states where more than 5 students live.",
        "correctness": 1,
        "gold_parse": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
        "question": "What are the states with more than 5 students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5"
    },
    {
        "db_id": "address_1",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
        "question": "Show ids for all students who don't live in USA.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
        "question": "What the the student ids for students not living in the USA?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
        "question": "Show ids for all female (sex is F) students living in state PA.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'"
    },
    {
        "db_id": "address_1",
        "query": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
        "question": "What are the student ids for female students in the state of PA?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'"
    },
    {
        "db_id": "address_1",
        "query": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
        "question": "Show ids for all male students living outside of USA.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
        "question": "What are the ids for male students not in the USA?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
        "question": "What is the distance between BAL and CHI?",
        "correctness": 1,
        "gold_parse": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
        "question": "Give the distance between BAL and CHI?",
        "correctness": 1,
        "gold_parse": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
        "question": "Show me the distance between Boston and Newark.",
        "correctness": 1,
        "gold_parse": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
        "question": "What is the distance between Boston and Newark?",
        "correctness": 1,
        "gold_parse": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
        "question": "What is the average, minimum, maximum distance between two cities?",
        "correctness": 1,
        "gold_parse": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance"
    },
    {
        "db_id": "address_1",
        "query": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
        "question": "Give the average, minimum, and maximum distances between two cities.",
        "correctness": 1,
        "gold_parse": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
        "question": "Show me the city code of two cities with maximum distance.",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
        "question": "What are the city codes of the cities with the maximum distance?",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
        "question": "Show me the city code of two cities with a distance greater than the average.",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
        "question": "What are the city codes of cities with distance greater than average?",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
        "question": "Show me the city code of two cities with a distance less than 1000.",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
        "question": "What are the city codes corresponding to cities with distances less than 1000?",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000"
    },
    {
        "db_id": "address_1",
        "query": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
        "question": "What is the total distance between city BAL and all other cities.",
        "correctness": 1,
        "gold_parse": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
        "question": "What is the sum of distances between BAL and other cities?",
        "correctness": 1,
        "gold_parse": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
        "question": "What is the average distance between Boston and all other cities.",
        "correctness": 1,
        "gold_parse": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
        "question": "Give the average distance between Boston and other cities.",
        "correctness": 1,
        "gold_parse": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
        "question": "What is the name of the city closest to Chicago?",
        "correctness": 1,
        "gold_parse": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
        "question": "Give the name of the nearest city to Chicago.",
        "correctness": 1,
        "gold_parse": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
        "question": "What is the name of the city furthest to Boston?",
        "correctness": 1,
        "gold_parse": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
        "question": "Give the city name of the city with greatest distance from Boston.",
        "correctness": 1,
        "gold_parse": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
        "question": "Show all city codes and the total distance to all other cities.",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
        "question": "For each city, what is the the city code and sum of distances from each?",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
        "question": "Show all city names and the average distance to all other cities.",
        "correctness": 1,
        "gold_parse": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
        "question": "What are the city name and average distances from each city?",
        "correctness": 1,
        "gold_parse": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code"
    },
    {
        "db_id": "address_1",
        "query": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
        "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
        "correctness": 1,
        "gold_parse": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
        "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
        "correctness": 1,
        "gold_parse": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
        "question": "What is the first name and last name of the student living furthest to Linda Smith?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
        "question": "What is the full name of the student who lives furthest from Linda Smith?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
        "question": "Which state does the student whose first name is Linda live in?",
        "correctness": 1,
        "gold_parse": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\""
    },
    {
        "db_id": "address_1",
        "query": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
        "question": "Give the state that the student with first name Linda lives in.",
        "correctness": 1,
        "gold_parse": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\""
    },
    {
        "db_id": "boat_1",
        "query": "SELECT * FROM Sailors WHERE age  >  30",
        "question": "Return all details of sailors who are older than 30.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM Sailors WHERE age  >  30"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT * FROM Sailors WHERE age  >  30",
        "question": "What can you tell me about sailors who are older than age 30?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM Sailors WHERE age  >  30"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name ,  age FROM Sailors WHERE age  <  30",
        "question": "Return name and age for sailors who are younger than 30.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM Sailors WHERE age  <  30"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name ,  age FROM Sailors WHERE age  <  30",
        "question": "What is the name and age of every sailor who is younger than age 30?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM Sailors WHERE age  <  30"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
        "question": "Find boats reserved by Sailor with id 1.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
        "question": "What are the different boat ids reserved by the sailor whose id is 1?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
        "question": "Who reserved boat 102?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
        "question": "What is the name of the sailor who reserved boat 102?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT bid FROM Reserves",
        "question": "Return the unique boat ids (bid) of all reserved boats.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT bid FROM Reserves"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT bid FROM Reserves",
        "question": "What are the ids of all boats that are reserved by someone?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT bid FROM Reserves"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
        "question": "What is the name of sailors whose names contain letter e?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE name LIKE '%e%'"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
        "question": "What is the name of every sailor whose name contains the letter e?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE name LIKE '%e%'"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
        "question": "return the unique ids of sailors who are older than any sailors.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
        "question": "What is the different id of every sailor who is not the youngest?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
        "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
        "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "question": "Find the name and id of the sailors who reserved at least one boat?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "question": "What is the name and id of every sailor who reserved one or more boats?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1",
        "question": "Find the id and name of the sailors who reserved more than one boat.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "boat_1",
        "query": "select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2",
        "question": "What are the different names of sailors who reserved two or more boats ?",
        "correctness": 1,
        "gold_parse": "select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\""
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "question": "What are the sids for sailors who reserved red or blue boats?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\""
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\""
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "question": "What are the names and ids of sailors who reserved red or blue boats?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\""
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
        "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\""
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
        "question": "What are the ids of sailors who reserved red and blue boats?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\""
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
        "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\""
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
        "question": "What are the names and ids of sailors who reserved red and blue boats?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\""
    },
    {
        "db_id": "boat_1",
        "query": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
        "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
        "correctness": 1,
        "gold_parse": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
        "question": "What are the ids of sailors who have not reserved a boat?",
        "correctness": 1,
        "gold_parse": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "question": "what is the name and id of sailors who do not have a reservation of a boat?",
        "correctness": 1,
        "gold_parse": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "question": "What are the names and ids of all sailors who do not have boat reservations?",
        "correctness": 1,
        "gold_parse": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "question": "Find id for the sailors who do not have a reservation of a boat?",
        "correctness": 1,
        "gold_parse": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "question": "What is id about sailors who do not have boat reservations?",
        "correctness": 1,
        "gold_parse": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
        "question": "What is the name of the sailors who reserved boat with id 103?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
        "question": "Find the name of the sailors who reserved boat with id 103.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
        "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
        "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
        "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
        "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
        "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
        "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
        "question": "Find the name and age of the oldest sailor.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
        "question": "What is the name and age of the sailor with maximum age?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT COUNT(*) FROM Sailors",
        "question": "how many sailors in total?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM Sailors"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT COUNT(*) FROM Sailors",
        "question": "How many sailors exist?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM Sailors"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
        "question": "What is the average age of sailors whose rating is 7?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(age) FROM Sailors WHERE rating  =  7"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
        "question": "What is average age of all sailors who have a rating of 7?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(age) FROM Sailors WHERE rating  =  7"
    },
    {
        "db_id": "boat_1",
        "query": "select count(*) from sailors where name like 'd%'",
        "question": "How many sailors whose name starts with letter D exist ?",
        "correctness": 1,
        "gold_parse": "select count(*) from sailors where name like 'd%'"
    },
    {
        "db_id": "boat_1",
        "query": "select count(*) from sailors where name like 'd%'",
        "question": "What is the count of the sailors whose name starts with letter D ?",
        "correctness": 1,
        "gold_parse": "select count(*) from sailors where name like 'd%'"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
        "question": "What are the average rating and max age of all sailors?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(rating) ,  MAX(age) FROM Sailors"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
        "question": "Find the average rating and largest age for the sailors",
        "correctness": 1,
        "gold_parse": "SELECT AVG(rating) ,  MAX(age) FROM Sailors"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
        "question": "Find the number of reservations for each boat.",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
        "question": "How many reservations exist for each boat?",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
        "question": "Find the number of reservations for each boat with id greater than 50.",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
        "question": "How many reservations exist for each boat with an id greater than 50?",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
        "question": "Find the number of reservations for each boat with more than 1 reservation.",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
        "question": "How many reservations exist for each boat that has more than 1 reservation already?",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
        "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
        "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
        "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
        "correctness": 1,
        "gold_parse": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
        "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
        "correctness": 1,
        "gold_parse": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
        "question": "Find the name, rating and age of all sailors ordered by rating and age.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
        "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT count(*) FROM Boats",
        "question": "Find the total number of boats.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Boats"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT count(*) FROM Boats",
        "question": "How many boats are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Boats"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT count(*) FROM Boats WHERE color  =  'red'",
        "question": "How many boats are red?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Boats WHERE color  =  'red'"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT count(*) FROM Boats WHERE color  =  'red'",
        "question": "How many red boats exist?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Boats WHERE color  =  'red'"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
        "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
        "question": "What are the names of the boats booked by people between age 20 and 30?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
        "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
        "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT max(rating) FROM Sailors",
        "question": "What is highest rating between sailors?",
        "correctness": 1,
        "gold_parse": "SELECT max(rating) FROM Sailors"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT max(rating) FROM Sailors",
        "question": "What is the maximum rating for sailors?",
        "correctness": 1,
        "gold_parse": "SELECT max(rating) FROM Sailors"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
        "question": "Find the names of sailors who reserved boat with the name Melon.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
        "question": "What are the names of sailors who reserved a boat with the name Melon?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
        "question": "List the names and ages of all sailors sorted by rating in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM Sailors ORDER BY rating DESC"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
        "question": "What are the names and ages of all sailors sorted by decreasing rating?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM Sailors ORDER BY rating DESC"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
        "question": "Find the model of the most expensive headphone.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
        "question": "Which headphone model has the highest price?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "List all different headphone models in the alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Return the list of distinct headphone models ordered alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "question": "Which headphone class is the most common one?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "question": "Which headphone class contains the most headphones?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
        "question": "Which headphone class does have more than two headphones?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
        "question": "Find the headphone class that does not contain more than two headphones.",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
        "question": "Find the number of headphones with a price higher than 200 for each class.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
        "question": "How many headphones cost more than 200 for each headphone class?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(DISTINCT earpads) FROM headphone",
        "question": "how many different earpads are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT earpads) FROM headphone"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(DISTINCT earpads) FROM headphone",
        "question": "Count the number of different earpads.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT earpads) FROM headphone"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
        "question": "Find the top 2 earpads that are mostly used.",
        "correctness": 1,
        "gold_parse": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
        "question": "What are the top 2 earpads in terms of the number of headphones using them?",
        "correctness": 1,
        "gold_parse": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
        "question": "What are the model, class, and construction of the cheapest headphone?",
        "correctness": 1,
        "gold_parse": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
        "question": "Find the model, class, and construction of the headphone with the lowest price.",
        "correctness": 1,
        "gold_parse": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
        "question": "Find the average price for each headphone construction.",
        "correctness": 1,
        "gold_parse": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
        "question": "How much does headphones cost on average for each headphone construction?",
        "correctness": 1,
        "gold_parse": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
        "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
        "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
        "question": "Which earpads never use plastic construction?",
        "correctness": 1,
        "gold_parse": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
        "question": "Find all earpads that do not use plastic construction.",
        "correctness": 1,
        "gold_parse": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
        "question": "Find the headphone models whose price is below the average price.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
        "question": "What are the headphone models that cost less than the average price?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT name FROM store ORDER BY date_opened",
        "question": "Sort all store names by store open date.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM store ORDER BY date_opened"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT name FROM store ORDER BY date_opened",
        "question": "Give me a list of store names, sorted by store open date.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM store ORDER BY date_opened"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
        "question": "List name and parking info for the stores in the Tarzana neighborhood.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
        "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(DISTINCT neighborhood) FROM store",
        "question": "How many different neighborhoods are there for all stores?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT neighborhood) FROM store"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(DISTINCT neighborhood) FROM store",
        "question": "Count the number of distinct neighborhoods stores are located.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT neighborhood) FROM store"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
        "question": "find the number of stores in each neighborhood.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
        "question": "How many stores are there in each neighborhood?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
        "question": "Find the name of stores which have no headphone in stock.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
        "question": "Which stores do not have any headphones in stock? Give me the store names.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "question": "Which headphone models do not have any stock in any store?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "question": "Find the headphone models that are not in stock in any store.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Which headphone model has the largest quantity of stock across all the stores?",
        "correctness": 1,
        "gold_parse": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Find the headphone model whose total quantity in stock is the largest.",
        "correctness": 1,
        "gold_parse": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
        "question": "How many headphones are stored in the Woodman store?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
        "question": "Find the total quantity of headphones stored in the Woodman store.",
        "correctness": 1,
        "gold_parse": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
        "question": "Which neighborhood does not have any headphone in stock?",
        "correctness": 1,
        "gold_parse": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
        "question": "Find the neighborhood where no headphones are in stock.",
        "correctness": 1,
        "gold_parse": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Author",
        "question": "How many authors do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Author"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Author",
        "question": "Count the number of authors.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Author"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Paper",
        "question": "How many papers do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Paper"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Paper",
        "question": "Count the number of papers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Paper"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Affiliation",
        "question": "How many affiliations do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Affiliation"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Affiliation",
        "question": "Count the number of affiliations.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Affiliation"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
        "question": "How many papers do we have in NAACL 2000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
        "question": "Count the number of papers in NAACL 2000.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
        "question": "How many papers are published in year 2009 by Columbia University?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
        "question": "Count the number of papers published by Columbia University in 2009.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT DISTINCT name ,  address FROM Affiliation",
        "question": "List names and addresses for all affiliations.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name ,  address FROM Affiliation"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT DISTINCT name ,  address FROM Affiliation",
        "question": "What are the names and addresses for all affiliations?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name ,  address FROM Affiliation"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
        "question": "List all venues and years for papers ordered by year.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
        "question": "What are the distinct venues for papers, ordered by year?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
        "question": "Find the titles and paper IDs for papers written by Harvard University.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
        "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
        "question": "Find all papers with titles and paper IDs written by Mckeown.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
        "question": "What are the titles and paper ids for papers written by Mckeown?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
        "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
        "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
        "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
        "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
        "question": "List the names of all authors and their number of papers in descending order by number of papers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
        "question": "How many papers did each author publish, ordered by number of papers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "question": "List all affiliations with ascending ordered number of papers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "question": "What are the names of all affiliations, ordered by number of papers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
        "question": "List names of all authors who have more than 50 papers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
        "question": "What are the names of all authors who have more than 50 papers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "question": "List names of all authors who have only 1 paper.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "question": "What are the names of authors who have exactly 1 paper?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the venue and year with the most number of publications?",
        "correctness": 1,
        "gold_parse": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What was the venue and year with the most publications?",
        "correctness": 1,
        "gold_parse": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
        "question": "What is the venue with the least number of publications?",
        "correctness": 1,
        "gold_parse": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
        "question": "Which venue has the fewest publications?",
        "correctness": 1,
        "gold_parse": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
        "question": "How many papers cite paper with id A00-1002?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
        "question": "Count the number of papers which cited a paper with id A00-1002.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
        "question": "How many reference papers does paper with id D12-1027 have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
        "question": "Count the number of references the paper with id D12-1027 has.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and the number of citations of the most cited paper?",
        "correctness": 1,
        "gold_parse": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the id and the number of citations of the most cited paper.",
        "correctness": 1,
        "gold_parse": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the title of the paper which cites most number of papers?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the title of the paper which cites the most other papers?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
        "question": "List top 10 most cited papers and their numbers of citations.",
        "correctness": 1,
        "gold_parse": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
        "question": "What are the 10 most cited papers, and how many citations did each have?",
        "correctness": 1,
        "gold_parse": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10"
    },
    {
        "db_id": "aan_1",
        "query": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "How many citations does Mckeown , Kathleen have ?",
        "correctness": 1,
        "gold_parse": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "Count the number of citations Mckeown , Kathleen has .",
        "correctness": 1,
        "gold_parse": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "How many papers does Mckeown , Kathleen cite ?",
        "correctness": 1,
        "gold_parse": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "Count the number of papers Mckeown , Kathleen has cited .",
        "correctness": 1,
        "gold_parse": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and number of citations of the author who has most citations among all authors?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
        "correctness": 1,
        "gold_parse": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "aan_1",
        "query": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "Which venues and years did Mckeown , Kathleen have papers ?",
        "correctness": 1,
        "gold_parse": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "aan_1",
        "query": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
        "question": "What are the venues and years where Columbia University had papers ?",
        "correctness": 1,
        "gold_parse": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\""
    },
    {
        "db_id": "aan_1",
        "query": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
        "question": "Which venues and years did Columbia University have papers ?",
        "correctness": 1,
        "gold_parse": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which author had the most papers in the year 2009?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the author with the most papers in 2009?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
        "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
        "question": "Which 3 affiliations had the most papers in 2009?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "aan_1",
        "query": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "question": "How many papers does Columbia University have in or before 2009 ?",
        "correctness": 1,
        "gold_parse": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "question": "Count the number of papers Columbia University had during or prior to 2009 .",
        "correctness": 1,
        "gold_parse": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
        "question": "How many papers does Stanford University have between 2000 and 2009?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
        "question": "Count the number of papers Stanford University had between 2000 and 2009.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the title of the paper that has most number of authors?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the title of the paper with the most authors.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "How many collaborators has Mckeown , Kathleen had ?",
        "correctness": 1,
        "gold_parse": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "aan_1",
        "query": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
        "correctness": 1,
        "gold_parse": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "aan_1",
        "query": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
        "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
        "correctness": 1,
        "gold_parse": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1"
    },
    {
        "db_id": "aan_1",
        "query": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
        "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
        "correctness": 1,
        "gold_parse": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
        "question": "Find the id of the papers whose title has the key word 'translation'.",
        "correctness": 1,
        "gold_parse": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
        "question": "What are the ids for papers with titles containing 'translation'?",
        "correctness": 1,
        "gold_parse": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
        "question": "Find the id and title of the papers that are never cited by others.",
        "correctness": 1,
        "gold_parse": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
        "question": "What are the ids and titles for papers that have never been cited?",
        "correctness": 1,
        "gold_parse": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
        "question": "Find the number of papers published in different conferences each year.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
        "question": "How many papers are published in each venue in each year?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
        "question": "Find the total number of papers for each affiliation.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
        "question": "How many papers has each affiliation published?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
        "question": "Find the titles of papers that have more than 50 citations.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
        "question": "What are the titles for papers with more than 50 citations?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
        "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
        "question": "How many authors have not published a paper with more than 50 citations?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
        "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
        "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
        "question": "Find the name of authors who have never published a paper in ACL.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
        "question": "What are the names of authors who have not published a paper in ACL?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")"
    },
    {
        "db_id": "conference",
        "query": "SELECT count(*) FROM conference",
        "question": "How many conferences are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM conference"
    },
    {
        "db_id": "conference",
        "query": "SELECT count(*) FROM conference",
        "question": "What is the total number of conferences?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM conference"
    },
    {
        "db_id": "conference",
        "query": "SELECT DISTINCT conference_name FROM conference",
        "question": "List all distinct conference names.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT conference_name FROM conference"
    },
    {
        "db_id": "conference",
        "query": "SELECT DISTINCT conference_name FROM conference",
        "question": "What are the different conference names?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT conference_name FROM conference"
    },
    {
        "db_id": "conference",
        "query": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
        "question": "List all conference name, year, and location.",
        "correctness": 1,
        "gold_parse": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference"
    },
    {
        "db_id": "conference",
        "query": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
        "question": "What are the names, years, and locations of all conferences?",
        "correctness": 1,
        "gold_parse": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference"
    },
    {
        "db_id": "conference",
        "query": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
        "question": "Show all conference names and the number of times each conference has.",
        "correctness": 1,
        "gold_parse": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name"
    },
    {
        "db_id": "conference",
        "query": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
        "question": "For each conference name, how many times has it occurred?",
        "correctness": 1,
        "gold_parse": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "show all years and the number of conferences in each year.",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "How many conferences occur every year?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
        "question": "which year has least number of conferences?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
        "question": "What year had the fewest conferences?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "conference",
        "query": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
        "question": "Show all locations where at least two conferences are located.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2"
    },
    {
        "db_id": "conference",
        "query": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
        "question": "What are all locations that have hosted at least two conferences?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2"
    },
    {
        "db_id": "conference",
        "query": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
        "question": "Show the institution name, location and founded year of all institutions.",
        "correctness": 1,
        "gold_parse": "SELECT institution_name ,  LOCATION ,  founded FROM institution"
    },
    {
        "db_id": "conference",
        "query": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
        "question": "What are the names, locations, and founding years for all institutions?",
        "correctness": 1,
        "gold_parse": "SELECT institution_name ,  LOCATION ,  founded FROM institution"
    },
    {
        "db_id": "conference",
        "query": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
        "question": "How many institution are founded between 1850 and 1900?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900"
    },
    {
        "db_id": "conference",
        "query": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
        "question": "How many institutions were founded between 1850 and 1900?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900"
    },
    {
        "db_id": "conference",
        "query": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
        "question": "Show the institution name and location of institution that is most recently founded.",
        "correctness": 1,
        "gold_parse": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1"
    },
    {
        "db_id": "conference",
        "query": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
        "question": "What are the names and locations of the most recently-founded institution?",
        "correctness": 1,
        "gold_parse": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.institution_name ,  count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T2.institution_id",
        "question": "Show the institution name and the number of staff for each institution founded after 1800.",
        "correctness": 1,
        "gold_parse": "SELECT T1.institution_name ,  count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T2.institution_id"
    },
    {
        "db_id": "conference",
        "query": "select t1.institution_name ,  count(*) from institution as t1 join staff as t2 on t1.institution_id  =  t2.institution_id where t1.founded  >  1800 group by t2.institution_id",
        "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
        "correctness": 1,
        "gold_parse": "select t1.institution_name ,  count(*) from institution as t1 join staff as t2 on t1.institution_id  =  t2.institution_id where t1.founded  >  1800 group by t2.institution_id"
    },
    {
        "db_id": "conference",
        "query": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
        "question": "Show institution name which there is no staff in our record.",
        "correctness": 1,
        "gold_parse": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)"
    },
    {
        "db_id": "conference",
        "query": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
        "question": "What is the name of the institution with no staff in the records?",
        "correctness": 1,
        "gold_parse": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)"
    },
    {
        "db_id": "conference",
        "query": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
        "question": "Show all staff name who are above the average age.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)"
    },
    {
        "db_id": "conference",
        "query": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
        "question": "What are the names of all staff members who are older than average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)"
    },
    {
        "db_id": "conference",
        "query": "SELECT max(age) ,  min(age) FROM staff",
        "question": "What is the maximum and minimum age of all staff from the United States?",
        "correctness": 1,
        "gold_parse": "SELECT max(age) ,  min(age) FROM staff"
    },
    {
        "db_id": "conference",
        "query": "SELECT max(age) ,  min(age) FROM staff",
        "question": "What are the maximum and minimum ages for all staff?",
        "correctness": 1,
        "gold_parse": "SELECT max(age) ,  min(age) FROM staff"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
        "question": "Show all conference names which the staff from Canada attends.",
        "correctness": 1,
        "gold_parse": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\""
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
        "question": "What are the names of all the conferences that has staff from Canada attending?",
        "correctness": 1,
        "gold_parse": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\""
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Show all staff names who have been both speaker and sponsor in some conference.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
        "question": "Show all names who have been in both ACL and Naccl.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
        "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'"
    },
    {
        "db_id": "conference",
        "query": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
        "question": "Show all staff names who attend a conference in 2003 or 2004.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004"
    },
    {
        "db_id": "conference",
        "query": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
        "question": "What are the staff names who participated in conferences between 2003 or 2004?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
        "question": "Show the conference name and year and the number of participants for each conference.",
        "correctness": 1,
        "gold_parse": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
        "question": "For each conference id, what are their names, year, and number of participants?",
        "correctness": 1,
        "gold_parse": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
        "question": "Find the name of the conferences that have the top 2 most number of attendants.",
        "correctness": 1,
        "gold_parse": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
        "question": "What are the names of the conferences that have the top 2 most people attending?",
        "correctness": 1,
        "gold_parse": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2"
    },
    {
        "db_id": "conference",
        "query": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
        "question": "Find the name and nationality of the people who did not participate in any ACL conference.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")"
    },
    {
        "db_id": "conference",
        "query": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
        "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
        "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
        "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
        "question": "What is the name of the oldest pilot?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
        "question": "Return the name of the oldest pilot.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
        "question": "What are the names of pilots whose age is below the average age, ordered by age?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
        "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT * FROM PilotSkills WHERE age  <  30",
        "question": "Find all information of on pilots whose age is less than 30.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM PilotSkills WHERE age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "select * from pilotskills where age  <  30",
        "question": "What is all the information about pilots who are younger than 30 ?",
        "correctness": 1,
        "gold_parse": "select * from pilotskills where age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
        "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
        "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
        "question": "Where is the plane F-14 Fighter located?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
        "question": "Return the location of the hangar in which F-14 Fighter is located.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(DISTINCT LOCATION) FROM hangar",
        "question": "How many different places have some plane?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT LOCATION) FROM hangar"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(DISTINCT LOCATION) FROM hangar",
        "question": "Count the number of different locations of hangars.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT LOCATION) FROM hangar"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
        "question": "Which plane does the pilot Jones with age 32 has?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
        "question": "What are the names of planes that the pilot Jones who is 32 has?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) FROM pilotskills WHERE age  >  40",
        "question": "How many pilots who are older than 40?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM pilotskills WHERE age  >  40"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) FROM pilotskills WHERE age  >  40",
        "question": "Count the number of pilots with age greater than 40.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM pilotskills WHERE age  >  40"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
        "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
        "question": "Count the number of B-52 Bombers owned by pilots under 35.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "question": "Who is the youngest pilot to fly the plane Piper Cub?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "question": "Return the name of the youngest pilot to fly Piper Cub.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the most popular plane?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the plane that is flown the most often?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "What is the name of the least popular plane?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "What is the name of the plane that is flown the least often?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
        "question": "How many pilots whose planes are in Chicago?",
        "correctness": 1,
        "gold_parse": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
        "question": "Count the number of pilots who have planes in Chicago.",
        "correctness": 1,
        "gold_parse": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
        "question": "What are the planes owned by pilot Smith with age 41?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
        "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(DISTINCT plane_name) FROM pilotskills",
        "question": "How many distinct planes are owned across all pilots?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT plane_name) FROM pilotskills"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(DISTINCT plane_name) FROM pilotskills",
        "question": "Count the number of different plane names across all pilots.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT plane_name) FROM pilotskills"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
        "question": "How many planes are owned by the pilot whose name is Smith?",
        "correctness": 1,
        "gold_parse": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
        "question": "Count the number of planes Smith owns.",
        "correctness": 1,
        "gold_parse": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
        "question": "How many planes are controlled by the pilots whose age is older than 40?",
        "correctness": 1,
        "gold_parse": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
        "question": "Count the number of planes flown by pilots older than 40.",
        "correctness": 1,
        "gold_parse": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
        "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
        "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
        "question": "List all pilot names sorted by their ages in the descending order.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills ORDER BY age DESC"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
        "question": "What are the names of pilots, ordered by age descending?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills ORDER BY age DESC"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT LOCATION FROM hangar ORDER BY plane_name",
        "question": "Find all locations of planes sorted by the plane name.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM hangar ORDER BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT LOCATION FROM hangar ORDER BY plane_name",
        "question": "What are the locations of the different planes, ordered by plane name?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM hangar ORDER BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
        "question": "List all distinct types of planes owned by all pilots in alphabetic order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
        "question": "What are the different plane names, ordered alphabetically?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
        "question": "How many pilots who are older than 40 or younger than 30?",
        "correctness": 1,
        "gold_parse": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
        "question": "Count the number of pilots with age greater than 40 or less than 30.",
        "correctness": 1,
        "gold_parse": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
        "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
        "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT avg(age) ,  min(age) FROM pilotskills",
        "question": "What are the average and smallest ages of all pilots?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  min(age) FROM pilotskills"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT avg(age) ,  min(age) FROM pilotskills",
        "question": "Return the average and minimum ages across all pilots.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  min(age) FROM pilotskills"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
        "question": "What are the names of pilots who have planes in both Austin and Boston?",
        "correctness": 1,
        "gold_parse": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\""
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
        "question": "Give the names of pilots who have planes in Austin and Boston.",
        "correctness": 1,
        "gold_parse": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\""
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
        "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
        "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
        "question": "What is the average age of pilots for different types of planes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
        "question": "Return the average age of pilots for each plane name.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
        "question": "Find the number of planes for each type.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
        "question": "Count the number of entries for each plane name.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
        "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
        "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
        "question": "What are the names of oldest pilots for each type of plane?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
        "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
        "question": "Find the max age for each group of pilots with the same name.",
        "correctness": 1,
        "gold_parse": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
        "question": "What are the different pilot names, and what are the maximum ages of pilots for each?",
        "correctness": 1,
        "gold_parse": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
        "question": "For each city, find the number and average age of pilots who have a plane.",
        "correctness": 1,
        "gold_parse": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
        "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
        "correctness": 1,
        "gold_parse": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
        "question": "Find the number of pilots for the plane types with average pilot age below 35.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
        "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
        "question": "Find the location of the plane that is owned by the youngest pilot.",
        "correctness": 1,
        "gold_parse": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
        "question": "What is the location of the plane that was flown by the pilot with the lowest age?",
        "correctness": 1,
        "gold_parse": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
        "question": "Find the name and age of pilots who have a plane in Austin.",
        "correctness": 1,
        "gold_parse": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\""
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
        "question": "What are the names and ages of pilots who have planes located in Austin?",
        "correctness": 1,
        "gold_parse": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\""
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
        "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
        "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
        "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
        "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
        "question": "Find all different planes whose names contain substring 'Bomber'.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
        "question": "What are the different plane names that contain the word Bomber?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
        "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
        "correctness": 1,
        "gold_parse": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
        "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
        "correctness": 1,
        "gold_parse": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT name FROM district ORDER BY Area_km DESC LIMIT 1",
        "question": "Find the name of the district which has the largest area.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM district ORDER BY Area_km DESC LIMIT 1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT area_km ,  Government_website FROM district ORDER BY Population LIMIT 1",
        "question": "Select the area and government website of the district with the smallest population.",
        "correctness": 1,
        "gold_parse": "SELECT area_km ,  Government_website FROM district ORDER BY Population LIMIT 1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)",
        "question": "Find the names and populations of the districts whose area is greater than the average area.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT max(area_km) ,  avg(area_km) FROM district",
        "question": "Give me the biggest and average areas of all districts.",
        "correctness": 1,
        "gold_parse": "SELECT max(area_km) ,  avg(area_km) FROM district"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT sum(population) FROM district ORDER BY area_km DESC LIMIT 3",
        "question": "What is the total population of the districts whose areas are in the top 3?",
        "correctness": 1,
        "gold_parse": "SELECT sum(population) FROM district ORDER BY area_km DESC LIMIT 3"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population",
        "question": "List the ids, names, and government websites of all districts sorted by population.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT name FROM district WHERE Government_website LIKE \"%gov%\"",
        "question": "Find the names of districts whose government links use a 'gov' domain.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM district WHERE Government_website LIKE \"%gov%\""
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000",
        "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
        "correctness": 1,
        "gold_parse": "SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT name ,  speach_title FROM spokesman",
        "question": "Find all spokesman's names and speech titles.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  speach_title FROM spokesman"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
        "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
        "correctness": 1,
        "gold_parse": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT name ,  points FROM spokesman WHERE age  <  40",
        "question": "What are the names and points of spokesmen who are younger than 40?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  points FROM spokesman WHERE age  <  40"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT name FROM spokesman ORDER BY age DESC LIMIT 1",
        "question": "Who is the oldest spokesman?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM spokesman ORDER BY age DESC LIMIT 1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)",
        "question": "Which spokesman has lower points than the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the district which has greatest number of spokesmen.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004",
        "question": "Find the names of spokesmen who have served some district before 2004.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name ,  count(*) FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID",
        "question": "Find the number of spokesmen for each district, and the show district names as well.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  count(*) FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2",
        "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
        "correctness": 1,
        "gold_parse": "SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
        "question": "Find the names of districts which have more than one spokesman.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)",
        "question": "Find the number of districts which have no spokesmen.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)",
        "question": "Find the name of spokesmen who do not speak for any district.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)",
        "question": "Find the total and average population of the districts which have some spokesman.",
        "correctness": 1,
        "gold_parse": "SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)"
    },
    {
        "db_id": "art_1",
        "query": "select title from sculptures order by year desc limit 1",
        "question": "What is the title of the sculpture that was created in the most recent year ?",
        "correctness": 1,
        "gold_parse": "select title from sculptures order by year desc limit 1"
    },
    {
        "db_id": "art_1",
        "query": "select title from sculptures order by year desc limit 1",
        "question": "What is the name of the scuplture that was created most recently ?",
        "correctness": 1,
        "gold_parse": "select title from sculptures order by year desc limit 1"
    },
    {
        "db_id": "art_1",
        "query": "select title ,  location from paintings order by year limit 1",
        "question": "What is the title and location of the oldest painting ?",
        "correctness": 1,
        "gold_parse": "select title ,  location from paintings order by year limit 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1",
        "question": "What is the name of the oldest painting and where is it located?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
        "question": "Find the names of all sculptures located in gallery 226.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
        "question": "What are the names of all sculptures in gallery 226?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  LOCATION FROM paintings",
        "question": "List the title and location of all paintings.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  LOCATION FROM paintings"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  LOCATION FROM paintings",
        "question": "What are the paintings called and where are they located?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  LOCATION FROM paintings"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  LOCATION FROM sculptures",
        "question": "List the title and location of all sculptures.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  LOCATION FROM sculptures"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  LOCATION FROM sculptures",
        "question": "What are the sculptures called and where are they located?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  LOCATION FROM sculptures"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "What are the medium types of the painting with id = 80",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "select medium from paintings where paintingid  =  80",
        "question": "What mediums were used for the painting with id 80 ?",
        "correctness": 1,
        "gold_parse": "select medium from paintings where paintingid  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
        "question": "Find the first and last names of all artists who were born after 1850.",
        "correctness": 1,
        "gold_parse": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850"
    },
    {
        "db_id": "art_1",
        "query": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
        "question": "What are the full names of artists born after 1850?",
        "correctness": 1,
        "gold_parse": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
        "question": "Find the names and years of all sculptures that are not located in gallery 226.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
        "question": "What are the names and dates created for all sculptures not located in gallery 226?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
        "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
        "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
        "question": "Find the birth years of all distinct artists who made sculptures after 1920?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
        "question": "What is the birth year of each distinct artists who created sculptures after 1920?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920"
    },
    {
        "db_id": "art_1",
        "query": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
        "question": "What are the first and last names of the artist who lived the longest?",
        "correctness": 1,
        "gold_parse": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
        "question": "Give the full name of the artist who lived the longest.",
        "correctness": 1,
        "gold_parse": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
        "question": "What is the age of the artist who had the shortest life?",
        "correctness": 1,
        "gold_parse": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
        "question": "How old is the artist who lived the shortest life?",
        "correctness": 1,
        "gold_parse": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
        "question": "What are the first name and age of the artist who had the longest life?",
        "correctness": 1,
        "gold_parse": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
        "question": "What is the first name and age of the artist who lived the longest?",
        "correctness": 1,
        "gold_parse": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
        "question": "How many paintings are exhibited at gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
        "question": "What is the total number of paintings exhibited in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\""
    },
    {
        "db_id": "art_1",
        "query": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1",
        "question": "How many paintings did the artist with the longest life make ?",
        "correctness": 1,
        "gold_parse": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1"
    },
    {
        "db_id": "art_1",
        "query": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1",
        "question": "What is the painting count of the artist with the longest life ?",
        "correctness": 1,
        "gold_parse": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
        "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
        "question": "What is the name and year of each painting created by the artist whose first name is Mary?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
        "question": "What are the widths of the paintings that were created by the artist who was born before 1850?",
        "correctness": 1,
        "gold_parse": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
        "question": "How wide were the paintings by the artist who was born prior to 1850?",
        "correctness": 1,
        "gold_parse": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
        "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
        "correctness": 1,
        "gold_parse": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
        "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
        "correctness": 1,
        "gold_parse": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
        "question": "Find the first and last names of the artists who have both works of paintings and sculptures?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
        "question": "Give the full names of artists who have created paintings and sculptures.",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
        "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
        "correctness": 1,
        "gold_parse": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
        "question": "In what year was the artist who created a painting in 1884 born?",
        "correctness": 1,
        "gold_parse": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
        "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
        "question": "What are first names of the artists with oil paintings in gallery 241?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
        "question": "What are the numbers of works for different medium type?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  medium FROM paintings GROUP BY medium"
    },
    {
        "db_id": "art_1",
        "query": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
        "question": "How many works are there in each medium?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  medium FROM paintings GROUP BY medium"
    },
    {
        "db_id": "art_1",
        "query": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
        "question": "What are the average height of paintings for different medium types?",
        "correctness": 1,
        "gold_parse": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium"
    },
    {
        "db_id": "art_1",
        "query": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
        "question": "What is the average height of paintings for different medium types?",
        "correctness": 1,
        "gold_parse": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium"
    },
    {
        "db_id": "art_1",
        "query": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
        "question": "What are the numbers of paintings created before 1900 in different places?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION"
    },
    {
        "db_id": "art_1",
        "query": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
        "question": "How many paintings were created before 1900 in different locations?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
        "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
        "question": "Give the names of all oil paintings created after 1910.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
        "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
        "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
        "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
        "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
        "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
        "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
        "question": "Find the id of the oldest painting.",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
        "question": "What is the id of the oldest painting?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
        "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
        "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT title FROM paintings ORDER BY title",
        "question": "List the names of all distinct paintings in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT title FROM paintings ORDER BY title"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT title FROM paintings ORDER BY title",
        "question": "What is the name of every distinct painting in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT title FROM paintings ORDER BY title"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
        "question": "List the names of all distinct paintings ordered by length.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT title FROM paintings ORDER BY height_mm"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
        "question": "List the names of all distinct paintings from shortest to longest in height.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT title FROM paintings ORDER BY height_mm"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
        "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
        "question": "What are the names of  paintings and scupltures created between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
        "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
        "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the artist who has the highest number of painting works before 1900?",
        "correctness": 1,
        "gold_parse": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the artist with the most paintings before 1900?",
        "correctness": 1,
        "gold_parse": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the first name of the artist who has the highest number of sculptures?",
        "correctness": 1,
        "gold_parse": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the first name of the sculptor with the greatest number of works?",
        "correctness": 1,
        "gold_parse": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
        "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
        "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
        "question": "Which locations have paintings created before 1885 or after 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
        "question": "What locations have works painted before 1885 or after 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
        "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
        "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
        "question": "Which locations have paintings in the mediums of on panel and on canvas?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
        "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
        "question": "Find the locations that have paintings created before 1885 and after 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
        "question": "What are the locations that have works painted before 1885 and after 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930"
    },
    {
        "db_id": "art_1",
        "query": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
        "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
        "correctness": 1,
        "gold_parse": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
        "question": "What is the average height and width of paintings that are oil medium in gallery 241?",
        "correctness": 1,
        "gold_parse": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
        "question": "What are the maximum height and id of paintings painted before 1900?",
        "correctness": 1,
        "gold_parse": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900"
    },
    {
        "db_id": "art_1",
        "query": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
        "question": "What is the height and id of the tallest painting created before 1900?",
        "correctness": 1,
        "gold_parse": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900"
    },
    {
        "db_id": "art_1",
        "query": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
        "question": "What are the maximum height and width of paintings for each year?",
        "correctness": 1,
        "gold_parse": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR"
    },
    {
        "db_id": "art_1",
        "query": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
        "question": "What are largest height and width dimensions for paintings in each year?",
        "correctness": 1,
        "gold_parse": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR"
    },
    {
        "db_id": "art_1",
        "query": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
        "question": "What are the average height and width of paintings grouped by painters and ordered by name?",
        "correctness": 1,
        "gold_parse": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title"
    },
    {
        "db_id": "art_1",
        "query": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
        "question": "Find the average height and width of paintings grouped by painters and ordered by name",
        "correctness": 1,
        "gold_parse": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
        "question": "Find the first names and number of works of all artists who have at least two paintings?",
        "correctness": 1,
        "gold_parse": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
        "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
        "correctness": 1,
        "gold_parse": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  <=  3",
        "question": "Find the death year of all artists who have at most 3 paintings?",
        "correctness": 1,
        "gold_parse": "SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  <=  3"
    },
    {
        "db_id": "art_1",
        "query": "select t1.deathyear from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid having count(*)  <  4",
        "question": "When did each artist who created less than 4 paintings die ?",
        "correctness": 1,
        "gold_parse": "select t1.deathyear from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid having count(*)  <  4"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
        "question": "Find the death year of the artist who made the least number of sculptures?",
        "correctness": 1,
        "gold_parse": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
        "question": "When did the artist who made the fewest sculptures die?",
        "correctness": 1,
        "gold_parse": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
        "question": "What are the id and height of the painting with the longest width in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
        "question": "Tell me the height and id number of the widest painting in gallery 240.",
        "correctness": 1,
        "gold_parse": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "question": "What is the id of every painting created before the oldest painting in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
        "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
        "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
        "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
        "question": "Which artists have the most paintings in oil?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
        "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
        "correctness": 1,
        "gold_parse": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
        "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
        "correctness": 1,
        "gold_parse": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
        "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
        "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
        "question": "Find the first and last name of artists who have painting but no sculpture work.",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
        "question": "What are the first and last names of the artists who did not sculpt but could paint.",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
        "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
        "question": "Where do you have paintings that were created before 1885 that are not on canvas?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\""
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT count(*) FROM race",
        "question": "How many races are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM race"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT count(*) FROM race",
        "question": "Count the number of races.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM race"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
        "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
        "correctness": 1,
        "gold_parse": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
        "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
        "correctness": 1,
        "gold_parse": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
        "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
        "correctness": 1,
        "gold_parse": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
        "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
        "correctness": 1,
        "gold_parse": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
        "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
        "question": "Return the different constructors of drivers, ordered by age ascending.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
        "question": "What are the distinct entrant types of drivers aged 20 or older?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
        "question": "Give the different entrant types for drivers at least 20 years old.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT max(Age) ,  min(Age) FROM driver",
        "question": "What are the maximum and minimum age of driver?",
        "correctness": 1,
        "gold_parse": "SELECT max(Age) ,  min(Age) FROM driver"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT max(Age) ,  min(Age) FROM driver",
        "question": "Return the maximum and minimum age across drivers.",
        "correctness": 1,
        "gold_parse": "SELECT max(Age) ,  min(Age) FROM driver"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
        "question": "How many different engines are used by drivers with age older than 30 or younger than 20?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
        "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
        "question": "List all names of drivers in descending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
        "question": "What are the names of drivers, ordered descending alphabetically?",
        "correctness": 1,
        "gold_parse": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
        "question": "Please show the names of drivers and the names of races they participate in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
        "question": "What are the names of drivers and the names of the races they took part in?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
        "question": "Please show the names of drivers and the number of races they participate in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
        "question": "How many races did each driver participate in?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the age of the driver who participated in the most number of races.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the age of the driver who raced in the most races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
        "question": "Please show the names and ages of the drivers who participated in at least two races.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
        "question": "What are the names and ages of drivers who raced in two or more races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
        "question": "Please list the names of races with drivers aged 26 or older participating.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
        "question": "What are the names of races in which drivers 26 or older took part?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
        "question": "List the names of drivers whose constructor is not \"Bugatti\".",
        "correctness": 1,
        "gold_parse": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\""
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
        "question": "What are the names od drivers who did not have the constructor Bugatti?",
        "correctness": 1,
        "gold_parse": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\""
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
        "question": "List different constructors and the number of drivers that use each constructor.",
        "correctness": 1,
        "gold_parse": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
        "question": "How many drivers use each constructor?",
        "correctness": 1,
        "gold_parse": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common type of engine used by drivers.",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common type of engine?",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "question": "List the types of engines that are used by at least two drivers.",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "question": "What are the engine types that are used by two or more drivers?",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
        "question": "List the names of drivers that do not participate in any race.",
        "correctness": 1,
        "gold_parse": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
        "question": "What are names of drivers who did not take part in a race?",
        "correctness": 1,
        "gold_parse": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
        "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
        "correctness": 1,
        "gold_parse": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
        "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
        "correctness": 1,
        "gold_parse": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
        "question": "Find the teams that won more than once.",
        "correctness": 1,
        "gold_parse": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
        "question": "Which teams won more than 1 race?",
        "correctness": 1,
        "gold_parse": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\""
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\""
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
        "correctness": 1,
        "gold_parse": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\""
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
        "correctness": 1,
        "gold_parse": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(*) FROM languages",
        "question": "How many languages are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM languages"
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(*) FROM languages",
        "question": "Count the number of languages.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM languages"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM languages ORDER BY name ASC",
        "question": "List the name of languages in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM languages ORDER BY name ASC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM languages ORDER BY name ASC",
        "question": "What are the names of languages, in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM languages ORDER BY name ASC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
        "question": "What are the names of languages that contain the word \"ish\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM languages WHERE name LIKE \"%ish%\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
        "question": "Return the names of langauges that contain the substring \"ish\".",
        "correctness": 1,
        "gold_parse": "SELECT name FROM languages WHERE name LIKE \"%ish%\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY overall_score DESC",
        "question": "Show the names of countries in descending order of overall scores.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY overall_score DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY overall_score DESC",
        "question": "What are the names of the countries, ordered descending by overall score?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY overall_score DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT avg(justice_score) FROM countries",
        "question": "What is the average justice scores among countries?",
        "correctness": 1,
        "gold_parse": "SELECT avg(justice_score) FROM countries"
    },
    {
        "db_id": "country_language",
        "query": "SELECT avg(justice_score) FROM countries",
        "question": "Give the average justice scores across all countries.",
        "correctness": 1,
        "gold_parse": "SELECT avg(justice_score) FROM countries"
    },
    {
        "db_id": "country_language",
        "query": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
        "question": "What are the maximum and minimum health scores among countries that are not \"Norway\".",
        "correctness": 1,
        "gold_parse": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
        "question": "Return the maximum and minimum health scores across all countries other than Norway.",
        "correctness": 1,
        "gold_parse": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "question": "How many different official languages are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM official_languages"
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "question": "Count the number of different official languages.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM official_languages"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY education_score DESC",
        "question": "List names of countries in descending order of education_score.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY education_score DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY education_score DESC",
        "question": "What are the names of the countries, ordered descending by education score?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY education_score DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
        "question": "List the name of the country with the biggest score in politics.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
        "question": "What is the name of the country with the highest politics score?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
        "question": "Show the names of countries and their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
        "question": "What are the names of the countries, as well as the names of their official langauges?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
        "question": "Show the official languages and the number of countries speaking each language.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
        "question": "What are the names of the different official languages, as well as the number of countries that speak each?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the official language spoken by the most number of countries.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the official language that is most common?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
        "question": "Show the official languages spoken by at least two countries.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
        "question": "Which official languages are spoken in two or more countries?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "country_language",
        "query": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
        "question": "Show the average overall scores of countries whose official language is \"English\".",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
        "question": "What is the average overall score across countries with English as their official language?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
        "question": "Show the three official languages that are most commonly spoken.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
        "question": "What are the names of the three official languages spoken in the most countries?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
        "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
        "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the country that has the greatest number of official languages.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which country has the greatest number of official languages?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
        "question": "List the names of languages that are not the official language of any countries.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
        "question": "What are the names of languages that are not the official language of any country?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
        "question": "List the names of countries that do not have any official language.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
        "question": "What are the names of countries that do not have an official language?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
        "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
        "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT country ,  town_city FROM Addresses;",
        "question": "Which countries and cities are included in addresses?",
        "correctness": 1,
        "gold_parse": "SELECT country ,  town_city FROM Addresses;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT country ,  town_city FROM Addresses;",
        "question": "What are the countries and cities for each address?",
        "correctness": 1,
        "gold_parse": "SELECT country ,  town_city FROM Addresses;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
        "question": "In which states are each of the the properties located?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
        "question": "Give the states or provinces corresponding to each property.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "question": "How is the feature rooftop described?",
        "correctness": 1,
        "gold_parse": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "question": "Return the description of the feature 'rooftop'.",
        "correctness": 1,
        "gold_parse": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "question": "What are the feature name and description of the most commonly seen feature across properties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "question": "Give the feature name and description for the most common feature across all properties.",
        "correctness": 1,
        "gold_parse": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT min(room_count) FROM Properties;",
        "question": "What is the minimum number of rooms in a property?",
        "correctness": 1,
        "gold_parse": "SELECT min(room_count) FROM Properties;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT min(room_count) FROM Properties;",
        "question": "What is the lowest room count across all the properties?",
        "correctness": 1,
        "gold_parse": "SELECT min(room_count) FROM Properties;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
        "question": "How many properties have 1 parking lot or 1 garage?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
        "question": "Count the number of properties that have 1 parking lot or 1 garage.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
        "question": "For users whose description contain the string 'Mother', which age categories are they in?",
        "correctness": 1,
        "gold_parse": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
        "question": "What are the age categories for users whose description contains the string Mother?",
        "correctness": 1,
        "gold_parse": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the first name of the user who owns the greatest number of properties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
        "question": "Return the first name of the user who owns the most properties.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "List the average room count of the properties with gardens.",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "On average, how many rooms do properties with garden features have?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
        "question": "In which cities are there any properties equipped with a swimming pool?",
        "correctness": 1,
        "gold_parse": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
        "question": "Return the cities in which there exist properties that have swimming pools.",
        "correctness": 1,
        "gold_parse": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
        "question": "Which property had the lowest price requested by the vendor? List the id and the price.",
        "correctness": 1,
        "gold_parse": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
        "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
        "correctness": 1,
        "gold_parse": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(room_count) FROM Properties;",
        "question": "On average, how many rooms does a property have?",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Properties;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(room_count) FROM Properties;",
        "question": "What is the average number of rooms in a property?",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Properties;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT count(DISTINCT room_size) FROM Rooms;",
        "question": "How many kinds of room sizes are listed?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT room_size) FROM Rooms;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT count(DISTINCT room_size) FROM Rooms;",
        "question": "Return the number of different room sizes.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT room_size) FROM Rooms;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
        "question": "What are the ids of users who have searched at least twice, and what did they search?",
        "correctness": 1,
        "gold_parse": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
        "question": "Return the ids of users who have performed two or more searches, as well as their search sequence.",
        "correctness": 1,
        "gold_parse": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT max(search_datetime) FROM User_Searches;",
        "question": "When was the time of the latest search by a user?",
        "correctness": 1,
        "gold_parse": "SELECT max(search_datetime) FROM User_Searches;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT max(search_datetime) FROM User_Searches;",
        "question": "What was the time of the most recent search?",
        "correctness": 1,
        "gold_parse": "SELECT max(search_datetime) FROM User_Searches;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
        "question": "What are all the user searches time and content? Sort the result descending by content.",
        "correctness": 1,
        "gold_parse": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
        "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.",
        "correctness": 1,
        "gold_parse": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
        "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
        "question": "Return the zip codes for properties not belonging to users who own two or fewer properties.",
        "correctness": 1,
        "gold_parse": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
        "question": "What are the users making only one search? List both category and user id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
        "question": "What are the ids of users who have only made one search, and what are their category codes?",
        "correctness": 1,
        "gold_parse": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
        "question": "What is the age range category of the user who made the first search?",
        "correctness": 1,
        "gold_parse": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
        "question": "Return the age category for the user who made the earliest search.",
        "correctness": 1,
        "gold_parse": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
        "question": "Find the login names of all senior citizen users ordered by their first names.",
        "correctness": 1,
        "gold_parse": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
        "question": "What are the login names of all senior citizens, sorted by first name?",
        "correctness": 1,
        "gold_parse": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
        "question": "How many searches do buyers make in total?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
        "question": "Count the number of searches made by buyers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
        "question": "When did the user with login name ratione register?",
        "correctness": 1,
        "gold_parse": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
        "question": "What was the registration date for the user whose login name is ratione?",
        "correctness": 1,
        "gold_parse": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
        "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
        "question": "What are the first, middle, last, and login names for all users who are sellers?",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
        "question": "Where do the Senior Citizens live? List building, street, and the city.",
        "correctness": 1,
        "gold_parse": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
        "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
        "correctness": 1,
        "gold_parse": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
        "question": "How many properties are there with at least 2 features?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
        "question": "Count the number of properties with at least two features.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
        "question": "How many photos does each property have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
        "question": "Count the number of property photos each property has by id.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
        "question": "How many photos does each owner has of his or her properties? List user id and number of photos.",
        "correctness": 1,
        "gold_parse": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
        "question": "What are the user ids of property owners who have property photos, and how many do each of them have?",
        "correctness": 1,
        "gold_parse": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
        "question": "What is the total max price of the properties owned by single mothers or students?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
        "question": "Give the total max price corresponding to any properties owned by single mothers or students.",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
        "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?",
        "correctness": 1,
        "gold_parse": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
        "question": "Return the date stamp and property name for each property history event, sorted by date stamp.",
        "correctness": 1,
        "gold_parse": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the description of the most common property type? List the description and code.",
        "correctness": 1,
        "gold_parse": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the most common property type, and what is its description.",
        "correctness": 1,
        "gold_parse": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
        "question": "What is the detailed description of the age category code 'Over 60'?",
        "correctness": 1,
        "gold_parse": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
        "question": "Give the category description of the age category 'Over 60'.",
        "correctness": 1,
        "gold_parse": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
        "question": "What are the different room sizes, and how many of each are there?",
        "correctness": 1,
        "gold_parse": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
        "question": "Return the number of rooms with each different room size.",
        "correctness": 1,
        "gold_parse": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
        "question": "In which country does the user with first name Robbie live?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
        "question": "Return the country in which the user with first name Robbie lives.",
        "correctness": 1,
        "gold_parse": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
        "question": "What are the first, middle and last names of users who own the property they live in?",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
        "question": "Return the full names of users who live in properties that they own.",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
        "question": "List the search content of the users who do not own a single property.",
        "correctness": 1,
        "gold_parse": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
        "question": "What search strings were entered by users who do not own any properties?",
        "correctness": 1,
        "gold_parse": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
        "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
        "correctness": 1,
        "gold_parse": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
        "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT count(*) FROM bike WHERE weight  >  780",
        "question": "How many bikes are heavier than 780 grams?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM bike WHERE weight  >  780"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT product_name ,  weight FROM bike ORDER BY price ASC",
        "question": "List the product names and weights of the bikes in ascending order of price.",
        "correctness": 1,
        "gold_parse": "SELECT product_name ,  weight FROM bike ORDER BY price ASC"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT heat ,  name ,  nation FROM cyclist",
        "question": "List the heat, name, and nation for all the cyclists.",
        "correctness": 1,
        "gold_parse": "SELECT heat ,  name ,  nation FROM cyclist"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT max(weight) ,  min(weight) FROM bike",
        "question": "What are the maximum and minimum weight of all bikes?",
        "correctness": 1,
        "gold_parse": "SELECT max(weight) ,  min(weight) FROM bike"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'",
        "question": "What is the average price of the bikes made of material 'Carbon CC'?",
        "correctness": 1,
        "gold_parse": "SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'",
        "question": "What are the name and result of the cyclists not from 'Russia' ?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015",
        "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4",
        "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the cyclist who owns the most bikes?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
        "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT count(DISTINCT heat) FROM cyclist",
        "question": "How many different levels of heat are there for the cyclists?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT heat) FROM cyclist"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )",
        "question": "How many cyclists did not purchase any bike after year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.result  <  '4:21.558'",
        "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.result  <  '4:21.558'"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
        "correctness": 1,
        "gold_parse": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT name ,  nation ,  RESULT FROM cyclist EXCEPT SELECT T1.name ,  T1.nation ,  T1.result FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id",
        "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  nation ,  RESULT FROM cyclist EXCEPT SELECT T1.name ,  T1.nation ,  T1.result FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT product_name FROM bike WHERE material LIKE \"%fiber%\"",
        "question": "What are the names of the bikes that have substring 'fiber' in their material?",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM bike WHERE material LIKE \"%fiber%\""
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id",
        "question": "How many bikes does each cyclist own? Order by cyclist id.",
        "correctness": 1,
        "gold_parse": "SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
        "question": "What is the most expensive cake and its flavor?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
        "question": "Give the id and flavor of the most expensive cake.",
        "correctness": 1,
        "gold_parse": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
        "question": "What is the cheapest cookie and its flavor?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
        "question": "What is the id and flavor of the cheapest cookie?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
        "question": "Find the ids of goods that have apple flavor.",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE flavor  =  \"Apple\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
        "question": "What are the ids with apple flavor?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE flavor  =  \"Apple\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE price  <  3",
        "question": "What are the ids of goods that cost less than 3 dollars?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE price  <  3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE price  <  3",
        "question": "Give the ids of goods that cost less than 3 dollars.",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE price  <  3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
        "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
        "question": "What are the distinct ids of customers who bought lemon flavored cake?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
        "question": "For each type of food, tell me how many customers have ever bought it.",
        "correctness": 1,
        "gold_parse": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
        "question": "How many customers have bought each food?",
        "correctness": 1,
        "gold_parse": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
        "question": "Find the id of customers who shopped at the bakery at least 15 times.",
        "correctness": 1,
        "gold_parse": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
        "question": "What are the customer ids of customers who have at least 15 receipts?",
        "correctness": 1,
        "gold_parse": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
        "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
        "correctness": 1,
        "gold_parse": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
        "question": "Give the last names of customers who have been to the bakery more than 10 times?",
        "correctness": 1,
        "gold_parse": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
        "question": "How many types of Cake does this bakery sell?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM goods WHERE food  =  \"Cake\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
        "question": "Count the number of types of cake this bakery sells.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM goods WHERE food  =  \"Cake\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
        "question": "List all the flavors of Croissant available in this bakery.",
        "correctness": 1,
        "gold_parse": "SELECT flavor FROM goods WHERE food  =  \"Croissant\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
        "question": "What are all the flavors of croissant?",
        "correctness": 1,
        "gold_parse": "SELECT flavor FROM goods WHERE food  =  \"Croissant\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
        "question": "Give me a list of all the distinct items bought by the customer number 15.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
        "question": "What are all the distinct items bought by customer 15?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
        "question": "For each type of food, what are the average, maximum and minimum price?",
        "correctness": 1,
        "gold_parse": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
        "question": "What are the average, minimum and maximum prices for each food?",
        "correctness": 1,
        "gold_parse": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
        "question": "Find the receipt numbers where both Cake and Cookie were bought.",
        "correctness": 1,
        "gold_parse": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
        "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
        "correctness": 1,
        "gold_parse": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
        "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
        "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
        "question": "What is the item that was bought the least number of times?",
        "correctness": 1,
        "gold_parse": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
        "question": "Which item was bought the fewest times?",
        "correctness": 1,
        "gold_parse": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "How many goods are available for each food type?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "Count the number of goods for each food type.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT avg(price) ,  food FROM goods GROUP BY food",
        "question": "What is the average price for each food type?",
        "correctness": 1,
        "gold_parse": "SELECT avg(price) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT avg(price) ,  food FROM goods GROUP BY food",
        "question": "Give the average price for each food type.",
        "correctness": 1,
        "gold_parse": "SELECT avg(price) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
        "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
        "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
        "question": "Find flavor of cakes that cost more than 10 dollars.",
        "correctness": 1,
        "gold_parse": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
        "question": "What are the flavors of cakes that cost more than 10 dollars?",
        "correctness": 1,
        "gold_parse": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
        "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
        "question": "What are the distinct ids and prices for goods that cost less than the average good?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
        "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
        "question": "Give the distinct ids for goods that cost less than any Tart.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
        "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
        "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
        "question": "On which date did some customer buy a good that costs more than 15 dollars?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
        "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
        "question": "Give me the list of ids of all goods whose id has \"APP\".",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE id LIKE \"%APP%\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
        "question": "What are all the ids of goods with an id which contains \"APP\"?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE id LIKE \"%APP%\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
        "question": "Which good has \"70\" in its id? And what is its price?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
        "question": "What are the id and price for the good with \"70\" in its id?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
        "question": "List the last names of all customers in an alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LastName FROM customers ORDER BY LastName"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
        "question": "What are the last names of the customers in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LastName FROM customers ORDER BY LastName"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT id FROM goods ORDER BY id",
        "question": "Return the ordered list of all good ids.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT id FROM goods ORDER BY id"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT id FROM goods ORDER BY id",
        "question": "Order the distinct good ids.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT id FROM goods ORDER BY id"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
        "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
        "correctness": 1,
        "gold_parse": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
        "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
        "question": "Find all receipts which has the latest date. Also tell me that date.",
        "correctness": 1,
        "gold_parse": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
        "question": "What is the receipt number with the latest date, and what is that date?",
        "correctness": 1,
        "gold_parse": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
        "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
        "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
        "question": "Find the first name and last name of a customer who visited on the earliest date.",
        "correctness": 1,
        "gold_parse": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
        "question": "What is the full name of the customer who visited on the earliest date?",
        "correctness": 1,
        "gold_parse": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
        "question": "What is average price of goods whose flavor is blackberry or blueberry?",
        "correctness": 1,
        "gold_parse": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
        "question": "What are the average prices of goods with blackberry or blueberry flavor?",
        "correctness": 1,
        "gold_parse": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
        "question": "Return the cheapest price for goods with cheese flavor.",
        "correctness": 1,
        "gold_parse": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
        "question": "What is the cheapest good with cheese flavor?",
        "correctness": 1,
        "gold_parse": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
        "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
        "correctness": 1,
        "gold_parse": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
        "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
        "correctness": 1,
        "gold_parse": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
        "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
        "correctness": 1,
        "gold_parse": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
        "question": "What are the minimum and maximum prices of food goods, ordered by food?",
        "correctness": 1,
        "gold_parse": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "question": "Find the top three dates with the most receipts.",
        "correctness": 1,
        "gold_parse": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "question": "What are the three dates for which the most receipts were given?",
        "correctness": 1,
        "gold_parse": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
        "question": "Which customer shopped most often? How many times?",
        "correctness": 1,
        "gold_parse": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
        "correctness": 1,
        "gold_parse": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "question": "For each date, return how many distinct customers visited on that day.",
        "correctness": 1,
        "gold_parse": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "question": "How many cusomters visited on each date?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
        "question": "Give me the first name and last name of customers who have bought apple flavor Tart.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
        "question": "What are the full names of customers who bought apple flavored Tarts?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
        "question": "What are the ids of Cookies whose price is lower than any Croissant?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
        "question": "Give the ids of cookes that are cheaper than any croissant.",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
        "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
        "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
        "question": "What are the ids of goods whose price is above twice the average price of all goods?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
        "question": "Give the ids of goods that are more than twice as expensive as the average good.",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
        "question": "List the id, flavor and type of food of goods ordered by price.",
        "correctness": 1,
        "gold_parse": "SELECT id ,  flavor ,  food FROM goods ORDER BY price"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
        "question": "What are the ids, flavors, and food types of goods, ordered by price?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  flavor ,  food FROM goods ORDER BY price"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
        "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
        "correctness": 1,
        "gold_parse": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
        "question": "What are the ids and flavors of cakes, ordered by flavor?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
        "question": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
        "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
        "question": "What are the flavors available for Cake but not for Tart?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
        "question": "Give the flavors of Cakes that are not available for Tart.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
        "question": "What is the three most popular goods in this bakery?",
        "correctness": 1,
        "gold_parse": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
        "question": "Give the three most purchased items at this bakery.",
        "correctness": 1,
        "gold_parse": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
        "question": "Find the ids of customers who have spent more than 150 dollars in total.",
        "correctness": 1,
        "gold_parse": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
        "question": "What are the ids of customers who have spent over 150 dollars in total?",
        "correctness": 1,
        "gold_parse": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
        "question": "Find the ids of customers whose average spending for each good is above 5.",
        "correctness": 1,
        "gold_parse": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
        "question": "What are the ids of customers who spend more than 5 on average for each good?",
        "correctness": 1,
        "gold_parse": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "question": "On which day did the bakery sell more than 100 dollars in total.",
        "correctness": 1,
        "gold_parse": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
        "correctness": 1,
        "gold_parse": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT count(*) FROM driver",
        "question": "How many drivers are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT count(*) FROM driver",
        "question": "Find the total number of drivers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
        "question": "Find the number of drivers whose points are greater than 150 for each make.",
        "correctness": 1,
        "gold_parse": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
        "question": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
        "correctness": 1,
        "gold_parse": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
        "question": "Find the average age of drivers for each make.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  Make FROM driver GROUP BY make"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
        "question": "What is the average age of drivers for each make? Return the average age and make.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  Make FROM driver GROUP BY make"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(Laps) FROM driver WHERE age  <  20",
        "question": "What are the average laps of all the drivers who are younger than 20?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Laps) FROM driver WHERE age  <  20"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(Laps) FROM driver WHERE age  <  20",
        "question": "Compute the average laps of drivers under the age of 20.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Laps) FROM driver WHERE age  <  20"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
        "question": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
        "correctness": 1,
        "gold_parse": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
        "question": "Find the manager and sponsor for each team and order them by the car owner.",
        "correctness": 1,
        "gold_parse": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "question": "Find the make that has more than one team.",
        "correctness": 1,
        "gold_parse": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "question": "Which make has more than one team?",
        "correctness": 1,
        "gold_parse": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
        "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
        "correctness": 1,
        "gold_parse": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
        "question": "Find the make of the team whose car owner is \"Buddy Arrington\".",
        "correctness": 1,
        "gold_parse": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "What are the maximum and minimum points of drivers.",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "Find the highest and lowest points of drivers.",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT count(*) FROM driver WHERE Points  <  150",
        "question": "How many drivers have points smaller than 150?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE Points  <  150"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT count(*) FROM driver WHERE Points  <  150",
        "question": "Count the number of drivers whose points are below 150.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE Points  <  150"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "question": "List all the driver names in ascending order of age.",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "question": "Sort the driver names by age in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Points DESC",
        "question": "List all the driver names in descending order of points.",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Points DESC"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Points DESC",
        "question": "What is the list of drivers ordered by points in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Points DESC"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
        "question": "Please show the names of drivers, and countries they are from.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
        "question": "For each driver, return his or her name and country.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "question": "What is the average age of drivers from countries with official native language \"English\"",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "question": "What are the countries that have drivers with points larger than 150?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "question": "Find all the countries where some drivers have points above 150.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
        "question": "What is the capital of the country where the driver with the most points is from?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
        "question": "Which country is the driver with the highest points from? Give me the capital of the country.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
        "question": "List each make with the number of drivers with that make.",
        "correctness": 1,
        "gold_parse": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
        "question": "For each make, return the make and the count of drivers with that make.",
        "correctness": 1,
        "gold_parse": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the make that are associated with most drivers.",
        "correctness": 1,
        "gold_parse": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which make does the most drivers have?",
        "correctness": 1,
        "gold_parse": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
        "question": "List the driver makes that are associated with at least three drivers.",
        "correctness": 1,
        "gold_parse": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
        "question": "Which make is associated with 3 or more drivers?",
        "correctness": 1,
        "gold_parse": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
        "question": "List the names of teams that do not have any drivers.",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
        "question": "Which team does not have drivers?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
        "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
        "correctness": 1,
        "gold_parse": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
        "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
        "correctness": 1,
        "gold_parse": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT sum(Points) ,  avg(Points) FROM driver",
        "question": "Show total and average points of all drivers.",
        "correctness": 1,
        "gold_parse": "SELECT sum(Points) ,  avg(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT sum(Points) ,  avg(Points) FROM driver",
        "question": "What are the total and average points of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Points) ,  avg(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
        "question": "Find the countries where no driver come from.",
        "correctness": 1,
        "gold_parse": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
        "question": "Which countries do not have any drivers?",
        "correctness": 1,
        "gold_parse": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the manager and sponsor of the team that has the most drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the manager and sponsor of the team that has the most drivers.",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
        "question": "What are the manager and car owner of the team that has at least 2 drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
        "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT count(*) FROM institution",
        "question": "How many institutions are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT count(*) FROM institution",
        "question": "Count the number of institutions.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Name FROM institution ORDER BY Name ASC",
        "question": "List the names of institutions in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM institution ORDER BY Name ASC"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Name FROM institution ORDER BY Name ASC",
        "question": "What are the names of institutions, ordered alphabetically?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM institution ORDER BY Name ASC"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Name FROM institution ORDER BY Founded ASC",
        "question": "List the names of institutions in ascending order of founded year.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM institution ORDER BY Founded ASC"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Name FROM institution ORDER BY Founded ASC",
        "question": "What are the names of institutions, ordered by the years in which they were founded?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM institution ORDER BY Founded ASC"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT City ,  Province FROM institution",
        "question": "What are the cities and provinces of institutions?",
        "correctness": 1,
        "gold_parse": "SELECT City ,  Province FROM institution"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT City ,  Province FROM institution",
        "question": "Return the cities and provinces of institutions.",
        "correctness": 1,
        "gold_parse": "SELECT City ,  Province FROM institution"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
        "question": "What are the maximum and minimum enrollment of all institutions?",
        "correctness": 1,
        "gold_parse": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
        "question": "Return the maximum and minimum enrollment across all institutions.",
        "correctness": 1,
        "gold_parse": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
        "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\""
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
        "question": "Return the affiliations of instituions that are not in the city of Vancouver.",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\""
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
        "question": "What are the stadiums of institutions in descending order of the capacity.",
        "correctness": 1,
        "gold_parse": "SELECT Stadium FROM institution ORDER BY Capacity DESC"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
        "question": "Return the stadiums of institutions, ordered by capacity descending.",
        "correctness": 1,
        "gold_parse": "SELECT Stadium FROM institution ORDER BY Capacity DESC"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
        "question": "What is the stadium of the institution with the largest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
        "question": "Give the stadium of the institution which is the greatest enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
        "question": "What are the names and nicknames of institutions?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
        "question": "Return the names of institutions, as well as their nicknames.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
        "question": "What is the nickname of the institution with the smallest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
        "question": "Return the nickname of the institution with the lowest enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
        "question": "List the names of institutions in descending order of the number of championships.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
        "question": "What are the names of institutions, ordered descending by their number of championships?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
        "question": "List the names of institutions with at least one championship.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
        "question": "What are the names of institutions that have 1 or more championships?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
        "question": "What is the total number of championship of institution with public affiliation?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\""
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
        "question": "Return the total number of championships of institutions that have a Public affiliation.",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\""
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
        "question": "What are different types of affiliations of institutions and the corresponding number of institutions?",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
        "question": "How many institutions are there for each type of affiliation?",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common type of affiliation for institutions?",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Return the most common type of affiliation across all institutions.",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
        "question": "In which years were more than one institution founded?",
        "correctness": 1,
        "gold_parse": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
        "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
        "correctness": 1,
        "gold_parse": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
        "question": "List the nicknames of institutions in descending order of capacity.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
        "question": "What are the nicknames of institutions, ordered descending by their capacities?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC"
    },
    {
        "db_id": "institution_sports",
        "query": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
        "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
        "correctness": 1,
        "gold_parse": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\""
    },
    {
        "db_id": "institution_sports",
        "query": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
        "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
        "correctness": 1,
        "gold_parse": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\""
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
        "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
        "correctness": 1,
        "gold_parse": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
        "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
        "correctness": 1,
        "gold_parse": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT count(DISTINCT Province) FROM institution",
        "question": "How many distinct provinces are the institutions in?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Province) FROM institution"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT count(DISTINCT Province) FROM institution",
        "question": "Count the number of different provinces that have institutions.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Province) FROM institution"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Select all details of all warehouses.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "What is all the information about the warehouses?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "question": "Find all different contents stored in New York.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "question": "What are all the different contents stored in boxes in New York?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
        "question": "Select contents of all boxes with a value larger than $150.",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes WHERE Value  >  150"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
        "question": "What are the contents of boxes with value greater than 150?",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes WHERE Value  >  150"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
        "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
        "question": "What is the average value of boxes for each warehouse?",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  sum(value) FROM boxes",
        "question": "Find the average and total values of all boxes.",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  sum(value) FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  sum(value) FROM boxes",
        "question": "What are the average and total values across all boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  sum(value) FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
        "question": "Find the average and total capacity of all warehouses.",
        "correctness": 1,
        "gold_parse": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
        "question": "What are the average and total capacities across all warehouses?",
        "correctness": 1,
        "gold_parse": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "Find the average and maximum value for each different content.",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "What are the average and maximum values for each type of content in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
        "question": "Find the content that has the highest total values in all boxes.",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
        "question": "What is the content with the greatest value across all boxes?",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) FROM boxes",
        "question": "Select the average value of all the boxes.",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) FROM boxes",
        "question": "What is the average value of boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "question": "Select all distinct contents in all the boxes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "question": "What are the different contents in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT CONTENTS) FROM boxes",
        "question": "Find the number of all distinct contents in all the boxes.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT CONTENTS) FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT CONTENTS) FROM boxes",
        "question": "How many different contents are stored in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT CONTENTS) FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT LOCATION) FROM warehouses",
        "question": "Find all distinct locations of warehouses.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT LOCATION) FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT LOCATION) FROM warehouses",
        "question": "What are the different locations of warehouses?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT LOCATION) FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
        "correctness": 1,
        "gold_parse": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
        "correctness": 1,
        "gold_parse": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "question": "Find the total value of boxes in the warehouses located at Chicago or New York.",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "question": "What is the total value of boxes located in Chicago or New York?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Find all contents present in warehouses located in Chicago and those located in New York.",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Find the contents that are stored in both Chicago and New York.",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Find the type of contents that are not in the warehouses located at New York.",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "What types of contents cannot be found in warehouses in New York?",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
        "correctness": 1,
        "gold_parse": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
        "correctness": 1,
        "gold_parse": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
        "question": "Find the warehouses which store contents Rocks or Scissors.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
        "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
        "correctness": 1,
        "gold_parse": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
        "correctness": 1,
        "gold_parse": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
        "question": "List the code and contents of all boxes sorted by their values.",
        "correctness": 1,
        "gold_parse": "SELECT code ,  CONTENTS FROM boxes ORDER BY value"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
        "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?",
        "correctness": 1,
        "gold_parse": "SELECT code ,  CONTENTS FROM boxes ORDER BY value"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
        "question": "Find the code and contents of the box with the lowest value.",
        "correctness": 1,
        "gold_parse": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
        "question": "What is the code and contents for the box that has the smallest value?",
        "correctness": 1,
        "gold_parse": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
        "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
        "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
        "question": "List all different types of contents ordered by contents.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
        "question": "What are the different contents of boxes, ordered alphabetically?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
        "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
        "correctness": 1,
        "gold_parse": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
        "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
        "correctness": 1,
        "gold_parse": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
        "correctness": 1,
        "gold_parse": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
        "correctness": 1,
        "gold_parse": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
        "question": "Find the total value of boxes stored in the warehouse with the largest capacity.",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
        "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
        "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
        "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "Find the total value and number of boxes for each content type.",
        "correctness": 1,
        "gold_parse": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "For each content, what is the total value and number of boxes?",
        "correctness": 1,
        "gold_parse": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
        "question": "Find the total, average, and maximum capacity for different locations.",
        "correctness": 1,
        "gold_parse": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
        "question": "For each location, what are the total, average, and maximum capacities of warehouses?",
        "correctness": 1,
        "gold_parse": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(capacity) FROM warehouses",
        "question": "Find the total capacity of all warehouse locations.",
        "correctness": 1,
        "gold_parse": "SELECT sum(capacity) FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(capacity) FROM warehouses",
        "question": "What is the total capacity of all warehouses?",
        "correctness": 1,
        "gold_parse": "SELECT sum(capacity) FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
        "question": "Find the value of the most expensive boxes saved in each warehouse location.",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
        "question": "For each warehouse location, what is the value of the most expensive box?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT Warehouse ,  count(*) FROM boxes GROUP BY warehouse",
        "question": "Select the warehouse codes along with the number of boxes in each warehouse.",
        "correctness": 1,
        "gold_parse": "SELECT Warehouse ,  count(*) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "select warehouse ,  count(*) from boxes group by warehouse",
        "question": "How many boxes are there with each warehouse ?",
        "correctness": 1,
        "gold_parse": "select warehouse ,  count(*) from boxes group by warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
        "question": "Find the number of different locations where Rocks are stored.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
        "question": "In how many different warehouses are Rocks stored within boxes?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
        "question": "Select the code of each box, along with the name of the city the box is located in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
        "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?",
        "correctness": 1,
        "gold_parse": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
        "question": "Select the codes of all the boxes located in Chicago.",
        "correctness": 1,
        "gold_parse": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
        "question": "What are the codes of boxes stored in warehouses in Chicago?",
        "correctness": 1,
        "gold_parse": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
        "question": "Find the number of boxes saved in each warehouse.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
        "question": "How many boxes are stored in each warehouse?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
        "question": "Find the number of distinct types of contents in each warehouse.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
        "question": "How many different types of contents are stored in each warehouse?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
        "question": "Select the codes of all warehouses that are above capacity.",
        "correctness": 1,
        "gold_parse": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
        "question": "What are the codes of warehouses that have more boxes than their capacity?",
        "correctness": 1,
        "gold_parse": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
        "question": "Find the total values of boxes that are not in the warehouses located at Chicago.",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
        "question": "What is the total value of boxes contained in any location but Chicago?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
        "question": "Show name, city, and state for all universities in  alphabetical order of university name.",
        "correctness": 1,
        "gold_parse": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
        "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
        "correctness": 1,
        "gold_parse": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
        "question": "How many universities are in Illinois or Ohio?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
        "question": "What is the total number of universities located in Illinois or Ohio?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
        "question": "What is the maximum, average, and minimum enrollment for universities?",
        "correctness": 1,
        "gold_parse": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
        "question": "What is the maximum, average, and minimum enrollment for all universities?",
        "correctness": 1,
        "gold_parse": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)",
        "question": "List team name for all universities with enrollments above the average.",
        "correctness": 1,
        "gold_parse": "SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)"
    },
    {
        "db_id": "university_rank",
        "query": "select team_name from university where enrollment  >  (select avg(enrollment) from university)",
        "question": "What are the names of all teams from universities that have more people enrolled than average ?",
        "correctness": 1,
        "gold_parse": "select team_name from university where enrollment  >  (select avg(enrollment) from university)"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT DISTINCT home_conference FROM University",
        "question": "Show all home conferences.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT home_conference FROM University"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT DISTINCT home_conference FROM University",
        "question": "What are the different home conferences from the university table?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT home_conference FROM University"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
        "question": "Show all home conferences and the number of universities in each conference.",
        "correctness": 1,
        "gold_parse": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
        "question": "For every home conference, how many universities attended that conference?",
        "correctness": 1,
        "gold_parse": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
        "question": "Which state has most number of universities?",
        "correctness": 1,
        "gold_parse": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the state with the most universities?",
        "correctness": 1,
        "gold_parse": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
        "question": "Show all home conferences with average enrollment of universities above 2000.",
        "correctness": 1,
        "gold_parse": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
        "question": "What are the home conferences that have an average university enrollment above 2000?",
        "correctness": 1,
        "gold_parse": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
        "question": "Which conference has the least number of total enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
        "question": "What are the home conferences with the fewest number of people enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
        "question": "List all major name and major code in the order of their major code",
        "correctness": 1,
        "gold_parse": "SELECT major_name ,  major_code FROM Major ORDER BY major_code"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
        "question": "What are the names and codes for all majors ordered by their code?",
        "correctness": 1,
        "gold_parse": "SELECT major_name ,  major_code FROM Major ORDER BY major_code"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
        "question": "Show all majors and major ranks for the university with name Augustana College.",
        "correctness": 1,
        "gold_parse": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
        "question": "What are the ranks and names of all majors at Augustana College?",
        "correctness": 1,
        "gold_parse": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
        "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
        "correctness": 1,
        "gold_parse": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
        "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
        "correctness": 1,
        "gold_parse": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the university that has most number of majors with rank 1?",
        "correctness": 1,
        "gold_parse": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the university with the most majors ranked number 1?",
        "correctness": 1,
        "gold_parse": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
        "question": "Show all university names without a major with rank 1?",
        "correctness": 1,
        "gold_parse": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
        "question": "What are the names of all universities without any majors ranked number 1?",
        "correctness": 1,
        "gold_parse": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
        "question": "Show all university names with both major Accounting and major Urban Education.",
        "correctness": 1,
        "gold_parse": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
        "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
        "correctness": 1,
        "gold_parse": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
        "question": "What is the name and overall ranking of universities in Wisconsin state?",
        "correctness": 1,
        "gold_parse": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
        "question": "What is the name and rank of every university in Wisconsin?",
        "correctness": 1,
        "gold_parse": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
        "question": "What is the university name with highest research point?",
        "correctness": 1,
        "gold_parse": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
        "question": "What is the name of the university with the most research points?",
        "correctness": 1,
        "gold_parse": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
        "question": "List all university names in ascending order of their reputation points.",
        "correctness": 1,
        "gold_parse": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
        "question": "What are the names of all universities in ascending order of reputation points?",
        "correctness": 1,
        "gold_parse": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
        "question": "What is the name of university with major Accounting ranked 3 or above?",
        "correctness": 1,
        "gold_parse": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\""
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
        "question": "What are the names of the university with an Accounting major ranked 3 or higher?",
        "correctness": 1,
        "gold_parse": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\""
    },
    {
        "db_id": "university_rank",
        "query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "question": "What is the total enrollment of universities with a overall rank 5 or below?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "question": "What is the total number of students enrolled in an university with a rank of 5 or below?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
        "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
        "correctness": 1,
        "gold_parse": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
        "question": "What is the name and citation point of the unversities with the top 3 reputation points?",
        "correctness": 1,
        "gold_parse": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
        "question": "which states do have more than two universities with enrollment smaller than 3000?",
        "correctness": 1,
        "gold_parse": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
        "question": "What are the states that have more than 2 universities with an enrollment less than 3000?",
        "correctness": 1,
        "gold_parse": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'null'",
        "question": "Find the titles of movies that don\u2019t have any rating.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'null'",
        "question": "What are the names of movies that do not have any ratings?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'G'",
        "question": "Find the names of movies whose rating is \u2018G\u2019.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'G'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'G'",
        "question": "What are names of movies that have a 'G' ratings?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'G'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "question": "Find the title of the movie that is played in the Odeon theater.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "question": "What are the movie titles for ones that are played in the Odeon theater?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "question": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(*) FROM movies WHERE rating  =  'G'",
        "question": "Find the number of movies whose rating is \u2018G\u2019.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM movies WHERE rating  =  'G'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(*) FROM movies WHERE rating  =  'G'",
        "question": "How many movies had a 'G' rating?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM movies WHERE rating  =  'G'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "question": "How many movies are playing across all theaters?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "question": "How many movies are playing in theaters?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "question": "How many distinct movies are on in theaters?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "question": "How many different movies are playing?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(DISTINCT name) FROM movietheaters",
        "question": "How many distinct movie theaters are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT name) FROM movietheaters"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(DISTINCT name) FROM movietheaters",
        "question": "How many different movie theaters exist?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT name) FROM movietheaters"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
        "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
        "correctness": 1,
        "gold_parse": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
        "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
        "correctness": 1,
        "gold_parse": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
        "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
        "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
        "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
        "question": "What movie is playing at both the Odeon and Imperial theater?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "question": "Find the name of all movies that are not played in Odeon theater.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "question": "What are the names of every movie that is not playing at the Odeon theater?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies ORDER BY title",
        "question": "List in alphabetical order the titles of all movies.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies ORDER BY title"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies ORDER BY title",
        "question": "What are the movie names in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies ORDER BY title"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies ORDER BY rating",
        "question": "Find the titles of all movies sorted by their ratings.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies ORDER BY rating"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies ORDER BY rating",
        "question": "What are the movie names sorted by rating?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies ORDER BY rating"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the theater that is playing the most number of movies.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the theater playing the most movies?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the movie that is played in the most number of theaters.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the film playing at the most number of theaters?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
        "question": "Find the number of movies in each rating.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  rating FROM movies GROUP BY rating"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
        "question": "How many movies exist for each rating?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  rating FROM movies GROUP BY rating"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
        "question": "Find the number of movies whose rating is not null.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
        "question": "How many movies have a rating that is not null?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
        "question": "Find the name of theaters that has at least one movie playing.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
        "question": "What are the names of every theater with at least one movie playing?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
        "question": "Select the name of all movie theaters that are not currently showing a movie.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
        "question": "What are the names of all cinemas not showing any movies?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
        "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
        "question": "What are the names of theaters playing 'G' rated movies?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies",
        "question": "Select the title of all movies.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies",
        "question": "What are all of the movie names?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT DISTINCT rating FROM movies",
        "question": "Show all the distinct ratings in the database.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT rating FROM movies"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT DISTINCT rating FROM movies",
        "question": "What are the different movie ratings?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT rating FROM movies"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT * FROM movies WHERE rating  =  'null'",
        "question": "Show all information of all unrated movies.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT * FROM movies WHERE rating  =  'null'",
        "question": "What is all the information about the unrated movies?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
        "question": "Show the titles of movies not currently being shown in any theaters.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
        "question": "What are the names of the movies not being shown in any theaters?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
        "question": "Who receieved the heaviest package?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
        "question": "What is the name of the client who received the heaviest package?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
        "question": "What is the total weight of all the packages that customer Leo Wong sent?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
        "question": "What is the total weight for all packages that Leo Wong sent?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
        "question": "What is the position of Amy Wong?",
        "correctness": 1,
        "gold_parse": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
        "question": "What position does Amy Wong have?",
        "correctness": 1,
        "gold_parse": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
        "question": "What is Turanga Leela's salary and position?",
        "correctness": 1,
        "gold_parse": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
        "question": "What is the salary and position of the employee named Turanga Leela?",
        "correctness": 1,
        "gold_parse": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
        "question": "What is the average salary of all intern jobs?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
        "question": "What is the average salary of an intern?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
        "question": "What level is Physician?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
        "question": "What is the clearance level of a physician?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
        "question": "List Package Number of all package sent by Leo Wong?",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
        "question": "What is the number of all packages that Leo Wong sent?",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";"
    },
    {
        "db_id": "planet_1",
        "query": "select t1.packagenumber from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber where t2.name = \"leo wong\";",
        "question": "List all package numbers received by Leo Wong ?",
        "correctness": 1,
        "gold_parse": "select t1.packagenumber from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber where t2.name = \"leo wong\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\";",
        "question": "What are all of the package numbers received by Leo Wong?",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
        "question": "List all package sent or received by Leo Wong.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\""
    },
    {
        "db_id": "planet_1",
        "query": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
        "question": "What are all the different package numbers that Leo Wong sent or received?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\""
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
        "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\""
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
        "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\""
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
        "question": "What are the contents of package sent by John Zoidfarb?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
        "question": "What are the package contents of all those sent by John Zoidfarb?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
        "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
        "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
        "question": "List package number and weight of top 3 lightest packages.",
        "correctness": 1,
        "gold_parse": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
        "question": "What is the package number and weight of the 3 lightest packages?",
        "correctness": 1,
        "gold_parse": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
        "question": "Who sent most number of packages? List client name and number of packages sent by that client.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the name of the client who sent the most packages and how many were there?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "planet_1",
        "query": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;",
        "question": "Who received least number of packages ? List client name and number of packages received by that client .",
        "correctness": 1,
        "gold_parse": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;"
    },
    {
        "db_id": "planet_1",
        "query": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;",
        "question": "What is the smallest number of packages received and by whom ?",
        "correctness": 1,
        "gold_parse": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
        "question": "Who sent more than one packages? List the client's name.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
        "question": "What is the name of all clients who sent more than one package?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
        "question": "What are the Coordinates of planet Mars?",
        "correctness": 1,
        "gold_parse": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
        "question": "What are the coordinates of the planet named Mars?",
        "correctness": 1,
        "gold_parse": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "question": "List all Planets' names and coordinates in alphabetical order of name.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "question": "What are the names and coordinates of all planets in alphabetical order by name?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
        "question": "List all shipment id under Phillip J. Fry's management.",
        "correctness": 1,
        "gold_parse": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
        "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Date FROM Shipment;",
        "question": "List the dates of all shipments.",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM Shipment;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Date FROM Shipment;",
        "question": "What are the dates of every shipment in the database?",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM Shipment;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
        "question": "List all shipment ids for the planet Mars.",
        "correctness": 1,
        "gold_parse": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
        "question": "What are the shipment ids for the planet Mars?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
        "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela.",
        "correctness": 1,
        "gold_parse": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
        "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
        "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela.",
        "correctness": 1,
        "gold_parse": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
        "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
        "question": "What is the total shipments in each planet? List the planet name and total shipments.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
        "question": "How many shipments take place on each planet?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which planet has most shipments? List the planet name.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the name of the planet with the most shipments?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
        "question": "List the manger's name and number of shipments under his management.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
        "question": "What are the number of shipments managed and names of each manager?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
        "question": "Calculate total weight of package shipped on Mars.",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
        "question": "what is the total weight of all packages shipped on Mars?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";"
    },
    {
        "db_id": "planet_1",
        "query": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;",
        "question": "Calculate total weight of package shipped in each planet . show the name of each planet .",
        "correctness": 1,
        "gold_parse": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;"
    },
    {
        "db_id": "planet_1",
        "query": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;",
        "question": "what is the total package weight for each planet, list its name ?",
        "correctness": 1,
        "gold_parse": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
        "question": "Which planet has total weight of shipment greater than 30? List planet name.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
        "question": "What are the names of all planets tjat have a total shipment weight greater than 30?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
        "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
        "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
        "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
        "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
        "question": "Which packages have weight between 10 and 30? List the package number and weight.",
        "correctness": 1,
        "gold_parse": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
        "question": "What are the package numbers and weights that are between 10 and 30?",
        "correctness": 1,
        "gold_parse": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
        "question": "Which employees do not have clearance in Mars? List employee's name.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
        "question": "What are the names of all employees who don't have clearance on Mars?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
        "question": "Which employees have clearance in Omega III? List employees' name.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
        "question": "What are the names of all employees with clearance on Omega III?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
        "question": "Which planets that have exact one employee has clearance? List planets' name.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
        "question": "What are the names of all planets with one employee that has clearance?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
        "question": "Which employees have salaries between 5000 and 10000? List employees' name.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
        "question": "What are the employees's names for those that have salaries between 5000 and 10000?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
        "question": "Find the name of employees whose salary is above the average salary or more than 5000.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
        "question": "What are the names of all employees who have a salary greater than average or more than 5000?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)"
    },
    {
        "db_id": "planet_1",
        "query": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
        "question": "Find the number of employees who do not have clearance in Mars .",
        "correctness": 1,
        "gold_parse": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );"
    },
    {
        "db_id": "planet_1",
        "query": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
        "question": "What is the number of employees that do not have clearance on Mars ?",
        "correctness": 1,
        "gold_parse": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );"
    },
    {
        "db_id": "video_game",
        "query": "SELECT count(*) FROM game",
        "question": "How many games are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM game"
    },
    {
        "db_id": "video_game",
        "query": "SELECT count(*) FROM game",
        "question": "Count the number of games.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM game"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
        "question": "List the Title and Developers of all games ordered by units sold from large to small.",
        "correctness": 1,
        "gold_parse": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
        "question": "What are the titles and developers of all games, sorted by units sold descending?",
        "correctness": 1,
        "gold_parse": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC"
    },
    {
        "db_id": "video_game",
        "query": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
        "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'"
    },
    {
        "db_id": "video_game",
        "query": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
        "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Market_district FROM platform",
        "question": "What are the names and market districts of all platforms?",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Market_district FROM platform"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Market_district FROM platform",
        "question": "Return all platform names and corresponding market districts.",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Market_district FROM platform"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "What are the names and id of platforms whose download rank is 1?",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Return the names and ids of all platforms with the download rank of 1.",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
        "question": "What are the maximum and minimum rank of the year of players.",
        "correctness": 1,
        "gold_parse": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player"
    },
    {
        "db_id": "video_game",
        "query": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
        "question": "Give the maximum and minimum rank of the year across all players.",
        "correctness": 1,
        "gold_parse": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player"
    },
    {
        "db_id": "video_game",
        "query": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
        "question": "How many players have rank of the year smaller than 3?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3"
    },
    {
        "db_id": "video_game",
        "query": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
        "question": "Count the number of players that have a rank of year of at most 3.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Player_name FROM player ORDER BY Player_name ASC",
        "question": "List all player names in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player ORDER BY Player_name ASC"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Player_name FROM player ORDER BY Player_name ASC",
        "question": "What are the names of all players in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player ORDER BY Player_name ASC"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
        "question": "List names and colleges of all players in descending order of rank of the year.",
        "correctness": 1,
        "gold_parse": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
        "question": "What are the names and colleges of all players, ordered by rank of year descending?",
        "correctness": 1,
        "gold_parse": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC"
    },
    {
        "db_id": "video_game",
        "query": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
        "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
        "correctness": 1,
        "gold_parse": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
        "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "question": "Show the distinct developer of games played by players that go to college \"Auburn\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "question": "What are the different developers of games that are played by players that attend Auburn college?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "question": "Return the average number of units sold in millions among games played by players who have the position Guard.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
        "question": "Please list the title and platform name of games.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID"
    },
    {
        "db_id": "video_game",
        "query": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
        "question": "What are the titles and platform names of all games?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID"
    },
    {
        "db_id": "video_game",
        "query": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
        "question": "Please list the title of games with platforms that have market district in Asia or USA.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
        "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
        "question": "List the name of each franchise and the number of games belonging to that franchise.",
        "correctness": 1,
        "gold_parse": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
        "question": "How many games are there from each Franchise?",
        "correctness": 1,
        "gold_parse": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the name of franchise that have the most number of games.",
        "correctness": 1,
        "gold_parse": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which franchise has the most games?",
        "correctness": 1,
        "gold_parse": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
        "question": "List the names of franchises that have at least two games.",
        "correctness": 1,
        "gold_parse": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
        "question": "What are the names of franchises that have two or more games?",
        "correctness": 1,
        "gold_parse": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
        "question": "List the name of players that do not play any game.",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
        "question": "What are the names of players who do not play any games?",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)"
    },
    {
        "db_id": "video_game",
        "query": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT DISTINCT Franchise FROM game",
        "question": "Show all distinct franchises of games.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Franchise FROM game"
    },
    {
        "db_id": "video_game",
        "query": "SELECT DISTINCT Franchise FROM game",
        "question": "What are all the distinct franchises?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Franchise FROM game"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "question": "Show the title of games that are not played by any player who is in the Guard position.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "question": "What are the titles of games not played by any players who play the Guard position?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\""
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
        "question": "list all the names of press in descending order of the profit of the year.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press ORDER BY Year_Profits_billion DESC"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
        "question": "Sorted all the press by year profits in descending order, and return press names.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press ORDER BY Year_Profits_billion DESC"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
        "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
        "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
        "question": "what are the average and maximum profit of a year for all presses?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
        "question": "Find the average and maximum yearly profit for each press.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
        "question": "Find the name of the publisher whose monthly profit is the highest.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
        "question": "Which press has the largest monthly profit? Give me the press name.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
        "question": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
        "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) FROM author WHERE age  <  30",
        "question": "how many authors are under age 30?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM author WHERE age  <  30"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) FROM author WHERE age  <  30",
        "question": "Count the number of authors of age below 30.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM author WHERE age  <  30"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
        "question": "find the average age of authors for each gender.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  gender FROM author GROUP BY gender"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
        "question": "For each gender, return gender and the average age of authors.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  gender FROM author GROUP BY gender"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
        "question": "find the number of authors who are older than 30 for each gender.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
        "question": "How many authors are of age above 30 for each gender?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender"
    },
    {
        "db_id": "book_press",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "question": "List all book titles in the order of their release date from the most recent to the past.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book ORDER BY release_date DESC"
    },
    {
        "db_id": "book_press",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "question": "Sort all the books in descending order of release date, and return the book titles.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book ORDER BY release_date DESC"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
        "question": "Find the number of books for each series.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  book_series FROM book GROUP BY book_series"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
        "question": "How many books does each book series have? Return the counts and book series.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  book_series FROM book GROUP BY book_series"
    },
    {
        "db_id": "book_press",
        "query": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
        "question": "Find the titles and publish dates of the top 5 best sale books.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5"
    },
    {
        "db_id": "book_press",
        "query": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
        "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5"
    },
    {
        "db_id": "book_press",
        "query": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
        "question": "Find the book series that have some book selling more than 1000 and some book less 500.",
        "correctness": 1,
        "gold_parse": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500"
    },
    {
        "db_id": "book_press",
        "query": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
        "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?",
        "correctness": 1,
        "gold_parse": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
        "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
        "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)",
        "question": "Find the name and age of the authors who do not have any book in the record.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)"
    },
    {
        "db_id": "book_press",
        "query": "select name from author where author_id not in (select author_id from book)",
        "question": "Which authors in the record have not published any books ? Give me their names .",
        "correctness": 1,
        "gold_parse": "select name from author where author_id not in (select author_id from book)"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
        "question": "Find the names of authors who have more than one book in the database.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
        "question": "Which authors have published more than 1 book according to the database? Give me their names.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
        "question": "Find the title, author name, and publisher name for the top 3 best sales books.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
        "question": "What are the 3 best selling books? Show their titles, author names, and press names.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3"
    },
    {
        "db_id": "book_press",
        "query": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
        "question": "Find the name and total book sale amount of each press.",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id"
    },
    {
        "db_id": "book_press",
        "query": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
        "question": "What are the name and total book sale amount of each press?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
        "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
        "question": "For each press, return its name and the number of books that have sale amount above 1000.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
        "question": "What is the name of the author of best selling book?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
        "question": "Who wrote the best selling book? Give me the author name.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
        "question": "find the name and gender of the author who published the most books.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Who wrote the largest number of books? Give me the author name and gender.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
        "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
        "question": "Which authors have never published under the \"Accor\" press? Give me their names.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
        "question": "Find the name and the yearly profit in billion for press that published more than two books.",
        "correctness": 1,
        "gold_parse": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
        "question": "Find the press that published more than two books, and return its name and yearly profit in billion.",
        "correctness": 1,
        "gold_parse": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Authors",
        "question": "How many authors do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Authors"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT author_name FROM Authors",
        "question": "Show all author names.",
        "correctness": 1,
        "gold_parse": "SELECT author_name FROM Authors"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT author_name ,  other_details FROM Authors",
        "question": "Show the names and other details for all authors.",
        "correctness": 1,
        "gold_parse": "SELECT author_name ,  other_details FROM Authors"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT other_details FROM Authors WHERE author_name  =  \"Addison Denesik\"",
        "question": "Show the other details for the author Addison Denesik.",
        "correctness": 1,
        "gold_parse": "SELECT other_details FROM Authors WHERE author_name  =  \"Addison Denesik\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Documents",
        "question": "Show the number of documents.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Documents"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT author_name FROM Documents WHERE document_id  =  4",
        "question": "Who is the author of the document with id 4?",
        "correctness": 1,
        "gold_parse": "SELECT author_name FROM Documents WHERE document_id  =  4"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT author_name FROM Documents WHERE document_name  =  \"Travel to Brazil\"",
        "question": "Who is the author of the document \"Travel to Brazil\"?",
        "correctness": 1,
        "gold_parse": "SELECT author_name FROM Documents WHERE document_name  =  \"Travel to Brazil\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Documents WHERE author_name  =  \"Era Kerluke\"",
        "question": "How many documents does has the author Era Kerluke written?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Documents WHERE author_name  =  \"Era Kerluke\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT document_name ,  document_description FROM Documents",
        "question": "Show the names and descriptions for all documents.",
        "correctness": 1,
        "gold_parse": "SELECT document_name ,  document_description FROM Documents"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT document_id ,  document_name FROM Documents WHERE author_name  =  \"Bianka Cummings\"",
        "question": "Show the ids and names for all documents by author Bianka Cummings.",
        "correctness": 1,
        "gold_parse": "SELECT document_id ,  document_name FROM Documents WHERE author_name  =  \"Bianka Cummings\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  \"Travel to China\"",
        "question": "Show the author name and details for the document \"Travel to China\".",
        "correctness": 1,
        "gold_parse": "SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  \"Travel to China\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT author_name ,  count(*) FROM Documents GROUP BY author_name",
        "question": "Show all author names and number of documents corresponding to each.",
        "correctness": 1,
        "gold_parse": "SELECT author_name ,  count(*) FROM Documents GROUP BY author_name"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the author with most number of documents?",
        "correctness": 1,
        "gold_parse": "SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2",
        "question": "Show the names for authors with at least two documents.",
        "correctness": 1,
        "gold_parse": "SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Business_processes",
        "question": "How many business processes do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Business_processes"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9",
        "question": "Show the next process id, process name, process description for process with id 9.",
        "correctness": 1,
        "gold_parse": "SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What is the process name for the next process of the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Process_outcomes",
        "question": "Show the number of process outcomes.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Process_outcomes"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes",
        "question": "List the codes and descriptions for all process outcomes.",
        "correctness": 1,
        "gold_parse": "SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  \"working\"",
        "question": "What is the description for the process outcome code working?",
        "correctness": 1,
        "gold_parse": "SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  \"working\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Process_status",
        "question": "Show the number of process status.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Process_status"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_status_code ,  process_status_description FROM Process_status",
        "question": "List the codes and descriptions for all process status.",
        "correctness": 1,
        "gold_parse": "SELECT process_status_code ,  process_status_description FROM Process_status"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_status_description FROM Process_status WHERE process_status_code  =  \"ct\"",
        "question": "What is the description for process status code ct?",
        "correctness": 1,
        "gold_parse": "SELECT process_status_description FROM Process_status WHERE process_status_code  =  \"ct\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Staff",
        "question": "How many staff do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Staff"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT staff_id ,  staff_details FROM Staff",
        "question": "Show the ids and details for all staff.",
        "correctness": 1,
        "gold_parse": "SELECT staff_id ,  staff_details FROM Staff"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT staff_details FROM Staff WHERE staff_id  =  100",
        "question": "What are the details for the staff member with id 100.",
        "correctness": 1,
        "gold_parse": "SELECT staff_details FROM Staff WHERE staff_id  =  100"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Ref_staff_roles",
        "question": "Show the number of staff roles.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Ref_staff_roles"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles",
        "question": "List the codes and descriptions for all staff roles.",
        "correctness": 1,
        "gold_parse": "SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  \"HR\"",
        "question": "What is the description for staff role code HR?",
        "correctness": 1,
        "gold_parse": "SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  \"HR\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(DISTINCT document_id) FROM Documents_processes",
        "question": "How many documents have a process?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT document_id) FROM Documents_processes"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT DISTINCT process_id FROM Documents_processes",
        "question": "List all process ids with a document.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT process_id FROM Documents_processes"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes",
        "question": "Show all document ids without a process.",
        "correctness": 1,
        "gold_parse": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes",
        "question": "List all process ids with no document.",
        "correctness": 1,
        "gold_parse": "SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0",
        "question": "What is the process outcome description and process status description for the document with id 0?",
        "correctness": 1,
        "gold_parse": "SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  \"Travel to Brazil\"",
        "question": "What is the process name for the document \"Travel to Brazil\"?",
        "correctness": 1,
        "gold_parse": "SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  \"Travel to Brazil\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id",
        "question": "Show all process ids and the number of documents in each process.",
        "correctness": 1,
        "gold_parse": "SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9",
        "question": "How many staff are the document with id 0 and process with id 9.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT staff_id ,  count(*) FROM Staff_in_processes GROUP BY staff_id",
        "question": "Show all staff ids and the number of document processes for each staff.",
        "correctness": 1,
        "gold_parse": "SELECT staff_id ,  count(*) FROM Staff_in_processes GROUP BY staff_id"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT staff_role_code ,  count(*) FROM Staff_in_processes GROUP BY staff_role_code",
        "question": "Show all staff role codes and the number of document processes for each role.",
        "correctness": 1,
        "gold_parse": "SELECT staff_role_code ,  count(*) FROM Staff_in_processes GROUP BY staff_role_code"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3",
        "question": "How many different roles does the staff with id 3 have?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Agencies",
        "question": "How many agencies do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Agencies"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Agencies",
        "question": "Count the number of agencies.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Agencies"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT agency_id ,  agency_details FROM Agencies",
        "question": "Show all agency ids and details.",
        "correctness": 1,
        "gold_parse": "SELECT agency_id ,  agency_details FROM Agencies"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT agency_id ,  agency_details FROM Agencies",
        "question": "What are all the agency ids and details?",
        "correctness": 1,
        "gold_parse": "SELECT agency_id ,  agency_details FROM Agencies"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Clients",
        "question": "Show the number of clients.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Clients"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Clients",
        "question": "How many clients are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Clients"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id ,  client_details FROM Clients",
        "question": "List all client ids and client details.",
        "correctness": 1,
        "gold_parse": "SELECT client_id ,  client_details FROM Clients"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id ,  client_details FROM Clients",
        "question": "What are all the client ids and details?",
        "correctness": 1,
        "gold_parse": "SELECT client_id ,  client_details FROM Clients"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
        "question": "Show agency ids and the number of clients for each agency.",
        "correctness": 1,
        "gold_parse": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
        "question": "How many clients does each agency have?",
        "correctness": 1,
        "gold_parse": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the agency id and details with most number of clients?",
        "correctness": 1,
        "gold_parse": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the agency id and details for the agency with the greatest number of clients.",
        "correctness": 1,
        "gold_parse": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
        "question": "Show agency ids and details with at least 2 clients.",
        "correctness": 1,
        "gold_parse": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
        "question": "What are the agency ids and details agencies with at least 2 clients?",
        "correctness": 1,
        "gold_parse": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "question": "Show agency details for client with detail 'Mac'.",
        "correctness": 1,
        "gold_parse": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "question": "What are the agency details for clients with the detail Mac?",
        "correctness": 1,
        "gold_parse": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
        "question": "Show details for all clients and the details of their corresponding agents.",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
        "question": "What are the client details for each client and the corresponding details of their agencies?",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
        "question": "Show all sic codes and the number of clients with each code.",
        "correctness": 1,
        "gold_parse": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
        "question": "How many clients are there for each sic code?",
        "correctness": 1,
        "gold_parse": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
        "question": "Show all client ids and details with sic code \"Bad\".",
        "correctness": 1,
        "gold_parse": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
        "question": "What are the client ideas and details for clients with the sic code Bad?",
        "correctness": 1,
        "gold_parse": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
        "question": "Show all agency ids and details for agencies with a client.",
        "correctness": 1,
        "gold_parse": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
        "question": "What are the agency ids and agency details for all agencies who have a client?",
        "correctness": 1,
        "gold_parse": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
        "question": "Show all agency ids without any client.",
        "correctness": 1,
        "gold_parse": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
        "question": "What are ids of agencies that do not have any clients?",
        "correctness": 1,
        "gold_parse": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Invoices",
        "question": "How many invoices do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Invoices"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Invoices",
        "question": "Count the number of invoices.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Invoices"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
        "question": "Show ids, status codes, and details for all invoices for clients.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
        "question": "What are the ids, statuses, and details for all invoices?",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
        "question": "Show all client ids and the number of invoices for each client.",
        "correctness": 1,
        "gold_parse": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
        "question": "How many invoices are there for each client id?",
        "correctness": 1,
        "gold_parse": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
        "question": "List the client id and detail with most number of invoices.",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the client id and details for the client with the most invoices?",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
        "question": "What are client ids for clients with at least 2 invoices.",
        "correctness": 1,
        "gold_parse": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
        "question": "Return the client ids for clients with two or more invoices?",
        "correctness": 1,
        "gold_parse": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
        "question": "Show all invoice status codes and the number of invoices with each status.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
        "question": "How many invoices are there for each status code?",
        "correctness": 1,
        "gold_parse": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the invoice status code with most number of invoices.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the invoice status that has the most invoices.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
        "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
        "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_type ,  other_details FROM meetings",
        "question": "List all meeting type codes and details.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_type ,  other_details FROM meetings"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_type ,  other_details FROM meetings",
        "question": "What are all meeting types and other details?",
        "correctness": 1,
        "gold_parse": "SELECT meeting_type ,  other_details FROM meetings"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
        "question": "Show all meeting outcomes and purposes.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
        "question": "What are all meeting outcomes and purposes?",
        "correctness": 1,
        "gold_parse": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
        "question": "Show all payment ids and details for invoices whose status is 'Working'.",
        "correctness": 1,
        "gold_parse": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
        "question": "What are all payment ids and payment details for invoices with status Working?",
        "correctness": 1,
        "gold_parse": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "Show all invoice ids and statuses without a payment.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "What are the invoice ids and statuses for invoices without a payment?",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Payments",
        "question": "How many payments do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Payments"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Payments",
        "question": "Count the number of payments.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Payments"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
        "question": "List all payment ids and its corresponding invoice ids and details.",
        "correctness": 1,
        "gold_parse": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
        "question": "What are the payment ids, invoice ids, and payment details for all payments?",
        "correctness": 1,
        "gold_parse": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "Show all the different invoice ids and statuses of the payments",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "What are the distinct invoice ids and statuses for all payments?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
        "question": "Show all invoice ids and the number of payments for each invoice.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
        "question": "How many payments are there for each invoice?",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the invoice id, status code, and details for the invoice with most number of payments.",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the invoice ids, statuses, and details for invoices with the most payments?",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Staff",
        "question": "How many staff do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Staff"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Staff",
        "question": "Count the number of staff.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Staff"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
        "question": "Show the agency ids and the number of staff in each agent?",
        "correctness": 1,
        "gold_parse": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
        "question": "Return the agency ids and number of staff in each.",
        "correctness": 1,
        "gold_parse": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the agent id and details for the agency with most staff?",
        "correctness": 1,
        "gold_parse": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and detail for the agency with the most staff.",
        "correctness": 1,
        "gold_parse": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
        "question": "Show meeting outcome codes and the number of meeting in each outcome.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
        "question": "How many meetings had each meeting outcome?",
        "correctness": 1,
        "gold_parse": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
        "question": "List the client ids and the number of meeting for each client.",
        "correctness": 1,
        "gold_parse": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
        "question": "How many meetings are there for each client id?",
        "correctness": 1,
        "gold_parse": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
        "question": "Show the meeting type codes and the number of meeting for each client.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
        "question": "How many meetings are there for each meeting type?",
        "correctness": 1,
        "gold_parse": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
        "correctness": 1,
        "gold_parse": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
        "correctness": 1,
        "gold_parse": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "question": "Show the meeting ids and the number of staff in each meeting.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "question": "Count the number of staff in each meeting by meeting id.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
        "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
        "correctness": 1,
        "gold_parse": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
        "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
        "correctness": 1,
        "gold_parse": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
        "question": "How many staff have attended a meeting?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
        "question": "Return the number of distinct staff who have attended a meeting?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
        "question": "How many staff did not attend any meeting?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
        "question": "Count the number of staff who did not attend any meeting.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
        "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
        "correctness": 1,
        "gold_parse": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
        "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
        "correctness": 1,
        "gold_parse": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
        "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
        "correctness": 1,
        "gold_parse": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
        "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
        "correctness": 1,
        "gold_parse": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id"
    },
    {
        "db_id": "department_management",
        "query": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  born_state ,  age FROM head ORDER BY age"
    },
    {
        "db_id": "department_management",
        "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
        "question": "List the creation year, name and budget of each department.",
        "correctness": 1,
        "gold_parse": "SELECT creation ,  name ,  budget_in_billions FROM department"
    },
    {
        "db_id": "department_management",
        "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
        "question": "What are the maximum and minimum budget of the departments?",
        "correctness": 1,
        "gold_parse": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department"
    },
    {
        "db_id": "department_management",
        "query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "correctness": 1,
        "gold_parse": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15"
    },
    {
        "db_id": "department_management",
        "query": "SELECT name FROM head WHERE born_state != 'California'",
        "question": "What are the names of the heads who are born outside the California state?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM head WHERE born_state != 'California'"
    },
    {
        "db_id": "department_management",
        "query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'"
    },
    {
        "db_id": "department_management",
        "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
        "question": "What are the names of the states where at least 3 heads were born?",
        "correctness": 1,
        "gold_parse": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3"
    },
    {
        "db_id": "department_management",
        "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "question": "In which year were most departments established?",
        "correctness": 1,
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "department_management",
        "query": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'"
    },
    {
        "db_id": "department_management",
        "query": "SELECT count(DISTINCT temporary_acting) FROM management",
        "question": "How many acting statuses are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT temporary_acting) FROM management"
    },
    {
        "db_id": "department_management",
        "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
        "question": "How many departments are led by heads who are not mentioned?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);"
    },
    {
        "db_id": "department_management",
        "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "question": "What are the distinct ages of the heads who are acting?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'"
    },
    {
        "db_id": "department_management",
        "query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "correctness": 1,
        "gold_parse": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'"
    },
    {
        "db_id": "department_management",
        "query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
        "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "correctness": 1,
        "gold_parse": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1"
    },
    {
        "db_id": "department_management",
        "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "correctness": 1,
        "gold_parse": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
    },
    {
        "db_id": "farm",
        "query": "SELECT count(*) FROM farm",
        "question": "How many farms are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM farm"
    },
    {
        "db_id": "farm",
        "query": "SELECT count(*) FROM farm",
        "question": "Count the number of farms.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM farm"
    },
    {
        "db_id": "farm",
        "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "question": "List the total number of horses on farms in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "correctness": 1,
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
        "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
        "correctness": 1,
        "gold_parse": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'"
    },
    {
        "db_id": "farm",
        "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
        "question": "Return the hosts of competitions for which the theme is not Aliens?",
        "correctness": 1,
        "gold_parse": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'"
    },
    {
        "db_id": "farm",
        "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
        "question": "What are the themes of farm competitions sorted by year in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
        "question": "Return the themes of farm competitions, sorted by year ascending.",
        "correctness": 1,
        "gold_parse": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC"
    },
    {
        "db_id": "farm",
        "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
    },
    {
        "db_id": "farm",
        "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
    },
    {
        "db_id": "farm",
        "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "question": "What are the maximum and minimum number of cows across all farms.",
        "correctness": 1,
        "gold_parse": "SELECT max(Cows) ,  min(Cows) FROM farm"
    },
    {
        "db_id": "farm",
        "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "question": "Return the maximum and minimum number of cows across all farms.",
        "correctness": 1,
        "gold_parse": "SELECT max(Cows) ,  min(Cows) FROM farm"
    },
    {
        "db_id": "farm",
        "query": "SELECT count(DISTINCT Status) FROM city",
        "question": "How many different statuses do cities have?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Status) FROM city"
    },
    {
        "db_id": "farm",
        "query": "SELECT count(DISTINCT Status) FROM city",
        "question": "Count the number of different statuses.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Status) FROM city"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "List official names of cities in descending order of population.",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city ORDER BY Population DESC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "What are the official names of cities, ordered descending by population?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city ORDER BY Population DESC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
        "question": "List the official name and status of the city with the largest population.",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
        "question": "What is the official name and status of the city with the most residents?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
        "question": "Show the years and the official names of the host cities of competitions.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
        "question": "Give the years and official names of the cities of each competition.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID"
    },
    {
        "db_id": "farm",
        "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
        "question": "Show the official names of the cities that have hosted more than one competition.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "farm",
        "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
        "question": "What are the official names of cities that have hosted more than one competition?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "farm",
        "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the status of the city that has hosted the greatest number of competitions.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the status of the city that has hosted the most competitions?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "question": "Please show the different statuses of cities and the average population of cities with each status.",
        "correctness": 1,
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "question": "What are the statuses and average populations of each city?",
        "correctness": 1,
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "question": "Please show the different statuses, ordered by the number of cities that have each.",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "question": "Return the different statuses of cities, ascending by frequency.",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common type of Status across cities.",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common status across all cities?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
        "question": "List the official names of cities that have not held any competition.",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
        "question": "What are the official names of cities that have not hosted a farm competition?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
        "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
        "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
        "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
        "question": "What are the official names of cities that have population over 1500 or less than 500?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500"
    },
    {
        "db_id": "farm",
        "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
        "question": "Show the census ranking of cities whose status are not \"Village\".",
        "correctness": 1,
        "gold_parse": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\""
    },
    {
        "db_id": "farm",
        "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
        "question": "What are the census rankings of cities that do not have the status \"Village\"?",
        "correctness": 1,
        "gold_parse": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "which course has most number of registered students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the course with the most registered students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "question": "what is id of students who registered some courses but the least number of courses in these students?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "question": "what are the first name and last name of all candidates?",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "question": "What are the first and last names of all the candidates?",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "question": "List the id of students who never attends courses?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "question": "What are the  ids of every student who has never attended a course?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_attendance",
        "question": "List the id of students who attended some courses?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_attendance"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_attendance",
        "question": "What are the ids of all students who have attended at least one course?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_attendance"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
        "question": "What are the ids of all students for courses and what are the names of those courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
        "question": "What is detail of the student who most recently registered course?",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
        "question": "What details do we have on the students who registered for courses most recently?",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "question": "How many students attend course English?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "question": "How many students are attending English courses?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
        "question": "How many courses do the student whose id is 171 attend?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
        "question": "How many courses does the student with id 171 actually attend?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "correctness": 1,
        "gold_parse": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "question": "What is the id of the candidate whose email is stanley.monahan@example.org?",
        "correctness": 1,
        "gold_parse": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "question": "Find id of the candidate who most recently accessed the course?",
        "correctness": 1,
        "gold_parse": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "question": "What is the id of the candidate who most recently accessed the course?",
        "correctness": 1,
        "gold_parse": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is detail of the student who registered the most number of courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the details of the student who registered for the most number of courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "question": "For every student who is registered for some course, how many courses are they registered for?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
        "question": "How many registed students do each course have? List course name and the number of their registered students?",
        "correctness": 1,
        "gold_parse": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
        "question": "For each course id, how many students are registered and what are the course names?",
        "correctness": 1,
        "gold_parse": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "correctness": 1,
        "gold_parse": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "question": "What are the ids of the candidates that have an outcome code of Pass?",
        "correctness": 1,
        "gold_parse": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
        "correctness": 1,
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
        "correctness": 1,
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "question": "What are the id of students who registered course 301?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "question": "What are the ids of the students who registered for course 301?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "question": "What is the id of the student who most recently registered course 301?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "question": "What are the ids of the students who registered for course 301 most recently?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "question": "Find distinct cities of addresses of people?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "question": "What are the different cities where people live?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "Find distinct cities of address of students?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "What are the different cities where students live?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT course_name FROM courses ORDER BY course_name",
        "question": "List the names of courses in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM courses ORDER BY course_name"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT course_name FROM courses ORDER BY course_name",
        "question": "What are the names of the courses in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM courses ORDER BY course_name"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT first_name FROM people ORDER BY first_name",
        "question": "List the first names of people in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT first_name FROM people ORDER BY first_name"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT first_name FROM people ORDER BY first_name",
        "question": "What are the first names of the people in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT first_name FROM people ORDER BY first_name"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "question": "What are the id of students who registered courses or attended courses?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "question": "What are the ids of the students who either registered or attended a course?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "question": "Find the id of courses which are registered or attended by student whose id is 121?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "question": "What are all info of students who registered courses but not attended courses?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "question": "What are all details of the students who registered but did not attend any course?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "question": "List the id of students who registered course statistics in the order of registration date.",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "question": "What are the ids of the students who registered course statistics by order of registration date?",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
        "question": "List the id of students who attended  statistics courses in the order of attendance date.",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
        "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "correctness": 1,
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "correctness": 1,
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT name FROM station WHERE lat  <  37.5",
        "question": "What are the names of stations that have latitude lower than 37.5?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT name FROM station WHERE lat  <  37.5",
        "question": "What are the names of all stations with a latitude smaller than 37.5?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "question": "For each city, return the highest latitude among its stations.",
        "correctness": 1,
        "gold_parse": "SELECT city ,  max(lat) FROM station GROUP BY city"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "question": "For each city, what is the highest latitude for its stations?",
        "correctness": 1,
        "gold_parse": "SELECT city ,  max(lat) FROM station GROUP BY city"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "question": "Give me the start station and end station for the trips with the three oldest id.",
        "correctness": 1,
        "gold_parse": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "question": "What is the station station and end station for the trips with the three smallest ids?",
        "correctness": 1,
        "gold_parse": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "correctness": 1,
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "question": "What is the average latitude and longitude in San Jose?",
        "correctness": 1,
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "question": "What is the id of the trip that has the shortest duration?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip ORDER BY duration LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "question": "What is the id of the shortest trip?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip ORDER BY duration LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "correctness": 1,
        "gold_parse": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
        "question": "What is the total and maximum duration for all trips with the bike id 636?",
        "correctness": 1,
        "gold_parse": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "question": "For each zip code, return the average mean temperature of August there.",
        "correctness": 1,
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT count(DISTINCT bike_id) FROM trip",
        "question": "From the trip record, find the number of unique bikes.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT bike_id) FROM trip"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT count(DISTINCT bike_id) FROM trip",
        "question": "How many different bike ids are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT bike_id) FROM trip"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT count(DISTINCT city) FROM station",
        "question": "What is the number of distinct cities the stations are located at?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT city) FROM station"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT count(DISTINCT city) FROM station",
        "question": "How many different cities have these stations?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT city) FROM station"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "question": "How many stations does Mountain View city has?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "question": "How many stations are in Mountain View?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "question": "Return the unique name for stations that have ever had 7 bikes available.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "question": "What are the different names for each station that has ever had 7 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "correctness": 1,
        "gold_parse": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What are the start station's name and id for the one that had the most start trips in August?",
        "correctness": 1,
        "gold_parse": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which bike traveled the most often in zip code 94002?",
        "correctness": 1,
        "gold_parse": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the id of the bike that traveled the most in 94002?",
        "correctness": 1,
        "gold_parse": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "question": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
        "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "correctness": 1,
        "gold_parse": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
        "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "correctness": 1,
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "correctness": 1,
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "question": "What is the zip code that has the lowest average mean sea level pressure?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "question": "What is the average bike availability in stations that are not located in Palo Alto?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "question": "What is the average bike availablility for stations not in Palo Alto?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "question": "What is the average longitude of stations that never had bike availability more than 10?",
        "correctness": 1,
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "question": "When and in what zip code did max temperature reach 80?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "correctness": 1,
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "question": "For each trip, return its ending station's installation date.",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "question": "What is the installation date for each ending station on all the trips?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "question": "What is the id of the trip that started from the station with the highest dock count?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"",
        "question": "Count the number of trips that did not end in San Francisco city.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
        "question": "How many trips did not end in San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
        "correctness": 1,
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "question": "On which day has it neither been foggy nor rained in the zip code of 94107?",
        "correctness": 1,
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "question": "What are the name, latitude, and city of the station with the lowest latitude?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "question": "What is the name, latitude, and city of the station that is located the furthest South?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
        "question": "List the name and the number of stations for all the cities that have at least 15 stations.",
        "correctness": 1,
        "gold_parse": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
        "question": "What is the name of every city that has at least 15 stations and how many stations does it have?",
        "correctness": 1,
        "gold_parse": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "question": "Find the ids and names of stations from which at least 200 trips started.",
        "correctness": 1,
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
        "correctness": 1,
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "question": "For each zip code, select all those that have an average mean visiblity below 10.",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "correctness": 1,
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "question": "For each city, list their names in decreasing order by their highest station latitude.",
        "correctness": 1,
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "correctness": 1,
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
        "question": "What are the ids and durations of the trips with the top 3 durations?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
        "question": "What are the ids of the trips that lasted the longest and how long did they last?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
        "question": "For each station, return its longitude and the average duration of trips that started from the station.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
        "question": "For each start station id, what is its name, longitude and average duration of trips started there?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
        "question": "List all the distinct stations from which a trip of duration below 100 started.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
        "question": "What are all the different start station names for a trip that lasted less than 100?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "question": "Find all the zip codes in which the max dew point have never reached 70.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "question": "What are all the different zip codes that have a maximum dew point that was always below 70?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "correctness": 1,
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "question": "What are the dates that have an average sea level pressure between 30.3 and 31?",
        "correctness": 1,
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.",
        "correctness": 1,
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "question": "What are the days that had the smallest temperature range, and what was that range?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
        "question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips",
        "correctness": 1,
        "gold_parse": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "question": "What is the average latitude and longitude of the starting points of all trips?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "question": "What is the average latitude and longitude of all starting stations for the trips?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id"
    },
    {
        "db_id": "book_2",
        "query": "SELECT count(*) FROM book",
        "question": "How many books are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM book"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Writer FROM book ORDER BY Writer ASC",
        "question": "List the writers of the books in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Writer FROM book ORDER BY Writer ASC"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Title FROM book ORDER BY Issues ASC",
        "question": "List the titles of the books in ascending order of issues.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM book ORDER BY Issues ASC"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"",
        "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\""
    },
    {
        "db_id": "book_2",
        "query": "SELECT Title ,  Issues FROM book",
        "question": "What are the title and issues of the books?",
        "correctness": 1,
        "gold_parse": "SELECT Title ,  Issues FROM book"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publication_Date FROM publication ORDER BY Price DESC",
        "question": "What are the dates of publications in descending order of price?",
        "correctness": 1,
        "gold_parse": "SELECT Publication_Date FROM publication ORDER BY Price DESC"
    },
    {
        "db_id": "book_2",
        "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
        "question": "What are the distinct publishers of publications with price higher than 5000000?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
        "question": "List the publisher of the publication with the highest price.",
        "correctness": 1,
        "gold_parse": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
        "question": "List the publication dates of publications with 3 lowest prices.",
        "correctness": 1,
        "gold_parse": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3"
    },
    {
        "db_id": "book_2",
        "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
        "question": "Show the title and publication dates of books.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID"
    },
    {
        "db_id": "book_2",
        "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000",
        "question": "Show writers who have published a book with price more than 4000000.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000"
    },
    {
        "db_id": "book_2",
        "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC",
        "question": "Show the titles of books in descending order of publication price.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
        "question": "Show publishers that have more than one publication.",
        "correctness": 1,
        "gold_parse": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "question": "Show different publishers together with the number of publications they have.",
        "correctness": 1,
        "gold_parse": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common publication date.",
        "correctness": 1,
        "gold_parse": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
        "question": "List the writers who have written more than one book.",
        "correctness": 1,
        "gold_parse": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
        "question": "List the titles of books that are not published.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000",
        "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
        "correctness": 1,
        "gold_parse": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000"
    },
    {
        "db_id": "book_2",
        "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
        "question": "What is the number of distinct publication dates?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT Publication_Date) FROM publication"
    },
    {
        "db_id": "book_2",
        "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
        "question": "How many distinct publication dates are there in our record?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT Publication_Date) FROM publication"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
        "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
        "correctness": 1,
        "gold_parse": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\""
    },
    {
        "db_id": "musical",
        "query": "SELECT count(*) FROM actor",
        "question": "How many actors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM actor"
    },
    {
        "db_id": "musical",
        "query": "SELECT count(*) FROM actor",
        "question": "Count the number of actors.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM actor"
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM actor ORDER BY Name ASC",
        "question": "List the name of actors in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM actor ORDER BY Name ASC"
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM actor ORDER BY Name ASC",
        "question": "What are the names of actors, ordered alphabetically?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM actor ORDER BY Name ASC"
    },
    {
        "db_id": "musical",
        "query": "SELECT Character ,  Duration FROM actor",
        "question": "What are the characters and duration of actors?",
        "correctness": 1,
        "gold_parse": "SELECT Character ,  Duration FROM actor"
    },
    {
        "db_id": "musical",
        "query": "SELECT Character ,  Duration FROM actor",
        "question": "Return the characters and durations for each actor.",
        "correctness": 1,
        "gold_parse": "SELECT Character ,  Duration FROM actor"
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM actor WHERE Age != 20",
        "question": "List the name of actors whose age is not 20.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20"
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM actor WHERE Age != 20",
        "question": "What are the names of actors who are not 20 years old?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20"
    },
    {
        "db_id": "musical",
        "query": "SELECT Character FROM actor ORDER BY age DESC",
        "question": "What are the characters of actors in descending order of age?",
        "correctness": 1,
        "gold_parse": "SELECT Character FROM actor ORDER BY age DESC"
    },
    {
        "db_id": "musical",
        "query": "SELECT Character FROM actor ORDER BY age DESC",
        "question": "Return the characters for actors, ordered by age descending.",
        "correctness": 1,
        "gold_parse": "SELECT Character FROM actor ORDER BY age DESC"
    },
    {
        "db_id": "musical",
        "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "question": "What is the duration of the oldest actor?",
        "correctness": 1,
        "gold_parse": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "musical",
        "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "question": "Return the duration of the actor with the greatest age.",
        "correctness": 1,
        "gold_parse": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\""
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
        "question": "Return the names of musicals who have the nominee Bob Fosse.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\""
    },
    {
        "db_id": "musical",
        "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
        "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\""
    },
    {
        "db_id": "musical",
        "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
        "question": "Return the different nominees of musicals that have an award that is not the Tony Award.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\""
    },
    {
        "db_id": "musical",
        "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
        "question": "Show names of actors and names of musicals they are in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID"
    },
    {
        "db_id": "musical",
        "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
        "question": "What are the names of actors and the musicals that they are in?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID"
    },
    {
        "db_id": "musical",
        "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
        "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\""
    },
    {
        "db_id": "musical",
        "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
        "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\""
    },
    {
        "db_id": "musical",
        "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC",
        "question": "Show names of actors in descending order of the year their musical is awarded.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC"
    },
    {
        "db_id": "musical",
        "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC",
        "question": "What are the names of actors ordered descending by the year in which their musical was awarded?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC"
    },
    {
        "db_id": "musical",
        "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
    },
    {
        "db_id": "musical",
        "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "question": "How many actors have appeared in each musical?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
    },
    {
        "db_id": "musical",
        "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "question": "Show names of musicals which have at least three actors.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "musical",
        "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "question": "What are the names of musicals who have at 3 or more actors?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "correctness": 1,
        "gold_parse": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
        "question": "How many musicals has each nominee been nominated for?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "musical",
        "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common result of the musicals.",
        "correctness": 1,
        "gold_parse": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "musical",
        "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Return the most frequent result across all musicals.",
        "correctness": 1,
        "gold_parse": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "question": "List the nominees that have been nominated more than two musicals.",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "question": "Who are the nominees who have been nominated more than two times?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "question": "List the name of musicals that do not have actors.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "question": "What are the names of musicals who have no actors?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT email FROM user_profiles WHERE name  =  'Mary'",
        "question": "Find the emails of the user named \"Mary\".",
        "correctness": 1,
        "gold_parse": "SELECT email FROM user_profiles WHERE name  =  'Mary'"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'",
        "question": "What is the partition id of the user named \"Iron Man\".",
        "correctness": 1,
        "gold_parse": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT count(*) FROM user_profiles",
        "question": "How many users are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM user_profiles"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT count(*) FROM follows",
        "question": "How many followers does each user have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM follows"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT count(*) FROM follows GROUP BY f1",
        "question": "Find the number of followers for each user.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM follows GROUP BY f1"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT count(*) FROM tweets",
        "question": "Find the number of tweets in record.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM tweets"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT count(DISTINCT UID) FROM tweets",
        "question": "Find the number of users who posted some tweets.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT UID) FROM tweets"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "question": "Return the text of tweets about the topic 'intern'.",
        "correctness": 1,
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')",
        "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
        "question": "Find the name and email for the users who have more than one follower.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "question": "Find the names of users who have more than one tweet.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"",
        "question": "Find the id of users who are followed by Mary and Susan.",
        "correctness": 1,
        "gold_parse": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\""
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"",
        "question": "Find the id of users who are followed by Mary or Susan.",
        "correctness": 1,
        "gold_parse": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\""
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "question": "Find the name of the user who has the largest number of followers.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC",
        "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
        "question": "List the names of 5 users followed by the largest number of other users.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets ORDER BY createdate",
        "question": "List the text of all tweets in the order of date.",
        "correctness": 1,
        "gold_parse": "SELECT text FROM tweets ORDER BY createdate"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid",
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
        "question": "Find the average number of followers for the users who do not have any tweet.",
        "correctness": 1,
        "gold_parse": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "question": "Find the average number of followers for the users who had some tweets.",
        "correctness": 1,
        "gold_parse": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
        "question": "Find the maximum and total number of followers of all users.",
        "correctness": 1,
        "gold_parse": "SELECT max(followers) ,  sum(followers) FROM user_profiles"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "question": "Find the names of all the catalog entries.",
        "correctness": 1,
        "gold_parse": "SELECT distinct(catalog_entry_name) FROM catalog_contents"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "question": "What are all the catalog entry names?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(catalog_entry_name) FROM catalog_contents"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "What are the attribute data types with more than 3 attribute definitions?",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
        "question": "What is the attribute data type of the attribute with name \"Green\"?",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
        "question": "Find the attribute data type for the attribute named \"Green\".",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "Find the name and level of catalog structure with level between 5 and 10.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "correctness": 1,
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "question": "Find all the catalog publishers whose name contains \"Murray\"",
        "correctness": 1,
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "question": "Which catalog publishers have substring \"Murray\" in their names?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
        "question": "Which catalog publisher has published the most catalogs?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the catalog publisher that has the most catalogs.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "correctness": 1,
        "gold_parse": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "question": "What are the name and publication date of the catalogs with catalog level number above 5?",
        "correctness": 1,
        "gold_parse": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "correctness": 1,
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "question": "Find the entry names of the catalog with the attribute that have the most entries.",
        "correctness": 1,
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "question": "What is the level name of the cheapest catalog (in USD)?",
        "correctness": 1,
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "correctness": 1,
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "correctness": 1,
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "correctness": 1,
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "question": "What is the product with the highest height? Give me the catalog entry name.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "question": "Which catalog content has the highest height? Give me the catalog entry name.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "question": "Find the name of the product that has the smallest capacity.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "question": "Find the names of all the products whose stock number starts with \"2\".",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "question": "Find the names of catalog entries with level number 8.",
        "correctness": 1,
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "question": "What are the names of catalog entries with level number 8?",
        "correctness": 1,
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "correctness": 1,
        "gold_parse": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "correctness": 1,
        "gold_parse": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "question": "Find the dates on which more than one revisions were made.",
        "correctness": 1,
        "gold_parse": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "question": "On which days more than one revisions were made on catalogs.",
        "correctness": 1,
        "gold_parse": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT count(*) FROM catalog_contents",
        "question": "How many products are there in the records?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM catalog_contents"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT count(*) FROM catalog_contents",
        "question": "Find the total number of catalog contents.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM catalog_contents"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "question": "Name all the products with next entry ID greater than 8.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Aircraft",
        "question": "How many aircrafts do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Aircraft"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Aircraft",
        "question": "How many aircrafts exist in the database?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Aircraft"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name ,  distance FROM Aircraft",
        "question": "Show name and distance for all aircrafts.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  distance FROM Aircraft"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name ,  distance FROM Aircraft",
        "question": "What are the names and distances for all airplanes?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  distance FROM Aircraft"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT aid FROM Aircraft WHERE distance  >  1000",
        "question": "Show ids for all aircrafts with more than 1000 distance.",
        "correctness": 1,
        "gold_parse": "SELECT aid FROM Aircraft WHERE distance  >  1000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT aid FROM Aircraft WHERE distance  >  1000",
        "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?",
        "correctness": 1,
        "gold_parse": "SELECT aid FROM Aircraft WHERE distance  >  1000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "question": "How many aircrafts have distance between 1000 and 5000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "question": "What is the count of aircrafts that have a distance between 1000 and 5000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
        "question": "What is the name and distance for aircraft with id 12?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
        "question": "What is the name and distance for the aircraft that has an id of 12?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "question": "What is the minimum, average, and maximum distance of all aircrafts.",
        "correctness": 1,
        "gold_parse": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "question": "Return the minimum, average and maximum distances traveled across all aircrafts.",
        "correctness": 1,
        "gold_parse": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "question": "Show the id and name of the aircraft with the maximum distance.",
        "correctness": 1,
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "correctness": 1,
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "question": "Show names for all aircrafts with distances more than the average.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "question": "What are the names of all aircrafts that can cover more distances than average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Employee",
        "question": "How many employees do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Employee"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Employee",
        "question": "What is the number of employees?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Employee"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name ,  salary FROM Employee ORDER BY salary",
        "question": "Show name and salary for all employees sorted by salary.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  salary FROM Employee ORDER BY salary"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name ,  salary FROM Employee ORDER BY salary",
        "question": "What is the name and salary of all employees in order of salary?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  salary FROM Employee ORDER BY salary"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Show ids for all employees with at least 100000 salary.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
        "question": "How many employees have salary between 100000 and 200000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
        "question": "What is the number of employees that have a salary between 100000 and 200000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965",
        "question": "What is the name and salary for employee with id 242518965?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965",
        "question": "What is the name and salary of the employee with the id 242518965?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
        "question": "What is average and maximum salary of all employees.",
        "correctness": 1,
        "gold_parse": "SELECT avg(salary) ,  max(salary) FROM Employee"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
        "question": "What is the average and largest salary of all employees?",
        "correctness": 1,
        "gold_parse": "SELECT avg(salary) ,  max(salary) FROM Employee"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
        "question": "Show the id and name of the employee with maximum salary.",
        "correctness": 1,
        "gold_parse": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
        "question": "What is the id and name of the employee with the highest salary?",
        "correctness": 1,
        "gold_parse": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
        "question": "Show the name of employees with three lowest salaries.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
        "question": "What is the name of the 3 employees who get paid the least?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
        "question": "Show names for all employees with salary more than the average.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
        "question": "What are the names of all employees who have a salary higher than average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "question": "Show the id and salary of Mark Young.",
        "correctness": 1,
        "gold_parse": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "question": "What is the id and salary of the employee named Mark Young?",
        "correctness": 1,
        "gold_parse": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Flight",
        "question": "How many flights do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Flight"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Flight",
        "question": "What is the number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Flight"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "Show all flight number from Los Angeles.",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "What are the numbers of all flights coming from Los Angeles?",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
        "question": "Show origins of all flights with destination Honolulu.",
        "correctness": 1,
        "gold_parse": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
        "question": "What are the origins of all flights that are headed to Honolulu?",
        "correctness": 1,
        "gold_parse": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "correctness": 1,
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "question": "What are the departure and arrival dates of all flights from LA to Honolulu?",
        "correctness": 1,
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE distance  >  2000",
        "question": "Show flight number for all flights with more than 2000 distance.",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE distance  >  2000",
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "question": "What is the average price for flights from Los Angeles to Honolulu.",
        "correctness": 1,
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "question": "What is the average price for flights from LA to Honolulu?",
        "correctness": 1,
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "question": "Show origin and destination for flights with price higher than 300.",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  destination FROM Flight WHERE price  >  300"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  destination FROM Flight WHERE price  >  300"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "question": "Show the flight number of flights with three lowest distances.",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "question": "What are the numbers of the shortest flights?",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "correctness": 1,
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "What is the average distance and price for all flights from LA?",
        "correctness": 1,
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "question": "Show all origins and the number of flights from each origin.",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "question": "For each origin, how many flights came from there?",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
        "question": "Show all destinations and the number of flights to each destination.",
        "correctness": 1,
        "gold_parse": "SELECT destination ,  count(*) FROM Flight GROUP BY destination"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
        "question": "What are the destinations and number of flights to each one?",
        "correctness": 1,
        "gold_parse": "SELECT destination ,  count(*) FROM Flight GROUP BY destination"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "question": "Which origin has most number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "question": "What place has the most flights coming from there?",
        "correctness": 1,
        "gold_parse": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "Which destination has least number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "What destination has the fewest number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "question": "What is the aircraft name for the flight with number 99",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "question": "What is the name of the aircraft that was on flight number 99?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
        "question": "Show all flight numbers with aircraft Airbus A340-300.",
        "correctness": 1,
        "gold_parse": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
        "question": "What are the flight numbers for the aircraft Airbus A340-300?",
        "correctness": 1,
        "gold_parse": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "question": "Show names for all aircraft with at least two flights.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(DISTINCT eid) FROM Certificate",
        "question": "How many employees have certificate.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(DISTINCT eid) FROM Certificate",
        "question": "What is the count of distinct employees with certificates?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "Show ids for all employees who don't have a certificate.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "What are the ids of all employees that don't have certificates?",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "question": "Show names for all employees who have certificate of Boeing 737-800.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"",
        "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"",
        "question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "question": "What are the names of all employees who are not certified to fly Boeing 737-800s?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "question": "what is the salary and name of the employee who has the most number of aircraft certificates?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
        "question": "How many allergies are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT allergy) FROM Allergy_type"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
        "question": "How many allergy entries are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT allergy) FROM Allergy_type"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
        "question": "How many different allergy types exist?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
        "question": "How many distinct allergies are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT allergytype FROM Allergy_type",
        "question": "Show all allergy types.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT allergytype FROM Allergy_type"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT allergytype FROM Allergy_type",
        "question": "What are the different allergy types?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT allergytype FROM Allergy_type"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergy ,  allergytype FROM Allergy_type",
        "question": "Show all allergies and their types.",
        "correctness": 1,
        "gold_parse": "SELECT allergy ,  allergytype FROM Allergy_type"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergy ,  allergytype FROM Allergy_type",
        "question": "What are the allergies and their types?",
        "correctness": 1,
        "gold_parse": "SELECT allergy ,  allergytype FROM Allergy_type"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
        "question": "Show all allergies with type food.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
        "question": "What are all the different food allergies?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"",
        "question": "What is the type of allergy Cat?",
        "correctness": 1,
        "gold_parse": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"",
        "question": "What is allergy type of a cat allergy?",
        "correctness": 1,
        "gold_parse": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
        "question": "How many allergies have type animal?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
        "question": "How many animal type allergies exist?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",
        "question": "Show all allergy types and the number of allergies in each type.",
        "correctness": 1,
        "gold_parse": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",
        "question": "What are the allergy types and how many allergies correspond to each one?",
        "correctness": 1,
        "gold_parse": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
        "question": "Which allergy type has most number of allergies?",
        "correctness": 1,
        "gold_parse": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
        "question": "Which allergy type is most common?",
        "correctness": 1,
        "gold_parse": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
        "question": "Which allergy type has least number of allergies?",
        "correctness": 1,
        "gold_parse": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
        "question": "Which allergy type is the least common?",
        "correctness": 1,
        "gold_parse": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student",
        "question": "How many students are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student",
        "question": "What is the total number of students?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Fname ,  Lname FROM Student",
        "question": "Show first name and last name for all students.",
        "correctness": 1,
        "gold_parse": "SELECT Fname ,  Lname FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Fname ,  Lname FROM Student",
        "question": "What are the full names of all students",
        "correctness": 1,
        "gold_parse": "SELECT Fname ,  Lname FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(DISTINCT advisor) FROM Student",
        "question": "How many different advisors are listed?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT advisor) FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(DISTINCT advisor) FROM Student",
        "question": "How many advisors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT advisor) FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT Major FROM Student",
        "question": "Show all majors.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Major FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT Major FROM Student",
        "question": "What are the different majors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Major FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT city_code FROM Student",
        "question": "Show all cities where students live.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT city_code FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT city_code FROM Student",
        "question": "What cities do students live in?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT city_code FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "question": "Show first name, last name, age for all female students. Their sex is F.",
        "correctness": 1,
        "gold_parse": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "correctness": 1,
        "gold_parse": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "question": "Show student ids for all male students.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "question": "What are the student ids for all male students?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE age  =  18",
        "question": "How many students are age 18?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE age  =  18"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE age  =  18",
        "question": "How many students are 18 years old?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE age  =  18"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE age  >  20",
        "question": "Show all student ids who are older than 20.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE age  >  20"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE age  >  20",
        "question": "What are the student ids for students over 20 years old?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE age  >  20"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"",
        "question": "Which city does the student whose last name is \"Kim\" live in?",
        "correctness": 1,
        "gold_parse": "SELECT city_code FROM Student WHERE LName  =  \"Kim\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"",
        "question": "Give the city that the student whose family name is Kim lives in.",
        "correctness": 1,
        "gold_parse": "SELECT city_code FROM Student WHERE LName  =  \"Kim\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "question": "Who is the advisor of student with ID 1004?",
        "correctness": 1,
        "gold_parse": "SELECT Advisor FROM Student WHERE StuID  =  1004"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "question": "Who advises student 1004?",
        "correctness": 1,
        "gold_parse": "SELECT Advisor FROM Student WHERE StuID  =  1004"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
        "question": "How many students live in HKG or CHI?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
        "question": "Give the number of students living in either HKG or CHI.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
        "question": "Show the minimum, average, and maximum age of all students.",
        "correctness": 1,
        "gold_parse": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
        "question": "What is the minimum, mean, and maximum age across all students?",
        "correctness": 1,
        "gold_parse": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
        "question": "What is the last name of the youngest student?",
        "correctness": 1,
        "gold_parse": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
        "question": "Provide the last name of the youngest student.",
        "correctness": 1,
        "gold_parse": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "question": "Show the student id of the oldest student.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "question": "What student id corresponds to the oldest student?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT major ,  count(*) FROM Student GROUP BY major",
        "question": "Show all majors and corresponding number of students.",
        "correctness": 1,
        "gold_parse": "SELECT major ,  count(*) FROM Student GROUP BY major"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT major ,  count(*) FROM Student GROUP BY major",
        "question": "How many students are there for each major?",
        "correctness": 1,
        "gold_parse": "SELECT major ,  count(*) FROM Student GROUP BY major"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "question": "Which major has most number of students?",
        "correctness": 1,
        "gold_parse": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the largest major?",
        "correctness": 1,
        "gold_parse": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "question": "Show all ages and corresponding number of students.",
        "correctness": 1,
        "gold_parse": "SELECT age ,  count(*) FROM Student GROUP BY age"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "question": "How old is each student and how many students are each age?",
        "correctness": 1,
        "gold_parse": "SELECT age ,  count(*) FROM Student GROUP BY age"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "question": "Show the average age for male and female students.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "question": "What are the average ages for male and female students?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code",
        "question": "Show all cities and corresponding number of students.",
        "correctness": 1,
        "gold_parse": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code",
        "question": "How many students live in each city?",
        "correctness": 1,
        "gold_parse": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor",
        "question": "Show all advisors and corresponding number of students.",
        "correctness": 1,
        "gold_parse": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor",
        "question": "How many students does each advisor have?",
        "correctness": 1,
        "gold_parse": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
        "question": "Which advisor has most number of students?",
        "correctness": 1,
        "gold_parse": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the advisor with the most students.",
        "correctness": 1,
        "gold_parse": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "How many students have cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "How many students are affected by cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "question": "Show all student IDs who have at least two allergies.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "question": "What are the students ids of students who have more than one allergy?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "question": "What are the student ids of students who don't have any allergies?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "question": "Which students are unaffected by allergies?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "question": "How many female students have milk or egg allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "question": "How many students who are female are allergic to milk or eggs?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "question": "How many students have a food allergy?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "question": "How many students are affected by food related allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "question": "Which allergy has most number of students affected?",
        "correctness": 1,
        "gold_parse": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "question": "Which allergy is the most common?",
        "correctness": 1,
        "gold_parse": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "question": "Show all allergies with number of students affected.",
        "correctness": 1,
        "gold_parse": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "question": "How many students have each different allergy?",
        "correctness": 1,
        "gold_parse": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "question": "Show all allergy type with number of students affected.",
        "correctness": 1,
        "gold_parse": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "question": "How many students are affected by each allergy type?",
        "correctness": 1,
        "gold_parse": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "question": "Find the last name and age of the student who has allergy to both milk and cat.",
        "correctness": 1,
        "gold_parse": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "question": "What are the last names and ages of the students who are allergic to milk and cat?",
        "correctness": 1,
        "gold_parse": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy",
        "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy",
        "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "question": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
        "question": "Find the average age of the students who have allergies with food and animal types.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
        "question": "How old are the students with allergies to food and animal types on average?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "question": "List the first and last name of the students who do not have any food type allergy.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "question": "What is the full name of each student who is not allergic to any type of food.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "question": "Find the number of male (sex is 'M') students who have some food type allery.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "question": "How many male students (sex is 'M') are allergic to any type of food?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "question": "How many students are over 18 and do not have allergy to food type or animal type?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "question": "Find the first name and major of the students who are not allegry to soy.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "question": "What are the first name and major of the students who are able to consume soy?",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
        "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.",
        "correctness": 1,
        "gold_parse": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
        "question": "What are the top 5 countries by number of invoices and how many do they have?",
        "correctness": 1,
        "gold_parse": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
        "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "correctness": 1,
        "gold_parse": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
        "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?",
        "correctness": 1,
        "gold_parse": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",
        "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.",
        "correctness": 1,
        "gold_parse": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",
        "question": "What are the names of the countries and average invoice size of the top countries by size?",
        "correctness": 1,
        "gold_parse": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
        "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
        "question": "What are the first and last names of the 5 customers who purchased something most recently?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
        "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
        "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
        "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
        "question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
        "question": "How many tracks does each genre have and what are the names of the top 5?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT title FROM albums;",
        "question": "List every album's title.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM albums;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT title FROM albums;",
        "question": "What are the titles of all the albums?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM albums;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT title FROM albums ORDER BY title;",
        "question": "List every album ordered by album title in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM albums ORDER BY title;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT title FROM albums ORDER BY title;",
        "question": "What are the titles of all the albums alphabetically ascending?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM albums ORDER BY title;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
        "question": "List every album whose title starts with A in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
        "question": "What are the titles of all albums that start with A in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
        "question": "List the customers first and last name of 10 least expensive invoices.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
        "question": "What are the first and last names of the customers with the 10 cheapest invoices?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "question": "List total amount of  invoice from Chicago, IL.",
        "correctness": 1,
        "gold_parse": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?",
        "correctness": 1,
        "gold_parse": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "question": "List the number of invoices from Chicago, IL.",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "question": "How many invoices were billed from Chicago, IL?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;",
        "question": "List the number of invoices from the US, grouped by state.",
        "correctness": 1,
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;",
        "question": "How many invoices were billed from each state?",
        "correctness": 1,
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
        "question": "List the state in the US with the most invoices.",
        "correctness": 1,
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
        "question": "What are the states with the most invoices?",
        "correctness": 1,
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
        "question": "List the number of invoices and the invoice total from California.",
        "correctness": 1,
        "gold_parse": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
        "question": "What is the number of invoices and total money billed in them from CA?",
        "correctness": 1,
        "gold_parse": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
        "question": "List Aerosmith's albums.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
        "question": "What are the titles of all the Aerosmith albums?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "question": "How many albums does Billy Cobham has?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "question": "How many albums has Billy Cobam released?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
        "question": "Eduardo Martins is a customer at which company?",
        "correctness": 1,
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
        "question": "What is the company where Eduardo Martins is a customer?",
        "correctness": 1,
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
        "question": "What is Astrid Gruber's email and phone number?",
        "correctness": 1,
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "correctness": 1,
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";",
        "question": "How many customers live in Prague city?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers WHERE city = \"Prague\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";",
        "question": "How many customers live in the city of Prague?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers WHERE city = \"Prague\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers WHERE state = \"CA\";",
        "question": "How many customers in state of CA?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers WHERE state = \"CA\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers WHERE state = \"CA\";",
        "question": "How many customers are from California?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers WHERE state = \"CA\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
        "question": "What country does Roberto Almeida live?",
        "correctness": 1,
        "gold_parse": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
        "question": "In which country does Roberto Almeida?",
        "correctness": 1,
        "gold_parse": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
        "question": "How many customers does Steve Johnson support?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
        "question": "What is the count of customers that Steve Johnson supports?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "question": "What is the title, phone number and hire date for the employee named Nancy Edwards?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
        "question": "find the full name of employees who report to Nancy Edwards?",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
        "question": "What is the first and last name of the employee who reports to Nancy Edwards?",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "question": "What is the address of employee Nancy Edwards?",
        "correctness": 1,
        "gold_parse": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "question": "What is Nancy Edwards's address?",
        "correctness": 1,
        "gold_parse": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the full name of employee who supported the most number of customers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the full name of the employee who has the most customers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";",
        "question": "How many employees are living in Canada?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM employees WHERE country = \"Canada\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";",
        "question": "How many employees live in Canada?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM employees WHERE country = \"Canada\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "question": "What is employee Nancy Edwards's phone number?",
        "correctness": 1,
        "gold_parse": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "question": "What is the the phone number of Nancy Edwards?",
        "correctness": 1,
        "gold_parse": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
        "question": "Who is the youngest employee in the company? List employee's first and last name.",
        "correctness": 1,
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
        "question": "What si the youngest employee's first and last name?",
        "correctness": 1,
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
        "question": "List top 10 employee work longest in the company. List employee's first and last name.",
        "correctness": 1,
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
        "question": "What are the first and last names of the top 10 longest-serving employees?",
        "correctness": 1,
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "question": "How many employees who are IT staff are from each city?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
        "question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
        "question": "What are the first and last names of all the employees and how many people report to them?",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "How many orders does Lucas Mancini has?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "How many orders does Luca Mancini have in his invoices?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "What is the total amount of money spent by Lucas Mancini?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "How much money did Lucas Mancini spend?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT name FROM media_types;",
        "question": "List all media types.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM media_types;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT name FROM media_types;",
        "question": "What are the names of all the media types?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM media_types;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT DISTINCT name FROM genres;",
        "question": "List all different genre types.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM genres;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT DISTINCT name FROM genres;",
        "question": "What are the different names of the genres?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM genres;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT name FROM playlists;",
        "question": "List the name of all playlist.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM playlists;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT name FROM playlists;",
        "question": "What are the names of all the playlists?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM playlists;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";",
        "question": "Who is the composer of track Fast As a Shark?",
        "correctness": 1,
        "gold_parse": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";",
        "question": "What is the composer who created the track \"Fast As a Shark\"?",
        "correctness": 1,
        "gold_parse": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";",
        "question": "How long does track Fast As a Shark has?",
        "correctness": 1,
        "gold_parse": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";",
        "question": "How many milliseconds long is Fast As a Shark?",
        "correctness": 1,
        "gold_parse": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "question": "What is the name of tracks whose genre is Rock?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "question": "What is the name of all tracks in the Rock genre?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
        "question": "What is title of album which track Balls to the Wall belongs to?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
        "question": "What is the name of the album that has the track Ball to the Wall?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
        "question": "List name of all tracks in Balls to the Wall.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
        "question": "What is the name of all tracks in the album named Balls to the Wall?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
        "question": "List title of albums have the number of tracks greater than 10.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
        "question": "What are the names of the albums that have more than 10 tracks?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";",
        "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";",
        "question": "What are the names of all Rock tracks that are stored on MPEG audio files?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
        "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
        "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
        "question": "List the name of tracks belongs to genre Rock or genre Jazz.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\""
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
        "question": "What are the names of the tracks that are Rock or Jazz songs?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\""
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";",
        "question": "List the name of all tracks in the playlists of Movies.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";",
        "question": "What are the names of all tracks that are on playlists titled Movies?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
        "question": "What are the names of all playlists that have more than 100 tracks?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";",
        "question": "List all tracks bought by customer Daan Peeters.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";",
        "question": "What are the tracks that Dean Peeters bought?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";",
        "question": "How much is the track Fast As a Shark?",
        "correctness": 1,
        "gold_parse": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";",
        "question": "What is the unit price of the tune \"Fast As a Shark\"?",
        "correctness": 1,
        "gold_parse": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
        "question": "Find number of tracks in each genre?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
        "question": "How many tracks are in each genre?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT count(*) FROM editor",
        "question": "How many editors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM editor"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT Name FROM editor ORDER BY Age ASC",
        "question": "List the names of editors in ascending order of age.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM editor ORDER BY Age ASC"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT Name ,  Age FROM editor",
        "question": "What are the names and ages of editors?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Age FROM editor"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT Name FROM editor WHERE Age  >  25",
        "question": "List the names of editors who are older than 25.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM editor WHERE Age  >  25"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
        "question": "Show the names of editors of age either 24 or 25.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
        "question": "What is the name of the youngest editor?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age",
        "question": "What are the different ages of editors? Show each age along with the number of editors of that age.",
        "correctness": 1,
        "gold_parse": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common age of editors.",
        "correctness": 1,
        "gold_parse": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT DISTINCT Theme FROM journal",
        "question": "Show the distinct themes of journals.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Theme FROM journal"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
        "question": "Show the names of editors and the theme of journals for which they serve on committees.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
        "question": "For each journal_committee, find the editor name and the journal theme.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC",
        "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000",
        "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
        "question": "Show the id, name of each editor and the number of journal committees they are on.",
        "correctness": 1,
        "gold_parse": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2",
        "question": "Show the names of editors that are on at least two journal committees.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "question": "List the names of editors that are not on any journal committee.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID",
        "question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.",
        "correctness": 1,
        "gold_parse": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'",
        "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Accounts",
        "question": "How many accounts do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Accounts"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Accounts",
        "question": "Count the number of accounts.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Accounts"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "question": "Show ids, customer ids, names for all accounts.",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  customer_id ,  account_name FROM Accounts"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  customer_id ,  account_name FROM Accounts"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
        "question": "Show other account details for account with name 338.",
        "correctness": 1,
        "gold_parse": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
        "question": "What are the other account details for the account with the name 338?",
        "correctness": 1,
        "gold_parse": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
        "question": "What is the first name, last name, and phone of the customer with account name 162?",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
        "question": "Give the full name and phone of the customer who has the account name 162.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "question": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
        "question": "Show all customer ids and the number of accounts for each customer.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
        "question": "How many accounts are there for each customer id?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the customer id and number of accounts with most accounts.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the customer first, last name and id with least number of accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Give the full name and customer id of the customer with the fewest accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "question": "Show the number of all customers without an account.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "question": "How many customers do not have an account?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "Show the first names and last names of customers without any account.",
        "correctness": 1,
        "gold_parse": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "What are the full names of customers who do not have any accounts?",
        "correctness": 1,
        "gold_parse": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "Show distinct first and last names for all customers with an account.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "What are the full names of customers who have accounts?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "question": "How many customers have an account?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "question": "Count the number of customers who hold an account.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers",
        "question": "How many customers do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers",
        "question": "Count the number of customers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
        "question": "Show ids, first names, last names, and phones for all customers.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
        "question": "What are the ids, full names, and phones of each customer?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "Show the number of customer cards.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "How many customer cards are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "correctness": 1,
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "correctness": 1,
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
        "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.",
        "correctness": 1,
        "gold_parse": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
        "question": "What are the valid from and valid to dates for the card with the number 4560596484842?",
        "correctness": 1,
        "gold_parse": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "question": "What is the first name, last name, and phone of the customer with card 4560596484842.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "question": "Return the full name and phone of the customer who has card number 4560596484842.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "question": "How many cards does customer Art Turcotte have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "question": "How many debit cards do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "question": "Count the number of customer cards of the type Debit.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "question": "How many credit cards does customer Blanche Huels have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
        "question": "Show all customer ids and the number of cards owned by each customer.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
        "question": "What are the different customer ids, and how many cards does each one hold?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the customer id with most number of cards, and how many does he have?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id of the customer who has the most cards, as well as the number of cards.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "question": "Show id, first and last names for all customers with at least two cards.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "question": "What are the ids and full names of customers who hold two or more cards?",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the customer id, first and last name with least number of accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id and full name of the customer who has the fewest accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "question": "Show all card type codes and the number of cards in each type.",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "question": "What are the different card types, and how many cards are there of each?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the card type code with most number of cards?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the card type that is most common.",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
        "question": "Show card type codes with at least 5 cards.",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
        "question": "What are the codes of card types that have 5 or more cards?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
        "question": "Show the customer ids and firstname without a credit card.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
        "question": "What are the ids and first names of customers who do not hold a credit card?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "question": "Show all card type codes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT card_type_code FROM Customers_Cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "question": "What are the different card type codes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT card_type_code FROM Customers_Cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "question": "Show the number of card types.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "question": "How many different card types are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
        "question": "Show all transaction types.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT transaction_type FROM Financial_Transactions"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
        "question": "What are the different types of transactions?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT transaction_type FROM Financial_Transactions"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "question": "Show the number of transaction types.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "question": "How many different types of transactions are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "question": "What is the average and total transaction amount?",
        "correctness": 1,
        "gold_parse": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "question": "Return the average transaction amount, as well as the total amount of all transactions.",
        "correctness": 1,
        "gold_parse": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "question": "Show the card type codes and the number of transactions.",
        "correctness": 1,
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "question": "What are the different card types, and how many transactions have been made with each?",
        "correctness": 1,
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "Show the transaction type and the number of transactions.",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "What are the different transaction types, and how many transactions of each have taken place?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
        "question": "What is the transaction type that has processed the greatest total amount in transactions?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
        "question": "Return the type of transaction with the highest total amount.",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
        "question": "Show the account id and the number of transactions for each account",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
        "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id"
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM track",
        "question": "How many tracks do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM track",
        "question": "Count the number of tracks.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name ,  LOCATION FROM track",
        "question": "Show the name and location for all tracks.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name ,  LOCATION FROM track",
        "question": "What are the names and locations of all tracks?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
        "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
        "question": "What is the name, location and seating for the most recently opened track?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
        "question": "Return the name, location, and seating of the track that was opened in the most recent year.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1"
    },
    {
        "db_id": "race_track",
        "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "correctness": 1,
        "gold_parse": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",
        "question": "Return the minimum, maximum, and average seating across all tracks.",
        "correctness": 1,
        "gold_parse": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
        "question": "Show the name, location, open year for all tracks with a seating higher than the average.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
        "question": "What are the names, locations, and years of opening for tracks with seating higher than average?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)"
    },
    {
        "db_id": "race_track",
        "query": "SELECT DISTINCT LOCATION FROM track",
        "question": "What are distinct locations where tracks are located?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT DISTINCT LOCATION FROM track",
        "question": "Give the different locations of tracks.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM race",
        "question": "How many races are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM race"
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM race",
        "question": "Count the number of races.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM race"
    },
    {
        "db_id": "race_track",
        "query": "SELECT DISTINCT CLASS FROM race",
        "question": "What are the distinct classes that races can have?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CLASS FROM race"
    },
    {
        "db_id": "race_track",
        "query": "SELECT DISTINCT CLASS FROM race",
        "question": "Return the different classes of races.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CLASS FROM race"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name ,  CLASS ,  date FROM race",
        "question": "Show name, class, and date for all races.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  CLASS ,  date FROM race"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name ,  CLASS ,  date FROM race",
        "question": "What are the names, classes, and dates for all races?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  CLASS ,  date FROM race"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
        "question": "Show the race class and number of races in each class.",
        "correctness": 1,
        "gold_parse": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
        "question": "What are the different classes of races, and how many races correspond to each?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the race class with most number of races.",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the class of races that is most common.",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "List the race class with at least two races.",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "What are the classes of races that have two or more corresponding races?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "question": "What are the names for tracks without a race in class 'GT'.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "question": "Give the names of tracks that do not have a race in the class 'GT'.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
        "question": "Show all track names that have had no races.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)"
    },
    {
        "db_id": "race_track",
        "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
        "question": "Return the names of tracks that have no had any races.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)"
    },
    {
        "db_id": "race_track",
        "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
        "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
        "correctness": 1,
        "gold_parse": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000"
    },
    {
        "db_id": "race_track",
        "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
        "question": "What are the years of opening for tracks with seating between 4000 and 5000?",
        "correctness": 1,
        "gold_parse": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000"
    },
    {
        "db_id": "race_track",
        "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
        "question": "Show the name of track and the number of races in each track.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"
    },
    {
        "db_id": "race_track",
        "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
        "question": "What are the names of different tracks, and how many races has each had?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"
    },
    {
        "db_id": "race_track",
        "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the name of track with most number of races.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "race_track",
        "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the track that has had the greatest number of races?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "race_track",
        "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "question": "Show the name and date for each race and its track name.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id"
    },
    {
        "db_id": "race_track",
        "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "question": "What are the names and dates of races, and the names of the tracks where they are held?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id"
    },
    {
        "db_id": "race_track",
        "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "question": "Show the name and location of track with 1 race.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1"
    },
    {
        "db_id": "race_track",
        "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "question": "What are the names and locations of tracks that have had exactly 1 race?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1"
    },
    {
        "db_id": "race_track",
        "query": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000",
        "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000"
    },
    {
        "db_id": "race_track",
        "query": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000",
        "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'",
        "question": "How many members have the black membership card?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT count(*) ,  address FROM member GROUP BY address",
        "question": "Find the number of members living in each address.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  address FROM member GROUP BY address"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'",
        "question": "Give me the names of members whose address is in Harford or Waterbury.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30",
        "question": "Find the ids and names of members who are under age 30 or with black membership card.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "correctness": 1,
        "gold_parse": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "question": "Which membership card has more than 5 members?",
        "correctness": 1,
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
        "question": "Which address has both members younger than 30 and members older than 40?",
        "correctness": 1,
        "gold_parse": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
        "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "correctness": 1,
        "gold_parse": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT count(*) FROM member WHERE address != 'Hartford'",
        "question": "How many members are not living in Hartford?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM member WHERE address != 'Hartford'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
        "question": "Which address do not have any member with the black membership card?",
        "correctness": 1,
        "gold_parse": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM shop ORDER BY open_year",
        "question": "Show the shop addresses ordered by their opening year.",
        "correctness": 1,
        "gold_parse": "SELECT address FROM shop ORDER BY open_year"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT avg(num_of_staff) ,  avg(score) FROM shop",
        "question": "What are the average score and average staff number of all shops?",
        "correctness": 1,
        "gold_parse": "SELECT avg(num_of_staff) ,  avg(score) FROM shop"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)",
        "question": "Find the id and address of the shops whose score is below the average score.",
        "correctness": 1,
        "gold_parse": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
        "question": "Find the address and staff number of the shops that do not have any happy hour.",
        "correctness": 1,
        "gold_parse": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
        "question": "What are the id and address of the shops which have a happy hour in May?",
        "correctness": 1,
        "gold_parse": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "which shop has happy hour most frequently? List its id and number of happy hours.",
        "correctness": 1,
        "gold_parse": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
        "question": "Which month has the most happy hours?",
        "correctness": 1,
        "gold_parse": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2",
        "question": "Which months have more than 2 happy hours?",
        "correctness": 1,
        "gold_parse": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT count(*) FROM ALBUM",
        "question": "How many albums are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM ALBUM"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT count(*) FROM ALBUM",
        "question": "Find the number of albums.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM ALBUM"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Name FROM GENRE",
        "question": "List the names of all music genres.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM GENRE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Name FROM GENRE",
        "question": "What are the names of different music genres?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM GENRE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "question": "Find all the customer information in state NY.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "question": "What is all the customer information for customers in NY state?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"",
        "question": "What are the first names and last names of the employees who live in Calgary city.",
        "correctness": 1,
        "gold_parse": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"",
        "question": "Find the full names of employees living in the city of Calgary.",
        "correctness": 1,
        "gold_parse": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT distinct(BillingCountry) FROM INVOICE",
        "question": "What are the distinct billing countries of the invoices?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(BillingCountry) FROM INVOICE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT distinct(BillingCountry) FROM INVOICE",
        "question": "Find the different billing countries for all invoices.",
        "correctness": 1,
        "gold_parse": "SELECT distinct(BillingCountry) FROM INVOICE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "question": "Find the names of all artists that have \"a\" in their names.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "question": "What are the names of artist who have the letter 'a' in their names?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
        "question": "Find the title of all the albums of the artist \"AC/DC\".",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
        "question": "What are the titles of albums by the artist \"AC/DC\"?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "question": "Hom many albums does the artist \"Metallica\" have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "question": "Find the number of albums by the artist \"Metallica\".",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
        "question": "Which artist does the album \"Balls to the Wall\" belong to?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
        "question": "Find the name of the artist who made the album \"Balls to the Wall\".",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which artist has the most albums?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the artist with the greatest number of albums?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "question": "Find the names of all the tracks that contain the word \"you\".",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "question": "What are the names of tracks that contain the the word you in them?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM TRACK",
        "question": "What is the average unit price of all the tracks?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM TRACK"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM TRACK",
        "question": "Find the average unit price for a track.",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM TRACK"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "question": "Find the maximum and minimum durations of tracks in milliseconds.",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "question": "Show the album names, ids and the number of tracks for each album.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "question": "What are the names and ids of the different albums, and how many tracks are on each?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the most common genre in all tracks?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Find the name of the genre that is most frequent across all tracks.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "What is the least common media type in all tracks?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "What is the name of the media type that is least common across all tracks?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "question": "How many tracks belong to rock genre?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "question": "Count the number of tracks that are part of the rock genre.",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "question": "What is the average unit price of tracks that belong to Jazz genre?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "question": "Find the average unit price of jazz tracks.",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
        "correctness": 1,
        "gold_parse": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "question": "Find the full name of the customer with the email \"luisg@embraer.com.br\".",
        "correctness": 1,
        "gold_parse": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "question": "How many customers have email that contains \"gmail.com\"?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "question": "Count the number of customers that have an email containing \"gmail.com\".",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
        "question": "What is the first name and last name employee helps the customer with first name Leonie?",
        "correctness": 1,
        "gold_parse": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
        "question": "Find the full names of employees who help customers with the first name Leonie.",
        "correctness": 1,
        "gold_parse": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "question": "What city does the employee who helps the customer with postal code 70174 live in?",
        "correctness": 1,
        "gold_parse": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "question": "Find the cities corresponding to employees who help customers with the postal code 70174.",
        "correctness": 1,
        "gold_parse": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "question": "How many distinct cities does the employees live in?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "question": "Find the number of different cities that employees live in.",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
        "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
        "correctness": 1,
        "gold_parse": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
        "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?",
        "correctness": 1,
        "gold_parse": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "correctness": 1,
        "gold_parse": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "question": "What are the last names of customers without invoice totals exceeding 20?",
        "correctness": 1,
        "gold_parse": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "question": "Find the first names of all customers that live in Brazil and have an invoice.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "question": "What are the different first names for customers from Brazil who have also had an invoice?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "question": "What are the addresses of customers living in Germany who have had an invoice?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "List the phone numbers of all employees.",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "What are the phone numbers for each employee?",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "question": "How many tracks are in the AAC audio file media type?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "question": "Count the number of tracks that are of the media type \"AAC audio file\".",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "question": "Find the average millisecond length of Latin and Pop tracks.",
        "correctness": 1,
        "gold_parse": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "question": "What are the last names of employees who serve at most 20 customers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "question": "Please list all album titles in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM ORDER BY Title"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "question": "What are all the album titles, in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM ORDER BY Title"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "question": "Find the names of artists that do not have any albums.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "question": "What are the names of artists who have not released any albums?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "question": "What is the average unit price of rock tracks?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "question": "Find the average unit price of tracks from the Rock genre.",
        "correctness": 1,
        "gold_parse": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "question": "What are the duration of the longest and shortest pop tracks in milliseconds?",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "question": "Find the maximum and minimum millisecond lengths of pop tracks.",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
        "question": "What are the birth dates of employees living in Edmonton?",
        "correctness": 1,
        "gold_parse": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
        "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.",
        "correctness": 1,
        "gold_parse": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT distinct(UnitPrice) FROM TRACK",
        "question": "What are the distinct unit prices of all tracks?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(UnitPrice) FROM TRACK"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT distinct(UnitPrice) FROM TRACK",
        "question": "Find the distinct unit prices for tracks.",
        "correctness": 1,
        "gold_parse": "SELECT distinct(UnitPrice) FROM TRACK"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "question": "How many artists do not have any album?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "question": "Cound the number of artists who have not released an album.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
        "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_phone FROM available_policies",
        "question": "Find all the phone numbers.",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone FROM available_policies"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_phone FROM available_policies",
        "question": "What are all the phone numbers?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone FROM available_policies"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"",
        "question": "What are the customer phone numbers under the policy \"Life Insurance\"?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"",
        "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which policy type has the most records in the database?",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which policy type appears most frequently in the available policies?",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
        "question": "What are all the customer phone numbers under the most popular policy type?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
        "question": "Find the phone numbers of customers using the most common policy type among the available policies.",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4",
        "question": "Find the policy type used by more than 4 customers.",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4",
        "question": "Find the policy types more than 4 customers use. Show their type code.",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
        "question": "Find the total and average amount of settlements.",
        "correctness": 1,
        "gold_parse": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
        "question": "Return the sum and average of all settlement amounts.",
        "correctness": 1,
        "gold_parse": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
        "question": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "correctness": 1,
        "gold_parse": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
        "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
        "correctness": 1,
        "gold_parse": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
        "question": "What is the effective date of the claim that has the largest amount of total settlement?",
        "correctness": 1,
        "gold_parse": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
        "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.",
        "correctness": 1,
        "gold_parse": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "Count the total number of policies used by the customer named \"Dayana Robel\".",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the customer who has the most policies listed?",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which customer uses the most policies? Give me the customer name.",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
        "question": "What are all the policy types of the customer that has the most policies listed?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
        "question": "List all the policy types used by the customer enrolled in the most policies.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT service_name FROM services ORDER BY service_name",
        "question": "List all the services in the alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT service_name FROM services ORDER BY service_name"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT service_name FROM services ORDER BY service_name",
        "question": "Give me a list of all the service names sorted alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT service_name FROM services ORDER BY service_name"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM services",
        "question": "How many services are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM services"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM services",
        "question": "Count the total number of available services.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM services"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
        "question": "Find the names of users who do not have a first notification of loss record.",
        "correctness": 1,
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
        "question": "Which customers do not have a first notification of loss record? Give me the customer names.",
        "correctness": 1,
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"",
        "question": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"",
        "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "Find the IDs of customers whose name contains \"Diana\".",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "What are the IDs of customers who have \"Diana\" in part of their names?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
        "question": "What are the maximum and minimum settlement amount on record?",
        "correctness": 1,
        "gold_parse": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
        "question": "Find the maximum and minimum settlement amount.",
        "correctness": 1,
        "gold_parse": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
        "question": "List all the customers in increasing order of IDs.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
        "question": "What is the ordered list of customer ids?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"",
        "correctness": 1,
        "gold_parse": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "question": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?",
        "correctness": 1,
        "gold_parse": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT count(*) FROM enzyme",
        "question": "How many kinds of enzymes are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM enzyme"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT count(*) FROM enzyme",
        "question": "What is the total count of enzymes?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM enzyme"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name FROM enzyme ORDER BY name DESC",
        "question": "List the name of enzymes in descending lexicographical order.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM enzyme ORDER BY name DESC"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name FROM enzyme ORDER BY name DESC",
        "question": "What are the names of enzymes in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM enzyme ORDER BY name DESC"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name ,  LOCATION FROM enzyme",
        "question": "List the names and the locations that the enzymes can make an effect.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION FROM enzyme"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name ,  LOCATION FROM enzyme",
        "question": "What are the names and locations of all enzymes listed?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION FROM enzyme"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT max(OMIM) FROM enzyme",
        "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "correctness": 1,
        "gold_parse": "SELECT max(OMIM) FROM enzyme"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT max(OMIM) FROM enzyme",
        "question": "What is the maximum OMIM value in the database?",
        "correctness": 1,
        "gold_parse": "SELECT max(OMIM) FROM enzyme"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "correctness": 1,
        "gold_parse": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
        "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?",
        "correctness": 1,
        "gold_parse": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "question": "What are the names of enzymes whose product is not 'Heme'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "question": "What are the names and trade names of the medcines that are FDA approved?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "correctness": 1,
        "gold_parse": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
        "correctness": 1,
        "gold_parse": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "question": "How many medicines were not approved by the FDA?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
        "question": "How many enzymes do not have any interactions?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
        "question": "What is the count of enzymes without any interactions?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
        "question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
        "question": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT count(DISTINCT FDA_approved) FROM medicine",
        "question": "How many distinct FDA approval statuses are there for the medicines?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT FDA_approved) FROM medicine"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT count(DISTINCT FDA_approved) FROM medicine",
        "question": "How many different FDA approval statuses exist for medicines?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT FDA_approved) FROM medicine"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "question": "Which enzyme names have the substring \"ALA\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "question": "find the number of medicines offered by each trade.",
        "correctness": 1,
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "question": "How many medicines are offered by each trade name?",
        "correctness": 1,
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT school ,  nickname FROM university ORDER BY founded",
        "question": "List all schools and their nicknames in the order of founded year.",
        "correctness": 1,
        "gold_parse": "SELECT school ,  nickname FROM university ORDER BY founded"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT school ,  nickname FROM university ORDER BY founded",
        "question": "What are the different schools and their nicknames, ordered by their founding years?",
        "correctness": 1,
        "gold_parse": "SELECT school ,  nickname FROM university ORDER BY founded"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "question": "List all public schools and their locations.",
        "correctness": 1,
        "gold_parse": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "question": "What are the public schools and what are their locations?",
        "correctness": 1,
        "gold_parse": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "When was the school with the largest enrollment founded?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "Return the founded year for the school with the largest enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "question": "Find the founded year of the newest non public school.",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "question": "What is the founded year of the non public school that was founded most recently?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(DISTINCT school_id) FROM basketball_match",
        "question": "How many schools are in the basketball match?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT school_id) FROM basketball_match"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(DISTINCT school_id) FROM basketball_match",
        "question": "Count the number of schools that have had basketball matches.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT school_id) FROM basketball_match"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "question": "What is the highest acc percent score in the competition?",
        "correctness": 1,
        "gold_parse": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "question": "Return the highest acc percent across all basketball matches.",
        "correctness": 1,
        "gold_parse": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "correctness": 1,
        "gold_parse": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "question": "Return the primary conference of the school with the lowest acc percentage score.",
        "correctness": 1,
        "gold_parse": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "correctness": 1,
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "correctness": 1,
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "correctness": 1,
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "question": "What are the all games score and location of the school called Clemson?",
        "correctness": 1,
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
        "question": "What are the average enrollment size of the universities that are founded before 1850?",
        "correctness": 1,
        "gold_parse": "SELECT avg(enrollment) FROM university WHERE founded  <  1850"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
        "question": "Return the average enrollment of universities founded before 1850.",
        "correctness": 1,
        "gold_parse": "SELECT avg(enrollment) FROM university WHERE founded  <  1850"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
        "question": "Show the enrollment and primary_conference of the oldest college.",
        "correctness": 1,
        "gold_parse": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
        "question": "What are the enrollment and primary conference for the university which was founded the earliest?",
        "correctness": 1,
        "gold_parse": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT sum(enrollment) ,  min(enrollment) FROM university",
        "question": "What is the total and minimum enrollment of all schools?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) ,  min(enrollment) FROM university"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT sum(enrollment) ,  min(enrollment) FROM university",
        "question": "Return the total and minimum enrollments across all schools.",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) ,  min(enrollment) FROM university"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
        "question": "Find the total student enrollment for different affiliation type schools.",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
        "question": "What are the total enrollments of universities of each affiliation type?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "question": "How many schools do not participate in the basketball match?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "question": "Count the number of universities that do not participate in the baketball match.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "question": "Find the schools that were either founded after 1850 or public.",
        "correctness": 1,
        "gold_parse": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "question": "What are the schools that were either founded before 1850 or are public?",
        "correctness": 1,
        "gold_parse": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(DISTINCT affiliation) FROM university",
        "question": "Find how many different affiliation types there are.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT affiliation) FROM university"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(DISTINCT affiliation) FROM university",
        "question": "Count the number of different affiliation types.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT affiliation) FROM university"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "question": "Find how many school locations have the word 'NY'.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "question": "How many universities have a location that contains NY?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
        "correctness": 1,
        "gold_parse": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "question": "What are the names of teams from universities that have a below average enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",
        "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",
        "question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "correctness": 1,
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT max(Enrollment) FROM university",
        "question": "What is the maximum enrollment across all schools?",
        "correctness": 1,
        "gold_parse": "SELECT max(Enrollment) FROM university"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT max(Enrollment) FROM university",
        "question": "Return the maximum enrollment across all schools.",
        "correctness": 1,
        "gold_parse": "SELECT max(Enrollment) FROM university"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT * FROM basketball_match",
        "question": "List all information regarding the basketball match.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM basketball_match"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT * FROM basketball_match",
        "question": "What is all the information about the basketball match?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM basketball_match"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;",
        "question": "the names of models that launched between 2002 and 2004.",
        "correctness": 1,
        "gold_parse": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;",
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "correctness": 1,
        "gold_parse": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";",
        "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
        "correctness": 1,
        "gold_parse": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";",
        "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;",
        "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "correctness": 1,
        "gold_parse": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
        "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";",
        "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
        "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
        "correctness": 1,
        "gold_parse": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;",
        "question": "List the name of the company that produced more than one phone model.",
        "correctness": 1,
        "gold_parse": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;",
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "correctness": 1,
        "gold_parse": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
        "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
        "question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?",
        "correctness": 1,
        "gold_parse": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;",
        "question": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\""
    },
    {
        "db_id": "phone_1",
        "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";",
        "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;",
        "question": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
        "question": "Find the number of phones for each accreditation type.",
        "correctness": 1,
        "gold_parse": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
        "question": "How many phones belongs to each accreditation type?",
        "correctness": 1,
        "gold_parse": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3",
        "question": "Find the accreditation level that more than 3 phones use.",
        "correctness": 1,
        "gold_parse": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT * FROM chip_model",
        "question": "Find the details for all chip models.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM chip_model"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "How many models do not have the wifi function?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "Count the number of chip model that do not have wifi.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT model_name FROM chip_model ORDER BY launch_year",
        "question": "List all the model names sorted by their launch year.",
        "correctness": 1,
        "gold_parse": "SELECT model_name FROM chip_model ORDER BY launch_year"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
        "question": "Find the average ram mib size of the chip models that are never used by any phone.",
        "correctness": 1,
        "gold_parse": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'",
        "question": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "correctness": 1,
        "gold_parse": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "correctness": 1,
        "gold_parse": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'"
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(*) FROM country",
        "question": "How many countries are there in total?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM country"
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(*) FROM country",
        "question": "Count the number of countries.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM country"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Country_name ,  Capital FROM country",
        "question": "Show the country name and capital of all countries.",
        "correctness": 1,
        "gold_parse": "SELECT Country_name ,  Capital FROM country"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Country_name ,  Capital FROM country",
        "question": "What are the names and capitals of each country?",
        "correctness": 1,
        "gold_parse": "SELECT Country_name ,  Capital FROM country"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "question": "Show all official native languages that contain the word \"English\".",
        "correctness": 1,
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "question": "What are the official native languages that contain the string \"English\".",
        "correctness": 1,
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season",
        "question": "Show all distinct positions of matches.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season"
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season",
        "question": "What are the different positions for match season?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
        "question": "Show the players from college UCLA.",
        "correctness": 1,
        "gold_parse": "SELECT Player FROM match_season WHERE College  =  \"UCLA\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
        "question": "Who are the players from UCLA?",
        "correctness": 1,
        "gold_parse": "SELECT Player FROM match_season WHERE College  =  \"UCLA\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "question": "Show the distinct position of players from college UCLA or Duke.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "question": "What are the different positions of players from UCLA or Duke colleges?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "correctness": 1,
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "correctness": 1,
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT Team) FROM match_season",
        "question": "How many distinct teams are involved in match seasons?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Team) FROM match_season"
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT Team) FROM match_season",
        "question": "Count the number of different teams involved in match season.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Team) FROM match_season"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player ,  Years_Played FROM player",
        "question": "Show the players and the years played.",
        "correctness": 1,
        "gold_parse": "SELECT Player ,  Years_Played FROM player"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player ,  Years_Played FROM player",
        "question": "Who are the different players and how many years has each played?",
        "correctness": 1,
        "gold_parse": "SELECT Player ,  Years_Played FROM player"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM Team",
        "question": "Show all team names.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Team"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM Team",
        "question": "What are the names of all teams?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Team"
    },
    {
        "db_id": "match_season",
        "query": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "question": "Show the season, the player, and the name of the country that player belongs to.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country"
    },
    {
        "db_id": "match_season",
        "query": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "question": "For each player, what are their name, season, and country that they belong to?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country"
    },
    {
        "db_id": "match_season",
        "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
        "question": "Which players are from Indonesia?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
        "question": "Who are the players from Indonesia?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "question": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "question": "Give the different positions of players who play for the country with the capital Dublin.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "question": "What are the official languages of the countries of players from Maryland or Duke college?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "question": "Show the season, the player, and the name of the team that players belong to.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id"
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id"
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
        "question": "Show the positions of the players from the team with name \"Ryley Goldner\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
        "question": "Return the positions of players on the team Ryley Goldner.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "question": "Count the number of different colleges that players who play for Columbus Crew are from.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "question": "Show the players and years played for players from team \"Columbus Crew\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "question": "What are the players who played for Columbus Crew, and how many years did each play for?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
        "question": "Show the position of players and the corresponding number of players.",
        "correctness": 1,
        "gold_parse": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION"
    },
    {
        "db_id": "match_season",
        "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
        "question": "How many players played each position?",
        "correctness": 1,
        "gold_parse": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "question": "Show the country names and the corresponding number of players.",
        "correctness": 1,
        "gold_parse": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "question": "How many players are from each country?",
        "correctness": 1,
        "gold_parse": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"
    },
    {
        "db_id": "match_season",
        "query": "SELECT player FROM match_season ORDER BY College ASC",
        "question": "Return all players sorted by college in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT player FROM match_season ORDER BY College ASC"
    },
    {
        "db_id": "match_season",
        "query": "SELECT player FROM match_season ORDER BY College ASC",
        "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT player FROM match_season ORDER BY College ASC"
    },
    {
        "db_id": "match_season",
        "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the most common position of players in match seasons.",
        "correctness": 1,
        "gold_parse": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "match_season",
        "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the position that is most common among players in match seasons?",
        "correctness": 1,
        "gold_parse": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "question": "What are the three colleges from which the most players are from?",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
        "question": "Show the name of colleges that have at least two players.",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
        "question": "What are the names of all colleges that have two or more players?",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "question": "Show the name of colleges that have at least two players in descending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "What are the names of teams that do no have match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "Return the names of teams that have no match season record.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "What are the names of countries that have both players with position forward and players with position defender?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "question": "Which college have both players with position midfielder and players with position defender?",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT count(*) FROM climber",
        "question": "How many climbers are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT count(*) FROM climber",
        "question": "Count the number of climbers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "List the names of climbers in descending order of points.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "What are the names of the climbers, ordered by points descending?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
        "question": "List the names of climbers whose country is not Switzerland.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber WHERE Country != \"Switzerland\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
        "question": "What are the names of climbers who are not from the country of Switzerland?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber WHERE Country != \"Switzerland\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
        "question": "What is the maximum point for climbers whose country is United Kingdom?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
        "question": "Return the maximum number of points for climbers from the United Kingdom.",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "How many distinct countries are the climbers from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "Count the number of different countries that climbers are from.",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM mountain ORDER BY Name ASC",
        "question": "What are the names of mountains in ascending alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM mountain ORDER BY Name ASC"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM mountain ORDER BY Name ASC",
        "question": "Give the names of mountains in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM mountain ORDER BY Name ASC"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Country FROM mountain WHERE Height  >  5000",
        "question": "What are the countries of mountains with height bigger than 5000?",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM mountain WHERE Height  >  5000"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Country FROM mountain WHERE Height  >  5000",
        "question": "Return the countries of the mountains that have a height larger than 5000.",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM mountain WHERE Height  >  5000"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
        "question": "What is the name of the highest mountain?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
        "question": "Return the name of the mountain with the greatest height.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
        "question": "List the distinct ranges of the mountains with the top 3 prominence.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3"
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
        "question": "What are the different ranges of the 3 mountains with the highest prominence?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3"
    },
    {
        "db_id": "climbing",
        "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "question": "Show names of climbers and the names of mountains they climb.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"
    },
    {
        "db_id": "climbing",
        "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "question": "What are the names of climbers and the corresponding names of mountains that they climb?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"
    },
    {
        "db_id": "climbing",
        "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "question": "Show the names of climbers and the heights of mountains they climb.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"
    },
    {
        "db_id": "climbing",
        "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"
    },
    {
        "db_id": "climbing",
        "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
        "question": "Show the height of the mountain climbed by the climber with the maximum points.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
        "question": "What is the height of the mountain climbined by the climbing who had the most points?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
        "question": "Show the times used by climbers to climb mountains in Country Uganda.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
        "question": "What are the times used by climbers who climbed mountains in the country of Uganda?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
        "question": "Please show the countries and the number of climbers from each country.",
        "correctness": 1,
        "gold_parse": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
        "question": "How many climbers are from each country?",
        "correctness": 1,
        "gold_parse": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1",
        "question": "List the countries that have more than one mountain.",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1",
        "question": "Which countries have more than one mountain?",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "question": "List the names of mountains that do not have any climber.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "question": "What are the names of countains that no climber has climbed?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
        "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
        "question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the range that has the most number of mountains.",
        "correctness": 1,
        "gold_parse": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which range contains the most mountains?",
        "correctness": 1,
        "gold_parse": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
        "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
        "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT count(*) FROM body_builder",
        "question": "How many body builders are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM body_builder"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Total FROM body_builder ORDER BY Total ASC",
        "question": "List the total scores of body builders in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT Total FROM body_builder ORDER BY Total ASC"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "correctness": 1,
        "gold_parse": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT avg(Snatch) FROM body_builder",
        "question": "What is the average snatch score of body builders?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Snatch) FROM body_builder"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "question": "What are the clean and jerk score of the body builder with the highest total score?",
        "correctness": 1,
        "gold_parse": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Birth_Date FROM People ORDER BY Height ASC",
        "question": "What are the birthdays of people in ascending order of height?",
        "correctness": 1,
        "gold_parse": "SELECT Birth_Date FROM People ORDER BY Height ASC"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of body builders?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300",
        "question": "What are the names of body builders whose total score is higher than 300?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "question": "What is the name of the body builder with the greatest body weight?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
        "question": "What are the birth date and birth place of the body builder with the highest total points?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315",
        "question": "What are the heights of body builders with total score smaller than 315?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200",
        "question": "What is the average total score of body builders with height bigger than 200?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC",
        "question": "What are the names of body builders in descending order of total scores?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",
        "question": "List each birth place along with the number of people from there.",
        "correctness": 1,
        "gold_parse": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common birth place of people?",
        "correctness": 1,
        "gold_parse": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2",
        "question": "What are the birth places that are shared by at least two people?",
        "correctness": 1,
        "gold_parse": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
        "question": "List the height and weight of people in descending order of height.",
        "correctness": 1,
        "gold_parse": "SELECT Height ,  Weight FROM people ORDER BY Height DESC"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT * FROM body_builder",
        "question": "Show all information about each body builder.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM body_builder"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",
        "question": "List the names and origins of people who are not body builders.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT count(DISTINCT Birth_Place) FROM people",
        "question": "How many distinct birth places are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Birth_Place) FROM people"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
        "question": "How many persons are not body builders?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;",
        "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.",
        "correctness": 1,
        "gold_parse": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";",
        "question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
        "correctness": 1,
        "gold_parse": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT min(snatch) FROM body_builder",
        "question": "What is the minimum snatch score?",
        "correctness": 1,
        "gold_parse": "SELECT min(snatch) FROM body_builder"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT count(*) FROM election",
        "question": "How many elections are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM election"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Votes FROM election ORDER BY Votes DESC",
        "question": "List the votes of elections in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Date ,  Vote_Percent FROM election",
        "question": "List the dates and vote percents of elections.",
        "correctness": 1,
        "gold_parse": "SELECT Date ,  Vote_Percent FROM election"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
        "question": "What are the minimum and maximum vote percents of elections?",
        "correctness": 1,
        "gold_parse": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Name ,  Party FROM representative",
        "question": "What are the names and parties of representatives?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Party FROM representative"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Name FROM Representative WHERE Party != \"Republican\"",
        "question": "What are the names of representatives whose party is not \"Republican\"?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Representative WHERE Party != \"Republican\""
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"",
        "question": "What are the life spans of representatives from New York state or Indiana state?",
        "correctness": 1,
        "gold_parse": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\""
    },
    {
        "db_id": "election_representative",
        "query": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",
        "question": "What are the names of representatives and the dates of elections they participated in.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000",
        "question": "What are the names of representatives with more than 10000 votes in election?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC",
        "question": "What are the names of representatives in descending order of votes?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1",
        "question": "What is the party of the representative that has the smallest number of votes.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC",
        "question": "What are the lifespans of representatives in descending order of vote percent?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"",
        "question": "What is the average number of votes of representatives from party \"Republican\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\""
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party",
        "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
        "correctness": 1,
        "gold_parse": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the party that has the largest number of representatives?",
        "correctness": 1,
        "gold_parse": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3",
        "question": "What parties have at least three representatives?",
        "correctness": 1,
        "gold_parse": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "question": "What states have at least two representatives?",
        "correctness": 1,
        "gold_parse": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
        "question": "List the names of representatives that have not participated in elections listed here.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"",
        "question": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.",
        "correctness": 1,
        "gold_parse": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\""
    },
    {
        "db_id": "election_representative",
        "query": "SELECT count(DISTINCT Party) FROM representative",
        "question": "How many distinct parties are there for representatives?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Party) FROM representative"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT count(*) FROM Apartment_Bookings",
        "question": "How many apartment bookings are there in total?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Apartment_Bookings"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT count(*) FROM Apartment_Bookings",
        "question": "Count the total number of apartment bookings.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Apartment_Bookings"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
        "question": "Show the start dates and end dates of all the apartment bookings.",
        "correctness": 1,
        "gold_parse": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
        "question": "What are the start date and end date of each apartment booking?",
        "correctness": 1,
        "gold_parse": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT DISTINCT building_description FROM Apartment_Buildings",
        "question": "Show all distinct building descriptions.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT building_description FROM Apartment_Buildings"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT DISTINCT building_description FROM Apartment_Buildings",
        "question": "Give me a list of all the distinct building descriptions.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT building_description FROM Apartment_Buildings"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"",
        "question": "Show the short names of the buildings managed by \"Emma\".",
        "correctness": 1,
        "gold_parse": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"",
        "question": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.",
        "correctness": 1,
        "gold_parse": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
        "question": "Show the addresses and phones of all the buildings managed by \"Brenden\".",
        "correctness": 1,
        "gold_parse": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
        "question": "What are the address and phone number of the buildings managed by \"Brenden\"?",
        "correctness": 1,
        "gold_parse": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
        "question": "What are the building full names that contain the word \"court\"?",
        "correctness": 1,
        "gold_parse": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
        "question": "Find all the building full names containing the word \"court\".",
        "correctness": 1,
        "gold_parse": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
        "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "correctness": 1,
        "gold_parse": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
        "question": "Give me the minimum and maximum bathroom count among all the apartments.",
        "correctness": 1,
        "gold_parse": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(bedroom_count) FROM Apartments",
        "question": "What is the average number of bedrooms of all apartments?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bedroom_count) FROM Apartments"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(bedroom_count) FROM Apartments",
        "question": "Find the average number of bedrooms of all the apartments.",
        "correctness": 1,
        "gold_parse": "SELECT avg(bedroom_count) FROM Apartments"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number ,  room_count FROM Apartments",
        "question": "Return the apartment number and the number of rooms for each apartment.",
        "correctness": 1,
        "gold_parse": "SELECT apt_number ,  room_count FROM Apartments"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number ,  room_count FROM Apartments",
        "question": "What are the apartment number and the room count of each apartment?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number ,  room_count FROM Apartments"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "question": "What is the average number of rooms of apartments with type code \"Studio\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "question": "Find the average room count of the apartments that have the \"Studio\" type code.",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT guest_first_name ,  guest_last_name FROM Guests",
        "question": "Return the first names and last names of all guests",
        "correctness": 1,
        "gold_parse": "SELECT guest_first_name ,  guest_last_name FROM Guests"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT guest_first_name ,  guest_last_name FROM Guests",
        "question": "What are the first names and last names of all the guests?",
        "correctness": 1,
        "gold_parse": "SELECT guest_first_name ,  guest_last_name FROM Guests"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "question": "Return the date of birth for all the guests with gender code \"Male\".",
        "correctness": 1,
        "gold_parse": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "question": "What are dates of birth of all the guests whose gender is \"Male\"?",
        "correctness": 1,
        "gold_parse": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "question": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "question": "What are the apartment number, start date, and end date of each apartment booking?",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"",
        "question": "What are the booking start and end dates of the apartments with type code \"Duplex\"?",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"",
        "question": "Return the booking start date and end date for the apartments that have type code \"Duplex\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
        "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
        "question": "Find the booking start date and end date for the apartments that have more than two bedrooms.",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
        "question": "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
        "question": "Tell me the booking status code for the apartment with number \"Suite 634\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
        "question": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
        "question": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "question": "Show the average room count of the apartments that have booking status code \"Provisional\".",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "question": "What is the average room count of the apartments whose booking status code is \"Provisional\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "question": "Show the guest first names, start dates, and end dates of all the apartment bookings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "question": "What are the guest first name, start date, and end date of each apartment booking?",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
        "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
        "question": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
        "question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
        "question": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
        "question": "Show the facility codes of apartments with more than 4 bedrooms.",
        "correctness": 1,
        "gold_parse": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
        "question": "What are the facility codes of the apartments with more than four bedrooms?",
        "correctness": 1,
        "gold_parse": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
        "question": "Show the total number of rooms of all apartments with facility code \"Gym\".",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
        "question": "Find the total number of rooms in the apartments that have facility code \"Gym\".",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "correctness": 1,
        "gold_parse": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "correctness": 1,
        "gold_parse": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
        "question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
        "question": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "question": "Show the booking status code and the corresponding number of bookings.",
        "correctness": 1,
        "gold_parse": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
        "correctness": 1,
        "gold_parse": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "question": "Sort the apartment numbers in ascending order of room count.",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
        "question": "Return the apartment number with the largest number of bedrooms.",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
        "question": "What is the apartment number of the apartment with the most beds?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "question": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "question": "What are the top three apartment types in terms of the average room count? Give me the",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the most common apartment type code.",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which apartment type code appears the most often?",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the most common apartment type code among apartments with more than 1 bathroom.",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which apartment type code is the most common among apartments with more than one bathroom?",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
        "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
        "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.",
        "correctness": 1,
        "gold_parse": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "question": "How many apartments do not have any facility?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "question": "Find the number of apartments that have no facility.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "question": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
        "question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.",
        "correctness": 1,
        "gold_parse": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
        "question": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT count(*) FROM game WHERE season  >  2007",
        "question": "How many games are held after season 2007?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM game WHERE season  >  2007"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT Date FROM game ORDER BY home_team DESC",
        "question": "List the dates of games by the home team name in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT season ,  home_team ,  away_team FROM game",
        "question": "List the season, home team, away team of all the games.",
        "correctness": 1,
        "gold_parse": "SELECT season ,  home_team ,  away_team FROM game"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium",
        "question": "What are the maximum, minimum and average home games each stadium held?",
        "correctness": 1,
        "gold_parse": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100",
        "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?",
        "correctness": 1,
        "gold_parse": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "correctness": 1,
        "gold_parse": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "correctness": 1,
        "gold_parse": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'",
        "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
        "question": "How many different kinds of information sources are there for injury accidents?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT SOURCE) FROM injury_accident"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "question": "How many games are free of injury accidents?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010",
        "question": "How many distinct kinds of injuries happened after season 2010?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
        "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id",
        "question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
        "question": "Which stadium name contains the substring \"Bank\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\""
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id",
        "question": "How many games has each stadium held?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "correctness": 1,
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
        "question": "List all country and league names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
        "question": "How many leagues are there in England?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\""
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT avg(weight) FROM Player",
        "question": "What is the average weight of all players?",
        "correctness": 1,
        "gold_parse": "SELECT avg(weight) FROM Player"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT max(weight) ,  min(weight) FROM Player",
        "question": "What is the maximum and minimum height of all players?",
        "correctness": 1,
        "gold_parse": "SELECT max(weight) ,  min(weight) FROM Player"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )",
        "question": "List all player names who have an overall rating higher than the average.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)",
        "question": "What are the names of players who have the best dribbling?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"",
        "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\""
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
        "question": "List the names of all left-footed players who have overall rating between 85 and 90.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
        "question": "What is the average rating for right-footed players and left-footed players?",
        "correctness": 1,
        "gold_parse": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "correctness": 1,
        "gold_parse": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "correctness": 1,
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"",
        "question": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
        "correctness": 1,
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\""
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "question": "Who are the top 3 players in terms of overall rating?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
        "question": "List the names and birthdays of the top five players in terms of potential.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT count(*) FROM performance",
        "question": "How many performances are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM performance"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "question": "List the hosts of performances in ascending order of attendance.",
        "correctness": 1,
        "gold_parse": "SELECT HOST FROM performance ORDER BY Attendance ASC"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT Date ,  LOCATION FROM performance",
        "question": "What are the dates and locations of performances?",
        "correctness": 1,
        "gold_parse": "SELECT Date ,  LOCATION FROM performance"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"",
        "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
        "correctness": 1,
        "gold_parse": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\""
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT avg(Attendance) FROM performance",
        "question": "What is the average number of attendees for performances?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Attendance) FROM performance"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1",
        "question": "What is the date of the performance with the highest number of attendees?",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION",
        "question": "Show different locations and the number of performances at each location.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common location of performances.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2",
        "question": "Show the locations that have at least two performances.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000",
        "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID",
        "question": "Show the names of members and the location of the performances they attended.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",
        "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"",
        "question": "Show the dates of performances with attending members whose roles are \"Violin\".",
        "correctness": 1,
        "gold_parse": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\""
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC",
        "question": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)",
        "question": "List the names of members who did not attend any performance.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
        "question": "Find the buildings which have rooms with capacity more than 50.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50"
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
        "question": "What are the distinct buildings with capacities of greater than 50?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
        "question": "Count the number of rooms that are not in the Lamberton building.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
        "question": "How many classrooms are not in Lamberton?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "question": "What is the name and building of the departments whose budget is more than the average budget?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "question": "Give the name and building of the departments with greater than average budget.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "correctness": 1,
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    {
        "db_id": "college_2",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
        "correctness": 1,
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
        "question": "Find the name and building of the department with the highest budget.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
        "question": "What is the department name and corresponding building for the department with the greatest budget?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "question": "What is the name of the student who has the highest total credits in the History department.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "question": "Give the name of the student in the History department with the most credits.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
        "question": "How many rooms does the Lamberton building have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
        "question": "Count the number of classrooms in Lamberton.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(DISTINCT s_id) FROM advisor",
        "question": "How many students have advisors?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT s_id) FROM advisor"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(DISTINCT s_id) FROM advisor",
        "question": "Count the number of students who have advisors.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT s_id) FROM advisor"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(DISTINCT dept_name) FROM course",
        "question": "How many departments offer courses?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT dept_name) FROM course"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(DISTINCT dept_name) FROM course",
        "question": "Count the number of departments which offer courses.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT dept_name) FROM course"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "question": "How many different courses offered by Physics department?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "question": "Count the number of courses in the Physics department.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
        "question": "Find the title of courses that have two prerequisites?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
        "question": "What are the titles for courses with two prerequisites?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "question": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "question": "What is the title, credit value, and department name for courses with more than one prerequisite?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "question": "How many courses that do not have prerequisite?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "question": "Count the number of courses without prerequisites.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "question": "Find the name of the courses that do not have any prerequisite?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "question": "What are the titles of courses without prerequisites?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT COUNT (DISTINCT id) FROM teaches",
        "question": "How many different instructors have taught some course?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches"
    },
    {
        "db_id": "college_2",
        "query": "SELECT COUNT (DISTINCT id) FROM teaches",
        "question": "Count the number of distinct instructors who have taught a course.",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches"
    },
    {
        "db_id": "college_2",
        "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
        "question": "Find the total budgets of the Marketing or Finance department.",
        "correctness": 1,
        "gold_parse": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
        "question": "What is the sum of budgets of the Marketing and Finance departments?",
        "correctness": 1,
        "gold_parse": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "question": "Find the department name of the instructor whose name contains 'Soisalon'.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "question": "Count the number of rooms in Lamberton with capacity lower than 50.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "question": "Find the name and budget of departments whose budgets are more than the average budget.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
        "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
        "question": "Give the name of the lowest earning instructor in the Statistics department.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "question": "Find the title of course that is provided by both Statistics and Psychology departments.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "question": "What is the title of a course that is listed in both the Statistics and Psychology departments?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "question": "Find the title of course that is provided by Statistics but not Psychology departments.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
        "correctness": 1,
        "gold_parse": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
        "question": "Find the name of students who took any class in the years of 2009 and 2010.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
        "question": "What are the names of the students who took classes in 2009 or 2010?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "question": "What are the names of the 3 departments with the most courses?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "question": "Find the name of the department that offers the highest total credits?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "question": "What is the name of the department with the most credits?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course ORDER BY title ,  credits",
        "question": "List the names of all courses ordered by their titles and credits.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course ORDER BY title ,  credits",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "question": "Which department has the lowest budget?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "question": "Give the name of the department with the lowest budget.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "question": "List the names and buildings of all departments sorted by the budget from large to small.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  building FROM department ORDER BY budget DESC"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "question": "What are the names and buildings of the deparments, sorted by budget descending?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  building FROM department ORDER BY budget DESC"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "question": "Who is the instructor with the highest salary?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "question": "Give the name of the highest paid instructor.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT * FROM instructor ORDER BY salary",
        "question": "List the information of all instructors ordered by their salary in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM instructor ORDER BY salary"
    },
    {
        "db_id": "college_2",
        "query": "SELECT * FROM instructor ORDER BY salary",
        "question": "Give all information regarding instructors, in order of salary from least to greatest.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM instructor ORDER BY salary"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "question": "Find the name of the students and their department names sorted by their total credits in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  dept_name FROM student ORDER BY tot_cred"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  dept_name FROM student ORDER BY tot_cred"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "question": "Find the name of instructors who are advising more than one student.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "question": "What are the names of instructors who advise more than one student?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
        "question": "Find the name of the students who have more than one advisor?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
        "question": "What are the names of students who have more than one advisor?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
        "question": "Find the number of rooms with more than 50 capacity for each building.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
        "question": "How many rooms in each building have a capacity of over 50?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
    },
    {
        "db_id": "college_2",
        "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
        "question": "Find the maximum and average capacity among rooms in each building.",
        "correctness": 1,
        "gold_parse": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building"
    },
    {
        "db_id": "college_2",
        "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
        "question": "What are the greatest and average capacity for rooms in each building?",
        "correctness": 1,
        "gold_parse": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "question": "Find the title of the course that is offered by more than one department.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "question": "What are the titles of courses that are offered in more than one department?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "question": "Find the total credits of courses provided by different department.",
        "correctness": 1,
        "gold_parse": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "question": "How many total credits are offered by each department?",
        "correctness": 1,
        "gold_parse": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
        "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.",
        "correctness": 1,
        "gold_parse": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
        "question": "What is the lowest salary in departments with average salary greater than the overall average.",
        "correctness": 1,
        "gold_parse": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "question": "Find the number of courses provided in each semester and year.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "question": "How many courses are provided in each semester and year?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
    },
    {
        "db_id": "college_2",
        "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year which offers the largest number of courses.",
        "correctness": 1,
        "gold_parse": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the greatest number of courses?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year and semester when offers the largest number of courses.",
        "correctness": 1,
        "gold_parse": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year and semester with the most courses?",
        "correctness": 1,
        "gold_parse": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of department has the highest amount of students?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the deparment with the highest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "question": "Find the total number of students in each department.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "question": "How many students are in each department?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "question": "Find the semester and year which has the least number of student taking any class.",
        "correctness": 1,
        "gold_parse": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "question": "Which semeseter and year had the fewest students?",
        "correctness": 1,
        "gold_parse": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "question": "What is the id of the instructor who advises of all students from History department?",
        "correctness": 1,
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "question": "Give id of the instructor who advises students in the History department.",
        "correctness": 1,
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "question": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "question": "What are the names and salaries of instructors who advises students in the History department?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "question": "Find the id of the courses that do not have any prerequisite?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "question": "What are the ids of courses without prerequisites?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "question": "What are the names of courses without prerequisites?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "question": "What is the title of the prerequisite class of International Finance course?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "question": "Give the title of the prerequisite to the course International Finance.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "question": "Find the title of course whose prerequisite is course Differential Geometry.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "question": "What is the title of the course with Differential Geometry as a prerequisite?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "question": "Find the names of students who have taken any course in the fall semester of year 2003.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "question": "What are the names of students who took a course in the Fall of 2003?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "question": "Give the title of the course offered in Chandler during the Fall of 2010.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "question": "Find the name of the instructors who taught C Programming course before.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "question": "What are the names of instructors who have taught C Programming courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "question": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "question": "What are the names and salaries of instructors who advise students in the Math department?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "question": "What is the title of the course that is a prerequisite for Mobile Computing?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "question": "What is the name of the instructor who advises the student with the greatest number of total credits?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "question": "Find the name of instructors who didn't teach any courses?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "question": "What are the names of instructors who didn't teach?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "question": "Find the id of instructors who didn't teach any courses?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"
    },
    {
        "db_id": "college_2",
        "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "question": "What are the ids of instructors who didnt' teach?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "question": "Find the names of instructors who didn't each any courses in any Spring semester.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "question": "What are the names of instructors who didn't teach courses in the Spring?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "question": "Find the name of the department which has the highest average salary of professors.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "question": "Which department has the highest average instructor salary?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
        "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
        "question": "How many instructors are in the department with the highest budget, and what is their average salary?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",
        "question": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?",
        "correctness": 1,
        "gold_parse": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",
        "question": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.",
        "correctness": 1,
        "gold_parse": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "question": "Find the name of students who didn't take any course from Biology department.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "question": "What are the names of students who haven't taken any Biology courses?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "question": "Find the total number of students and total number of instructors for each department.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "question": "How many students and instructors are in each department?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "question": "What are the names of students who have taken the prerequisite for the course International Finance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
        "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
        "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "question": "Find the name of students who took some course offered by Statistics department.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "question": "What are the names of students who have taken Statistics courses?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
        "correctness": 1,
        "gold_parse": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "correctness": 1,
        "gold_parse": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "question": "Find the names of all instructors in computer science department",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "question": "What are the names of all instructors in the Comp. Sci. department?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
        "question": "Find the names of all instructors who have taught some course and the course_id.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
        "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
        "question": "Find the names of all instructors in the Art department who have taught some course and the course_id.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
        "question": "What are the names of Art instructors who have taught a course, and the corresponding course id?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
        "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
        "question": "What are the names of all instructors with names that include \"dar\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT name FROM  instructor ORDER BY name",
        "question": "List in alphabetic order the names of all distinct instructors.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM  instructor ORDER BY name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT name FROM  instructor ORDER BY name",
        "question": "List the distinct names of the instructors, ordered by name.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM  instructor ORDER BY name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Find courses that ran in Fall 2009 or in Spring 2010.",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Find courses that ran in Fall 2009 and in Spring 2010.",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Find courses that ran in Fall 2009 but not in Spring 2010.",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "question": "Find the salaries of all distinct instructors that are less than the largest salary.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "How many instructors teach a course in the Spring of 2010?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
        "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
        "question": "What are the names and average salaries for departments with average salary higher than 42000?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')"
    },
    {
        "db_id": "debate",
        "query": "SELECT count(*) FROM debate",
        "question": "How many debates are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM debate"
    },
    {
        "db_id": "debate",
        "query": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "question": "List the venues of debates in ascending order of the number of audience.",
        "correctness": 1,
        "gold_parse": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC"
    },
    {
        "db_id": "debate",
        "query": "SELECT Date ,  Venue FROM debate",
        "question": "What are the date and venue of each debate?",
        "correctness": 1,
        "gold_parse": "SELECT Date ,  Venue FROM debate"
    },
    {
        "db_id": "debate",
        "query": "SELECT Date FROM debate WHERE Num_of_Audience  >  150",
        "question": "List the dates of debates with number of audience bigger than 150",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM debate WHERE Num_of_Audience  >  150"
    },
    {
        "db_id": "debate",
        "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36",
        "question": "Show the names of people aged either 35 or 36.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36"
    },
    {
        "db_id": "debate",
        "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
        "question": "What is the party of the youngest people?",
        "correctness": 1,
        "gold_parse": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1"
    },
    {
        "db_id": "debate",
        "query": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party",
        "question": "Show different parties of people along with the number of people in each party.",
        "correctness": 1,
        "gold_parse": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party"
    },
    {
        "db_id": "debate",
        "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the party that has the most people.",
        "correctness": 1,
        "gold_parse": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "debate",
        "query": "SELECT DISTINCT Venue FROM debate",
        "question": "Show the distinct venues of debates",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Venue FROM debate"
    },
    {
        "db_id": "debate",
        "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID",
        "question": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID"
    },
    {
        "db_id": "debate",
        "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC",
        "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC"
    },
    {
        "db_id": "debate",
        "query": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
        "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200"
    },
    {
        "db_id": "debate",
        "query": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
        "question": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name"
    },
    {
        "db_id": "debate",
        "query": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show the names of people who have been on the negative side of debates at least twice.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "debate",
        "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
        "question": "List the names of people that have not been on the affirmative side of debates.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT customer_details FROM customers ORDER BY customer_details",
        "question": "List the names of all the customers in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers ORDER BY customer_details"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT customer_details FROM customers ORDER BY customer_details",
        "question": "Sort the customer names in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers ORDER BY customer_details"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
        "question": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
        "question": "What are the type codes of the policies used by the customer \"Dayana Robel\"?",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which type of policy is most frequently used? Give me the policy type code.",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the type code of the most frequently used policy.",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
        "question": "Find all the policy types that are used by more than 2 customers.",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
        "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
        "question": "Find the total and average amount paid in claim headers.",
        "correctness": 1,
        "gold_parse": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
        "question": "What are the total amount and average amount paid in claim headers?",
        "correctness": 1,
        "gold_parse": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "question": "Find the total amount claimed in the most recently created document.",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "question": "How much amount in total were claimed in the most recently created document?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "question": "What is the name of the customer who has made the largest amount of claim in a single claim?",
        "correctness": 1,
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "question": "What is the name of the customer who has made the minimum amount of payment in one claim?",
        "correctness": 1,
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "question": "Find the names of customers who have no policies associated.",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "question": "What are the names of customers who do not have any policies?",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT count(*) FROM claims_processing_stages",
        "question": "How many claim processing stages are there in total?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM claims_processing_stages"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT count(*) FROM claims_processing_stages",
        "question": "Find the number of distinct stages in claim processing.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM claims_processing_stages"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "correctness": 1,
        "gold_parse": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which claim processing stage has the most claims? Show the claim status name.",
        "correctness": 1,
        "gold_parse": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "question": "Find the names of customers whose name contains \"Diana\".",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "question": "Which customers have the substring \"Diana\" in their names? Return the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "question": "Find the names of the customers who have an deputy policy.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "question": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "question": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "question": "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "question": "Find the names of all the customers and staff members.",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "question": "What are the names of the customers and staff members?",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",
        "question": "Find the number of records of each policy type and its type code.",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",
        "question": "For each policy type, return its type code and its count in the record.",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the customer that has been involved in the most policies.",
        "correctness": 1,
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "question": "Which customer have the most policies? Give me the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "question": "What is the description of the claim status \"Open\"?",
        "correctness": 1,
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "question": "Find the description of the claim status \"Open\".",
        "correctness": 1,
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "question": "How many distinct claim outcome codes are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "question": "Count the number of distinct claim outcome codes.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "question": "Which customer is associated with the latest policy?",
        "correctness": 1,
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "question": "Find the customer who started a policy most recently.",
        "correctness": 1,
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Accounts",
        "question": "Show the number of accounts.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Accounts",
        "question": "How many accounts are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "question": "How many customers have opened an account?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "question": "Count the number of customers who have an account.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "question": "What are the ids, date opened, name, and other details for all accounts?",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
        "question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "correctness": 1,
        "gold_parse": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
        "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
        "correctness": 1,
        "gold_parse": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"",
        "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "correctness": 1,
        "gold_parse": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"",
        "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?",
        "correctness": 1,
        "gold_parse": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"",
        "question": "Show the first name and last name for the customer with account name 900.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"",
        "question": "What are the full names of customers with the account name 900?",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "question": "How many customers don't have an account?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "question": "Count the number of customers who do not have an account.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "question": "Show customer ids who don't have an account.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "question": "What are the customer ids for customers who do not have an account?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",
        "question": "How many accounts does each customer have? List the number and customer id.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",
        "question": "Count the number of accounts corresponding to each customer id.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the customer id, first and last name with most number of accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and full name of the customer with the most accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "question": "Show first name and id for all customers with at least 2 accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "question": "What are the first names and ids for customers who have two or more accounts?",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Customers",
        "question": "Show the number of customers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Customers",
        "question": "Count the number of customers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
        "question": "Show the number of customers for each gender.",
        "correctness": 1,
        "gold_parse": "SELECT gender ,  count(*) FROM Customers GROUP BY gender"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
        "question": "How many customers are there of each gender?",
        "correctness": 1,
        "gold_parse": "SELECT gender ,  count(*) FROM Customers GROUP BY gender"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions",
        "question": "How many transactions do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions",
        "question": "Count the number of transactions.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "question": "How many transaction does each account have? Show the number and account id.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  account_id FROM Financial_transactions"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "question": "Count the number of financial transactions that correspond to each account id.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  account_id FROM Financial_transactions"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "How many transaction does account with name 337 have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "Count the number of financial transactions that the account with the name 337 has.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
        "question": "What is the average, minimum, maximum, and total transaction amount?",
        "correctness": 1,
        "gold_parse": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
        "question": "Return the average, minimum, maximum, and total transaction amounts.",
        "correctness": 1,
        "gold_parse": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "question": "Show ids for all transactions whose amounts are greater than the average.",
        "correctness": 1,
        "gold_parse": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
        "question": "Show the transaction types and the total amount of transactions.",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
        "question": "What are total transaction amounts for each transaction type?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
        "question": "Show the account name, id and the number of transactions for each account.",
        "correctness": 1,
        "gold_parse": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
        "question": "Return the names and ids of each account, as well as the number of transactions.",
        "correctness": 1,
        "gold_parse": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the account id with most number of transactions.",
        "correctness": 1,
        "gold_parse": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the account with the most transactions?",
        "correctness": 1,
        "gold_parse": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
        "question": "Show the account id and name with at least 4 transactions.",
        "correctness": 1,
        "gold_parse": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
        "question": "What are the ids and names of accounts with 4 or more transactions?",
        "correctness": 1,
        "gold_parse": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_size FROM Products",
        "question": "Show all product sizes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_size FROM Products"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_size FROM Products",
        "question": "What are the different product sizes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_size FROM Products"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_color FROM Products",
        "question": "Show all product colors.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_color FROM Products"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_color FROM Products",
        "question": "What are the different product colors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_color FROM Products"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "Show the invoice number and the number of transactions for each invoice.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "How many transactions correspond to each invoice number?",
        "correctness": 1,
        "gold_parse": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "correctness": 1,
        "gold_parse": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?",
        "correctness": 1,
        "gold_parse": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Invoices",
        "question": "How many invoices do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Invoices"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Invoices",
        "question": "Count the number of invoices.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Invoices"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "question": "Show invoice dates and order id and details for all invoices.",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "question": "What are the invoice dates, order ids, and order details for all invoices?",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
        "question": "Show the order ids and the number of invoices for each order.",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
        "question": "How many invoices correspond to each order id?",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "question": "What is the order id and order details for the order more than two invoices.",
        "correctness": 1,
        "gold_parse": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "question": "Return the order ids and details for orderes with two or more invoices.",
        "correctness": 1,
        "gold_parse": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "Show all product names without an order.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "What are the names of products that have never been ordered?",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "question": "Show all product names and the total quantity ordered for each product name.",
        "correctness": 1,
        "gold_parse": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "question": "What are the different product names, and what is the sum of quantity ordered for each product?",
        "correctness": 1,
        "gold_parse": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "question": "Show the order ids and the number of items in each order.",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "question": "How many order items correspond to each order id?",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "question": "Show the product ids and the number of unique orders containing each product.",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "question": "How many distinct order ids correspond to each product?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "question": "Show all product names and the number of customers having an order on each product.",
        "correctness": 1,
        "gold_parse": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "question": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
        "correctness": 1,
        "gold_parse": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "question": "Show order ids and the number of products in each order.",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "question": "How many different products correspond to each order id?",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
        "question": "Show order ids and the total quantity in each order.",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
        "question": "Give the order ids for all orders, as well as the total product quantity in each.",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "How many products were not included in any order?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "Count the number of products that were never ordered.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "wedding",
        "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850",
        "question": "How many churches opened before 1850 are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Church WHERE Open_Date  <  1850"
    },
    {
        "db_id": "wedding",
        "query": "SELECT name ,  open_date ,  organized_by FROM Church",
        "question": "Show the name, open date, and organizer for all churches.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  open_date ,  organized_by FROM Church"
    },
    {
        "db_id": "wedding",
        "query": "SELECT name FROM church ORDER BY open_date DESC",
        "question": "List all church names in descending order of opening date.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM church ORDER BY open_date DESC"
    },
    {
        "db_id": "wedding",
        "query": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2",
        "question": "Show the opening year in whcih at least two churches opened.",
        "correctness": 1,
        "gold_parse": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2"
    },
    {
        "db_id": "wedding",
        "query": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840",
        "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "correctness": 1,
        "gold_parse": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840"
    },
    {
        "db_id": "wedding",
        "query": "SELECT open_date ,  count(*) FROM church GROUP BY open_date",
        "question": "Show all opening years and the number of churches that opened in that year.",
        "correctness": 1,
        "gold_parse": "SELECT open_date ,  count(*) FROM church GROUP BY open_date"
    },
    {
        "db_id": "wedding",
        "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
        "question": "Show the name and opening year for three churches that opened most recently.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3"
    },
    {
        "db_id": "wedding",
        "query": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30",
        "question": "How many female people are older than 30 in our record?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30"
    },
    {
        "db_id": "wedding",
        "query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
        "question": "Show the country where people older than 30 and younger than 25 are from.",
        "correctness": 1,
        "gold_parse": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30"
    },
    {
        "db_id": "wedding",
        "query": "SELECT min(age) ,  max(age) ,  avg(age) FROM people",
        "question": "Show the minimum, maximum, and average age for all people.",
        "correctness": 1,
        "gold_parse": "SELECT min(age) ,  max(age) ,  avg(age) FROM people"
    },
    {
        "db_id": "wedding",
        "query": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)",
        "question": "Show the name and country for all people whose age is smaller than the average.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)"
    },
    {
        "db_id": "wedding",
        "query": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014",
        "question": "Show the pair of male and female names in all weddings after year 2014",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014"
    },
    {
        "db_id": "wedding",
        "query": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
        "question": "Show the name and age for all male people who don't have a wedding.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)"
    },
    {
        "db_id": "wedding",
        "query": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015",
        "question": "Show all church names except for those that had a wedding in year 2015.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015"
    },
    {
        "db_id": "wedding",
        "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2",
        "question": "Show all church names that have hosted least two weddings.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "wedding",
        "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'",
        "question": "Show the names for all females from Canada having a wedding in year 2016.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'"
    },
    {
        "db_id": "wedding",
        "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
        "question": "How many weddings are there in year 2016?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM wedding WHERE YEAR  =  2016"
    },
    {
        "db_id": "wedding",
        "query": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30",
        "question": "Show the church names for the weddings of all people older than 30.",
        "correctness": 1,
        "gold_parse": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30"
    },
    {
        "db_id": "wedding",
        "query": "SELECT country ,  count(*) FROM people GROUP BY country",
        "question": "Show all countries and the number of people from each country.",
        "correctness": 1,
        "gold_parse": "SELECT country ,  count(*) FROM people GROUP BY country"
    },
    {
        "db_id": "wedding",
        "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016",
        "question": "How many churches have a wedding in year 2016?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist",
        "question": "How many artists do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist",
        "question": "Count the number of artists.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "question": "Show all artist name, age, and country ordered by the yeared they joined.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT DISTINCT country FROM artist",
        "question": "What are all distinct country for artists?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT country FROM artist"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT DISTINCT country FROM artist",
        "question": "Return the different countries for artists.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT country FROM artist"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
        "question": "Show all artist names and the year joined who are not from United States.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  year_join FROM artist WHERE country != 'United States'"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
        "question": "What are the names and year of joining for artists that do not have the country \"United States\"?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  year_join FROM artist WHERE country != 'United States'"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "question": "How many artists are above age 46 and joined after 1990?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "question": "Count the number of artists who are older than 46 and joined after 1990.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
        "question": "What is the average and minimum age of all artists from United States.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
        "question": "Return the average and minimum ages across artists from the United States.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
        "question": "What is the name of the artist who joined latest?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
        "question": "Return the name of the artist who has the latest join year.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "question": "How many exhibition are there in year 2005 or after?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "question": "Count the number of exhibitions that happened in or after 2005.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15",
        "question": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "correctness": 1,
        "gold_parse": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15",
        "question": "What are the theme and year for all exhibitions that have a ticket price under 15?",
        "correctness": 1,
        "gold_parse": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "question": "How many exhibitions has each artist had?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
        "question": "Show names for artists without any exhibition.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
        "question": "What are the names of artists that have not had any exhibitions?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
        "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
        "correctness": 1,
        "gold_parse": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
        "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.",
        "correctness": 1,
        "gold_parse": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009",
        "question": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",
        "correctness": 1,
        "gold_parse": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009",
        "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?",
        "correctness": 1,
        "gold_parse": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC",
        "question": "Show theme and year for all exhibitions in an descending order of ticket price.",
        "correctness": 1,
        "gold_parse": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC",
        "question": "What are the themes and years for exhibitions, sorted by ticket price descending?",
        "correctness": 1,
        "gold_parse": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004",
        "question": "What is the theme, date, and attendance for the exhibition in year 2004?",
        "correctness": 1,
        "gold_parse": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004",
        "question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.",
        "correctness": 1,
        "gold_parse": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "correctness": 1,
        "gold_parse": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?",
        "correctness": 1,
        "gold_parse": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
        "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
        "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200",
        "question": "Show all artist names with an average exhibition attendance over 200.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200",
        "question": "What are the names of artist whose exhibitions draw over 200 attendees on average?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT i_id FROM item WHERE title  =  \"orange\"",
        "question": "Find the id of the item whose title is \"orange\".",
        "correctness": 1,
        "gold_parse": "SELECT i_id FROM item WHERE title  =  \"orange\""
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT * FROM item",
        "question": "List all information in the item table.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM item"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT count(*) FROM review",
        "question": "Find the number of reviews.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM review"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT count(*) FROM useracct",
        "question": "How many users are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM useracct"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT avg(rating) ,  max(rating) FROM review",
        "question": "Find the average and maximum rating of all reviews.",
        "correctness": 1,
        "gold_parse": "SELECT avg(rating) ,  max(rating) FROM review"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT min(rank) FROM review",
        "question": "Find the highest rank of all reviews.",
        "correctness": 1,
        "gold_parse": "SELECT min(rank) FROM review"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT count(DISTINCT u_id) FROM review",
        "question": "How many different users wrote some reviews?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT u_id) FROM review"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT count(DISTINCT i_id) FROM review",
        "question": "How many different items were reviewed by some users?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT i_id) FROM review"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "question": "Find the number of items that did not receive any review.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "question": "Find the names of users who did not leave any review.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10",
        "question": "Find the names of goods that receive a rating of 10.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)",
        "question": "Find the titles of items whose rating is higher than the average review rating of all items.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5",
        "question": "Find the titles of items that received any rating below 5.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5",
        "question": "Find the titles of items that received both a rating higher than 8 and a rating below 5.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5",
        "question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
        "question": "Find the name of the item with the lowest average rating.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT title FROM item ORDER BY title",
        "question": "List the titles of all items in alphabetic order .",
        "correctness": 1,
        "gold_parse": "SELECT title FROM item ORDER BY title"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the user who gives the most reviews.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1",
        "question": "Find the name and id of the item with the highest average rating.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "question": "Find the name and id of the good with the highest average rank.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "question": "For each user, return the name and the average rating of reviews given by them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "question": "For each user, find their name and the number of reviews written by them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
        "question": "Find the name of the user who gave the highest rating.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1",
        "question": "Find the name of the source user with the highest average trust score.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id",
        "question": "Find each target user's name and average trust score.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1",
        "question": "Find the name of the target user with the lowest trust score.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "question": "Find the names of the items that did not receive any review.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "question": "Find the number of users who did not write any review.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "question": "Find the number of items without any review.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT count(*) FROM player",
        "question": "How many players are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM player"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Player_name FROM player ORDER BY Votes ASC",
        "question": "List the names of players in ascending order of votes.",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player ORDER BY Votes ASC"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Gender ,  Occupation FROM player",
        "question": "What are the gender and occupation of players?",
        "correctness": 1,
        "gold_parse": "SELECT Gender ,  Occupation FROM player"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "question": "List the name and residence for players whose occupation is not \"Researcher\".",
        "correctness": 1,
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\""
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"",
        "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
        "correctness": 1,
        "gold_parse": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\""
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1",
        "question": "What is the name of the player with the largest number of votes?",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation",
        "question": "Show different occupations along with the number of players in each occupation.",
        "correctness": 1,
        "gold_parse": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common occupation of players.",
        "correctness": 1,
        "gold_parse": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2",
        "question": "Show the residences that have at least two players.",
        "correctness": 1,
        "gold_parse": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID",
        "question": "Show the names of players and names of their coaches.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1",
        "question": "Show the names of players coached by the rank 1 coach.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011",
        "question": "Show the names and genders of players with a coach starting after 2011.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC",
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)",
        "question": "List the names of players that do not have coaches.",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
        "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
        "correctness": 1,
        "gold_parse": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\""
    },
    {
        "db_id": "riding_club",
        "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
        "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
        "correctness": 1,
        "gold_parse": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many gold medals has the club with the most coaches won?",
        "correctness": 1,
        "gold_parse": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(*) FROM gymnast",
        "question": "How many gymnasts are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM gymnast"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(*) FROM gymnast",
        "question": "Count the number of gymnasts.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM gymnast"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "question": "List the total points of gymnasts in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "question": "What are the total points for all gymnasts, ordered by total points descending?",
        "correctness": 1,
        "gold_parse": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
        "question": "List the total points of gymnasts in descending order of floor exercise points.",
        "correctness": 1,
        "gold_parse": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
        "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?",
        "correctness": 1,
        "gold_parse": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
        "question": "What is the average horizontal bar points for all gymnasts?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Horizontal_Bar_Points) FROM gymnast"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
        "question": "Return the average horizontal bar points across all gymnasts.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Horizontal_Bar_Points) FROM gymnast"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Name FROM People ORDER BY Name ASC",
        "question": "What are the names of people in ascending alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM People ORDER BY Name ASC"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Name FROM People ORDER BY Name ASC",
        "question": "Return the names of people, ordered alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM People ORDER BY Name ASC"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "question": "What are the names of gymnasts?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "question": "Return the names of the gymnasts.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"",
        "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\""
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"",
        "question": "Return the names of gymnasts who did not grow up in Santo Domingo.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\""
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
        "question": "What is the age of the tallest person?",
        "correctness": 1,
        "gold_parse": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
        "question": "Return the age of the person with the greatest height.",
        "correctness": 1,
        "gold_parse": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5",
        "question": "List the names of the top 5 oldest people.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5",
        "question": "What are the names of the five oldest people?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "What is the total point count of the youngest gymnast?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "Return the total points of the gymnast with the lowest age.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "question": "What is the average age of all gymnasts?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "question": "Return the average age across all gymnasts.",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5",
        "question": "What are the distinct hometowns of gymnasts with total points more than 57.5?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5",
        "question": "Give the different hometowns of gymnasts that have a total point score of above 57.5.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
        "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
        "question": "How many gymnasts are from each hometown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common hometown of gymnasts?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Return the hometown that is most common among gymnasts.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
        "question": "What are the hometowns that are shared by at least two gymnasts?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
        "question": "Give the hometowns from which two or more gymnasts are from.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC",
        "question": "List the names of gymnasts in ascending order by their heights.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC",
        "question": "What are the names of gymnasts, ordered by their heights ascending?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "question": "List the distinct hometowns that are not associated with any gymnast.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "question": "From which hometowns did no gymnasts come from?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20",
        "question": "Show the hometowns shared by people older than 23 and younger than 20.",
        "correctness": 1,
        "gold_parse": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20",
        "question": "From which hometowns did both people older than 23 and younger than 20 come from?",
        "correctness": 1,
        "gold_parse": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "question": "How many distinct hometowns did these people have?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Hometown) FROM people"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "question": "Count the number of different hometowns of these people.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Hometown) FROM people"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC",
        "question": "Show the ages of gymnasts in descending order of total points.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC",
        "question": "What are the ages of the gymnasts, ordered descending by their total points?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
        "question": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
        "question": "What is the total balance of savings accounts not belonging to someone with the name Brown?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM accounts",
        "question": "How many accounts are there in total?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM accounts"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM accounts",
        "question": "Count the number of accounts.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM accounts"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT sum(balance) FROM checking",
        "question": "What is the total checking balance in all accounts?",
        "correctness": 1,
        "gold_parse": "SELECT sum(balance) FROM checking"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT sum(balance) FROM checking",
        "question": "Find the total balance across checking accounts.",
        "correctness": 1,
        "gold_parse": "SELECT sum(balance) FROM checking"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT avg(balance) FROM checking",
        "question": "Find the average checking balance.",
        "correctness": 1,
        "gold_parse": "SELECT avg(balance) FROM checking"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT avg(balance) FROM checking",
        "question": "What is the average balance in checking accounts?",
        "correctness": 1,
        "gold_parse": "SELECT avg(balance) FROM checking"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "question": "How many accounts have a savings balance above the average savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
        "correctness": 1,
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "question": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "Find the checking balance and saving balance in the Brown\u2019s account.",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT name FROM accounts ORDER BY name",
        "question": "List all customers\u2019 names in the alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM accounts ORDER BY name"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT name FROM accounts ORDER BY name",
        "question": "What are the names of all the customers in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM accounts ORDER BY name"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "question": "Find the name of account that has the lowest total checking and saving balance.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "question": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "Find the name and checking balance of the account with the lowest savings balance.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "question": "Find the number of checking accounts for each account name.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "question": "Find the total saving balance for each account name.",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "question": "Find the name of accounts whose checking balance is below the average checking balance.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "Find the saving balance of the account with the highest checking balance.",
        "correctness": 1,
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?",
        "correctness": 1,
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "question": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "question": "What is the sum of checking and savings balances for all customers, ordered by the total balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "What is the name and checking balance of the account which has the lowest savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "question": "Find the name, checking balance and saving balance of all accounts in the bank.",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "question": "What are the names, checking balances, and savings balances for all customers?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "question": "What are the names of customers with a higher checking balance than savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "question": "What are names and savings balances of the three accounts with the highest savings balances?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT count(*) FROM browser WHERE market_share  >=  5",
        "question": "How many main stream browsers whose market share is at least 5 exist?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM browser WHERE market_share  >=  5"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name FROM browser ORDER BY market_share DESC",
        "question": "List the name of browsers in descending order by market share.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM browser ORDER BY market_share DESC"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT id ,  name ,  market_share FROM browser",
        "question": "List the ids, names and market shares of all browsers.",
        "correctness": 1,
        "gold_parse": "SELECT id ,  name ,  market_share FROM browser"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser",
        "question": "What is the maximum, minimum and average market share of the listed browsers?",
        "correctness": 1,
        "gold_parse": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
        "question": "What is the id and market share of the browser Safari?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'",
        "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?",
        "correctness": 1,
        "gold_parse": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT count(DISTINCT client) FROM web_client_accelerator",
        "question": "How many different kinds of clients are supported by the web clients accelerators?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT client) FROM web_client_accelerator"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
        "question": "How many accelerators are not compatible with the browsers listed ?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;",
        "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'",
        "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'",
        "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "question": "Which accelerator name contains substring \"Opera\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    {
        "db_id": "browser_web",
        "query": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system",
        "question": "Find the number of web accelerators used for each Operating system.",
        "correctness": 1,
        "gold_parse": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC",
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT count(*) FROM wrestler",
        "question": "How many wrestlers are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT count(*) FROM wrestler",
        "question": "Count the number of wrestlers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
        "question": "List the names of wrestlers in descending order of days held.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held DESC"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
        "question": "What are the names of the wrestlers, ordered descending by days held?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held DESC"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "question": "What is the name of the wrestler with the fewest days held?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "question": "Return the name of the wrestler who had the lowest number of days held.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name ,  LOCATION FROM wrestler",
        "question": "What are the names and location of the wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  LOCATION FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name ,  LOCATION FROM wrestler",
        "question": "Give the names and locations of all wrestlers.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  LOCATION FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"",
        "question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?",
        "correctness": 1,
        "gold_parse": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"",
        "question": "Return the elimination movies of wrestlers on Team Orton.",
        "correctness": 1,
        "gold_parse": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
        "question": "What are the names of wrestlers and the elimination moves?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
        "question": "Give the names of wrestlers and their elimination moves.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC",
        "question": "List the names of wrestlers and the teams in elimination in descending order of days held.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC",
        "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "question": "List the time of elimination of the wrestlers with largest days held.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "question": "What is the time of elimination for the wrestler with the most days held?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
        "question": "Show times of elimination of wrestlers with days held more than 50.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
        "question": "What are the times of elimination for wrestlers with over 50 days held?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "How many eliminations did each team have?",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3",
        "question": "Show teams that have suffered more than three eliminations.",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3",
        "question": "Which teams had more than 3 eliminations?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Reign ,  Days_held FROM wrestler",
        "question": "Show the reign and days held of wrestlers.",
        "correctness": 1,
        "gold_parse": "SELECT Reign ,  Days_held FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Reign ,  Days_held FROM wrestler",
        "question": "What are the reigns and days held of all wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT Reign ,  Days_held FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name FROM wrestler WHERE Days_held  <  100",
        "question": "What are the names of wrestlers days held less than 100?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM wrestler WHERE Days_held  <  100"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name FROM wrestler WHERE Days_held  <  100",
        "question": "Return the names of wrestlers with fewer than 100 days held.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM wrestler WHERE Days_held  <  100"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common reigns of wrestlers.",
        "correctness": 1,
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which reign is the most common among wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
        "question": "List the locations that are shared by more than two wrestlers.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
        "question": "Which locations are shared by more than two wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)",
        "question": "List the names of wrestlers that have not been eliminated.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)",
        "question": "What are the names of wrestlers who have never been eliminated?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT COUNT (DISTINCT team) FROM elimination",
        "question": "What is the number of distinct teams that suffer elimination?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT team) FROM elimination"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT COUNT (DISTINCT team) FROM elimination",
        "question": "How many different teams have had eliminated wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT team) FROM elimination"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "correctness": 1,
        "gold_parse": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?",
        "correctness": 1,
        "gold_parse": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\""
    },
    {
        "db_id": "school_finance",
        "query": "SELECT count(*) FROM school",
        "question": "How many schools are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM school"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT count(*) FROM school",
        "question": "Count the number of schools.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM school"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT school_name FROM school ORDER BY school_name",
        "question": "Show all school names in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT school_name FROM school ORDER BY school_name"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT school_name ,  LOCATION ,  mascot FROM school",
        "question": "List the name, location, mascot for all schools.",
        "correctness": 1,
        "gold_parse": "SELECT school_name ,  LOCATION ,  mascot FROM school"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT sum(enrollment) ,  avg(enrollment) FROM school",
        "question": "What are the total and average enrollment of all schools?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) ,  avg(enrollment) FROM school"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)",
        "question": "What are the mascots for schools with enrollments above the average?",
        "correctness": 1,
        "gold_parse": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1",
        "question": "List the name of the school with the smallest enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school",
        "question": "Show the average, maximum, minimum enrollment of all schools.",
        "correctness": 1,
        "gold_parse": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county",
        "question": "Show each county along with the number of schools and total enrollment in each county.",
        "correctness": 1,
        "gold_parse": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"",
        "question": "How many donors have endowment for school named \"Glenn\"?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\""
    },
    {
        "db_id": "school_finance",
        "query": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "question": "List each donator name and the amount of endowment in descending order of the amount of endowment.",
        "correctness": 1,
        "gold_parse": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)",
        "question": "List the names of the schools without any endowment.",
        "correctness": 1,
        "gold_parse": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "correctness": 1,
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'",
        "question": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"",
        "correctness": 1,
        "gold_parse": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "correctness": 1,
        "gold_parse": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "question": "List the amount and donor name for the largest amount of donation.",
        "correctness": 1,
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "question": "How many budgets are above 3000 in year 2001 or before?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "correctness": 1,
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT DISTINCT donator_name FROM endowment",
        "question": "Show all donor names.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT donator_name FROM endowment"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  <  invested"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'",
        "question": "What is the total budget amount for school \"Glenn\" in all years?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "correctness": 1,
        "gold_parse": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1",
        "question": "Find the names of schools that have more than one donator with donation amount above 8.5.",
        "correctness": 1,
        "gold_parse": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
        "question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)"
    },
    {
        "db_id": "school_finance",
        "query": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted",
        "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.",
        "correctness": 1,
        "gold_parse": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM building",
        "question": "How many buildings are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM building"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors",
        "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
        "question": "What is the name of the tallest building?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building",
        "question": "What are the average, maximum, and minimum number of floors for all buildings?",
        "correctness": 1,
        "gold_parse": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)",
        "question": "Show the number of buildings with a height above the average or a number of floors above the average.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20",
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'",
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "correctness": 1,
        "gold_parse": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE",
        "question": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "correctness": 1,
        "gold_parse": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the institution type with the largest number of institutions.",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000",
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
        "question": "Show the name of buildings that do not have any institution.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003",
        "question": "Show the names of buildings except for those having an institution founded in 2003.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id",
        "question": "For each building, show the name of the building and the number of institutions in it.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",
        "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT DISTINCT TYPE FROM institution",
        "question": "Show all the distinct institution types.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT TYPE FROM institution"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id",
        "question": "Show institution names along with the number of proteins for each institution.",
        "correctness": 1,
        "gold_parse": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "question": "Show the protein name and the institution name.",
        "correctness": 1,
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)",
        "question": "How many institutions do not have an associated protein in our record?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
        "question": "Show all the locations where no cinema has capacity over 800.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
        "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011"
    },
    {
        "db_id": "cinema",
        "query": "SELECT count(*) FROM cinema",
        "question": "How many cinema do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM cinema"
    },
    {
        "db_id": "cinema",
        "query": "SELECT count(*) FROM cinema",
        "question": "Count the number of cinemas.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM cinema"
    },
    {
        "db_id": "cinema",
        "query": "SELECT name ,  openning_year ,  capacity FROM cinema",
        "question": "Show name, opening year, and capacity for each cinema.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  openning_year ,  capacity FROM cinema"
    },
    {
        "db_id": "cinema",
        "query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)",
        "question": "Show the cinema name and location for cinemas with capacity above average.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)"
    },
    {
        "db_id": "cinema",
        "query": "SELECT DISTINCT LOCATION FROM cinema",
        "question": "What are all the locations with a cinema?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM cinema"
    },
    {
        "db_id": "cinema",
        "query": "SELECT DISTINCT LOCATION FROM cinema",
        "question": "Find the distinct locations that has a cinema.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM cinema"
    },
    {
        "db_id": "cinema",
        "query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",
        "question": "Show all the cinema names and opening years in descending order of opening year.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC"
    },
    {
        "db_id": "cinema",
        "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
        "question": "What are the name and location of the cinema with the largest capacity?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"
    },
    {
        "db_id": "cinema",
        "query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
        "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
        "correctness": 1,
        "gold_parse": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
        "question": "Show each location and the number of cinemas there.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the location with the most cinemas opened in year 2010 or later?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
        "question": "Show all the locations with at least two cinemas with capacity above 300.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
        "question": "Which locations have 2 or more cinemas with capacity over 300?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2"
    },
    {
        "db_id": "cinema",
        "query": "SELECT title ,  directed_by FROM film",
        "question": "Show the title and director for all films.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  directed_by FROM film"
    },
    {
        "db_id": "cinema",
        "query": "SELECT title ,  directed_by FROM film",
        "question": "What are the title and director of each film?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  directed_by FROM film"
    },
    {
        "db_id": "cinema",
        "query": "SELECT DISTINCT directed_by FROM film",
        "question": "Show all directors.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT directed_by FROM film"
    },
    {
        "db_id": "cinema",
        "query": "SELECT DISTINCT directed_by FROM film",
        "question": "Who are all the directors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT directed_by FROM film"
    },
    {
        "db_id": "cinema",
        "query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
        "question": "List all directors along with the number of films directed by each director.",
        "correctness": 1,
        "gold_parse": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by"
    },
    {
        "db_id": "cinema",
        "query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
        "question": "What is total number of show times per dat for each cinema?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id"
    },
    {
        "db_id": "cinema",
        "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
        "question": "What are the title and maximum price of each film?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"
    },
    {
        "db_id": "cinema",
        "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
        "question": "Give me the title and highest price for each film.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"
    },
    {
        "db_id": "cinema",
        "query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
        "question": "Show cinema name, film title, date, and price for each record in schedule.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id"
    },
    {
        "db_id": "cinema",
        "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
        "question": "What are the title and director of the films without any schedule?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)"
    },
    {
        "db_id": "cinema",
        "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
        "question": "Show director with the largest number of show times in total.",
        "correctness": 1,
        "gold_parse": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "question": "Find the locations that have more than one movie theater with capacity above 300.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "question": "In which locations are there more than one movie theater with capacity above 300?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "cinema",
        "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
        "question": "How many films have the word 'Dummy' in their titles?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\""
    },
    {
        "db_id": "cinema",
        "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
        "question": "Count the number of films whose title contains the word 'Dummy'.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\""
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
        "question": "Are the customers holding coupons with amount 500 bad or good?",
        "correctness": 1,
        "gold_parse": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "question": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "question": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3",
        "question": "What is the id of the product that is booked for 3 times?",
        "correctness": 1,
        "gold_parse": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "correctness": 1,
        "gold_parse": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "correctness": 1,
        "gold_parse": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1",
        "question": "What are the names of products whose availability equals to 1?",
        "correctness": 1,
        "gold_parse": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
        "question": "How many different product types are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT product_type_code) FROM products_for_hire"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name",
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT avg(amount_due) FROM payments",
        "question": "What is the average amount due for all the payments?",
        "correctness": 1,
        "gold_parse": "SELECT avg(amount_due) FROM payments"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked",
        "question": "What are the maximum, minimum, and average booked count for the products booked?",
        "correctness": 1,
        "gold_parse": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT DISTINCT payment_type_code FROM payments",
        "question": "What are all the distinct payment types?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT payment_type_code FROM payments"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
        "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "correctness": 1,
        "gold_parse": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )",
        "question": "How many products are never booked with amount higher than 200?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'",
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'",
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "correctness": 1,
        "gold_parse": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20",
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "correctness": 1,
        "gold_parse": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT count(*) FROM phone",
        "question": "How many phones are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM phone"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT Name FROM phone ORDER BY Price ASC",
        "question": "List the names of phones in ascending order of price.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM phone ORDER BY Price ASC"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT Memory_in_G ,  Carrier FROM phone",
        "question": "What are the memories and carriers of phones?",
        "correctness": 1,
        "gold_parse": "SELECT Memory_in_G ,  Carrier FROM phone"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32",
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
        "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\""
    },
    {
        "db_id": "phone_market",
        "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
        "question": "What is the carrier of the most expensive phone?",
        "correctness": 1,
        "gold_parse": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier",
        "question": "Show different carriers of phones together with the number of phones with each carrier.",
        "correctness": 1,
        "gold_parse": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most frequently used carrier of the phones.",
        "correctness": 1,
        "gold_parse": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
        "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "correctness": 1,
        "gold_parse": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "question": "Show the names of phones and the districts of markets they are on.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
        "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50",
        "question": "Show the names of phones that are on market with number of shops greater than 50.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name",
        "question": "For each phone, show its names and total number of stocks.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)",
        "question": "List the names of phones that are not on any market.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT count(*) FROM company",
        "question": "How many gas companies are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM company"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT count(*) FROM company",
        "question": "What is the total number of companies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM company"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
        "question": "List the company name and rank for all companies in the decreasing order of their sales.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
        "question": "What is the name and rank of every company ordered by descending number of sales?",
        "correctness": 1,
        "gold_parse": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",
        "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",
        "question": "What are the companies and main industries of all companies that are not headquartered in the United States?",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
        "question": "Show all company names and headquarters in the descending order of market value.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
        "question": "What are the names and headquarters of all companies ordered by descending market value?",
        "correctness": 1,
        "gold_parse": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "question": "Show minimum, maximum, and average market value for all companies.",
        "correctness": 1,
        "gold_parse": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "question": "What is the minimum, maximum, and average market value for every company?",
        "correctness": 1,
        "gold_parse": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT DISTINCT main_industry FROM company",
        "question": "Show all main industry for all companies.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT main_industry FROM company"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT DISTINCT main_industry FROM company",
        "question": "What are the different main industries for all companies?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT main_industry FROM company"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
        "question": "List all headquarters and the number of companies in each headquarter.",
        "correctness": 1,
        "gold_parse": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
        "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
        "correctness": 1,
        "gold_parse": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",
        "question": "Show all main industry and total market value in each industry.",
        "correctness": 1,
        "gold_parse": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",
        "question": "What are the main indstries and total market value for each industry?",
        "correctness": 1,
        "gold_parse": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "question": "List the main industry with highest total market value and its number of companies.",
        "correctness": 1,
        "gold_parse": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "question": "For each main industry, what is the total number of companies for the industry with the highest total market value?",
        "correctness": 1,
        "gold_parse": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
        "question": "Show headquarters with at least two companies in the banking industry.",
        "correctness": 1,
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
        "question": "What are the headquarters with at least two companies in the banking industry?",
        "correctness": 1,
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year",
        "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
        "correctness": 1,
        "gold_parse": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year",
        "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?",
        "correctness": 1,
        "gold_parse": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
        "question": "How many gas station are opened between 2000 and 2005?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
        "question": "What is the total number of gas stations that opened between 2000 and 2005?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "question": "Show all locations and the number of gas stations in each location ordered by the count.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "question": "For each location, how many gas stations are there in order?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "correctness": 1,
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?",
        "correctness": 1,
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "question": "Show all headquarters without a company in banking industry.",
        "correctness": 1,
        "gold_parse": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "question": "What are the headquarters without companies that are in the banking industry?",
        "correctness": 1,
        "gold_parse": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "question": "Show the company name with the number of gas station.",
        "correctness": 1,
        "gold_parse": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "question": "For each company id, what are the companies and how many gas stations does each one operate?",
        "correctness": 1,
        "gold_parse": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Show company name and main industry without a gas station.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "What are the main industries of the companies without gas stations and what are the companies?",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'",
        "question": "Show the manager name for gas stations belonging to the ExxonMobil company.",
        "correctness": 1,
        "gold_parse": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'",
        "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?",
        "correctness": 1,
        "gold_parse": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "correctness": 1,
        "gold_parse": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
        "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?",
        "correctness": 1,
        "gold_parse": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the manager name with most number of gas stations opened after 2000.",
        "correctness": 1,
        "gold_parse": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the manager with the most gas stations that opened after 2000?",
        "correctness": 1,
        "gold_parse": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "question": "order all gas station locations by the opening year.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM gas_station ORDER BY open_year"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "question": "What are the locations of all the gas stations ordered by opening year?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM gas_station ORDER BY open_year"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "correctness": 1,
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?",
        "correctness": 1,
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "correctness": 1,
        "gold_parse": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
        "correctness": 1,
        "gold_parse": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3"
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(*) FROM region",
        "question": "How many regions do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM region"
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(*) FROM region",
        "question": "Count the number of regions.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM region"
    },
    {
        "db_id": "party_people",
        "query": "SELECT DISTINCT region_name FROM region ORDER BY Label",
        "question": "Show all distinct region names ordered by their labels.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT region_name FROM region ORDER BY Label"
    },
    {
        "db_id": "party_people",
        "query": "SELECT DISTINCT region_name FROM region ORDER BY Label",
        "question": "What are the different region names, ordered by labels?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT region_name FROM region ORDER BY Label"
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(DISTINCT party_name) FROM party",
        "question": "How many parties do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT party_name) FROM party"
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(DISTINCT party_name) FROM party",
        "question": "Count the number of different parties.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT party_name) FROM party"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office",
        "question": "Show the ministers and the time they took and left office, listed by the time they left office.",
        "correctness": 1,
        "gold_parse": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office",
        "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?",
        "correctness": 1,
        "gold_parse": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959",
        "question": "Show the minister who took office after 1961 or before 1959.",
        "correctness": 1,
        "gold_parse": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959",
        "question": "Who are the ministers who took office after 1961 or before 1959?",
        "correctness": 1,
        "gold_parse": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
        "question": "Show all ministers who do not belong to Progress Party.",
        "correctness": 1,
        "gold_parse": "SELECT minister FROM party WHERE party_name != 'Progress Party'"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
        "question": "Which ministers are not a part of the Progress Party?",
        "correctness": 1,
        "gold_parse": "SELECT minister FROM party WHERE party_name != 'Progress Party'"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC",
        "question": "Show all ministers and parties they belong to in descending order of the time they took office.",
        "correctness": 1,
        "gold_parse": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC",
        "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?",
        "correctness": 1,
        "gold_parse": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
        "question": "Return the minister who left office at the latest time.",
        "correctness": 1,
        "gold_parse": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
        "question": "Which minister left office the latest?",
        "correctness": 1,
        "gold_parse": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id",
        "question": "List member names and their party names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id",
        "question": "What are the names of members and their corresponding parties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "question": "Show all party names and the number of members in each party.",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "question": "How many members are in each party?",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of party with most number of members?",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the party with the most members.",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id",
        "question": "Show all party names and their region names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id",
        "question": "What are the names of parties and their respective regions?",
        "correctness": 1,
        "gold_parse": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id"
    },
    {
        "db_id": "party_people",
        "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
        "question": "Show names of parties that does not have any members.",
        "correctness": 1,
        "gold_parse": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)"
    },
    {
        "db_id": "party_people",
        "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
        "question": "What are the names of parties that have no members?",
        "correctness": 1,
        "gold_parse": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)"
    },
    {
        "db_id": "party_people",
        "query": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1",
        "question": "Show the member names which are in both the party with id 3 and the party with id 1.",
        "correctness": 1,
        "gold_parse": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1"
    },
    {
        "db_id": "party_people",
        "query": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1",
        "question": "Which member names are shared among members in the party with the id 3 and the party with the id 1?",
        "correctness": 1,
        "gold_parse": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"",
        "question": "Show member names that are not in the Progress Party.",
        "correctness": 1,
        "gold_parse": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\""
    },
    {
        "db_id": "party_people",
        "query": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"",
        "question": "Which member names corresponding to members who are not in the Progress Party?",
        "correctness": 1,
        "gold_parse": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\""
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(*) FROM party_events",
        "question": "How many party events do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM party_events"
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(*) FROM party_events",
        "question": "Count the number of party events.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM party_events"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "question": "Show party names and the number of events for each party.",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "question": "How many events are there for each party?",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    {
        "db_id": "party_people",
        "query": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
        "question": "Show all member names who are not in charge of any event.",
        "correctness": 1,
        "gold_parse": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id"
    },
    {
        "db_id": "party_people",
        "query": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
        "question": "What are the names of members who are not in charge of any events?",
        "correctness": 1,
        "gold_parse": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
        "question": "What are the names of parties with at least 2 events?",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
        "question": "Return the names of parties that have two or more events.",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of member in charge of greatest number of events?",
        "correctness": 1,
        "gold_parse": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the member who is in charge of the most events.",
        "correctness": 1,
        "gold_parse": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "party_people",
        "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
        "question": "find the event names that have more than 2 records.",
        "correctness": 1,
        "gold_parse": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2"
    },
    {
        "db_id": "party_people",
        "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
        "question": "Which event names were used more than twice for party events?",
        "correctness": 1,
        "gold_parse": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2"
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
        "question": "How many Annual Meeting events happened in the United Kingdom region?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\""
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
        "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\""
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT count(*) FROM pilot",
        "question": "How many pilots are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM pilot"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
        "question": "List the names of pilots in ascending order of rank.",
        "correctness": 1,
        "gold_parse": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT POSITION ,  Team FROM pilot",
        "question": "What are the positions and teams of pilots?",
        "correctness": 1,
        "gold_parse": "SELECT POSITION ,  Team FROM pilot"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30",
        "question": "List the distinct positions of pilots older than 30.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT Pilot_name FROM pilot WHERE Team  =  \"Bradley\" OR Team  =  \"Fordham\"",
        "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
        "correctness": 1,
        "gold_parse": "SELECT Pilot_name FROM pilot WHERE Team  =  \"Bradley\" OR Team  =  \"Fordham\""
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
        "question": "What is the joined year of the pilot of the highest rank?",
        "correctness": 1,
        "gold_parse": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality",
        "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common nationality of pilots.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005",
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "correctness": 1,
        "gold_parse": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID",
        "question": "Show the names of pilots and models of aircrafts they have flied with.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank",
        "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34",
        "question": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "correctness": 1,
        "gold_parse": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "question": "Show the names of pilots and the number of records they have.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
        "question": "Show names of pilots that have more than one record.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)",
        "question": "List the names of pilots that do not have any record.",
        "correctness": 1,
        "gold_parse": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_status_code FROM Ref_Document_Status;",
        "question": "What document status codes do we have?",
        "correctness": 1,
        "gold_parse": "SELECT document_status_code FROM Ref_Document_Status;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";",
        "question": "What is the description of document status code 'working'?",
        "correctness": 1,
        "gold_parse": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_type_code FROM Ref_Document_Types;",
        "question": "What document type codes do we have?",
        "correctness": 1,
        "gold_parse": "SELECT document_type_code FROM Ref_Document_Types;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";",
        "question": "What is the description of document type 'Paper'?",
        "correctness": 1,
        "gold_parse": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;",
        "question": "What are the shipping agent names?",
        "correctness": 1,
        "gold_parse": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";",
        "question": "What is the shipping agent code of shipping agent UPS?",
        "correctness": 1,
        "gold_parse": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT role_code FROM ROLES;",
        "question": "What are all role codes?",
        "correctness": 1,
        "gold_parse": "SELECT role_code FROM ROLES;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "question": "What is the description of role code ED?",
        "correctness": 1,
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT count(*) FROM Employees;",
        "question": "How many employees do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Employees;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
        "question": "What is the role of the employee named Koby?",
        "correctness": 1,
        "gold_parse": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id ,  receipt_date FROM Documents;",
        "question": "List all document ids and receipt dates of documents.",
        "correctness": 1,
        "gold_parse": "SELECT document_id ,  receipt_date FROM Documents;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "correctness": 1,
        "gold_parse": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;",
        "question": "List roles that have more than one employee. List the role description and number of employees.",
        "correctness": 1,
        "gold_parse": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;",
        "question": "What is the document status description of the document with id 1?",
        "correctness": 1,
        "gold_parse": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";",
        "question": "How many documents have the status code done?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_type_code FROM Documents WHERE document_id = 2;",
        "question": "List the document type code for the document with the id 2.",
        "correctness": 1,
        "gold_parse": "SELECT document_type_code FROM Documents WHERE document_id = 2;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
        "question": "List the document ids for any documents with the status code done and the type code paper.",
        "correctness": 1,
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;",
        "question": "What is the name of the shipping agent of the document with id 2?",
        "correctness": 1,
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "question": "How many documents were shipped by USPS?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "correctness": 1,
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT receipt_date FROM Documents WHERE document_id = 3;",
        "question": "What is the receipt date of the document with id 3?",
        "correctness": 1,
        "gold_parse": "SELECT receipt_date FROM Documents WHERE document_id = 3;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;",
        "question": "What address was the document with id 4 mailed to?",
        "correctness": 1,
        "gold_parse": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;",
        "question": "What is the mail date of the document with id 7?",
        "correctness": 1,
        "gold_parse": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "correctness": 1,
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "correctness": 1,
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;",
        "question": "What is draft detail of the document with id 7?",
        "correctness": 1,
        "gold_parse": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;",
        "question": "How many draft copies does the document with id 2 have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "question": "Which document has the most draft copies? List its document id and number of draft copies.",
        "correctness": 1,
        "gold_parse": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;",
        "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
        "correctness": 1,
        "gold_parse": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;",
        "question": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "correctness": 1,
        "gold_parse": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
        "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "correctness": 1,
        "gold_parse": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "correctness": 1,
        "gold_parse": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;",
        "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "correctness": 1,
        "gold_parse": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;"
    },
    {
        "db_id": "company_1",
        "query": "SELECT dname FROM department ORDER BY mgr_start_date",
        "question": "List all department names ordered by their starting date.",
        "correctness": 1,
        "gold_parse": "SELECT dname FROM department ORDER BY mgr_start_date"
    },
    {
        "db_id": "company_1",
        "query": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'",
        "question": "find all dependent names who have a spouse relation with some employee.",
        "correctness": 1,
        "gold_parse": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'"
    },
    {
        "db_id": "company_1",
        "query": "SELECT count(*) FROM dependent WHERE sex  =  'F'",
        "question": "how many female dependents are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM dependent WHERE sex  =  'F'"
    },
    {
        "db_id": "company_1",
        "query": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'",
        "question": "Find the names of departments that are located in Houston.",
        "correctness": 1,
        "gold_parse": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'"
    },
    {
        "db_id": "company_1",
        "query": "SELECT fname ,  lname FROM employee WHERE salary  >  30000",
        "question": "Return the first names and last names of employees who earn more than 30000 in salary.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  lname FROM employee WHERE salary  >  30000"
    },
    {
        "db_id": "company_1",
        "query": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex",
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex"
    },
    {
        "db_id": "company_1",
        "query": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate",
        "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'",
        "question": "what are the event details of the services that have the type code 'Marriage'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
        "question": "What are the ids and details of events that have more than one participants?",
        "correctness": 1,
        "gold_parse": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
        "question": "How many events have each participants attended? List the participant id, type and the number.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants",
        "question": "What are all the the participant ids, type code and details?",
        "correctness": 1,
        "gold_parse": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'",
        "question": "How many participants belong to the type 'Organizer'?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT service_type_code FROM services ORDER BY service_type_code",
        "question": "List the type of the services in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT service_type_code FROM services ORDER BY service_type_code"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT service_id ,  event_details FROM EVENTS",
        "question": "List the service id and details for the events.",
        "correctness": 1,
        "gold_parse": "SELECT service_id ,  event_details FROM EVENTS"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
        "question": "How many events had participants whose details had the substring 'Dr.'",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common participant type?",
        "correctness": 1,
        "gold_parse": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Which service id and type has the least number of participants?",
        "correctness": 1,
        "gold_parse": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the event with the most participants?",
        "correctness": 1,
        "gold_parse": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "correctness": 1,
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'",
        "question": "Which services type had both successful and failure event details?",
        "correctness": 1,
        "gold_parse": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
        "question": "How many events did not have any participants?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "question": "What are all the distinct participant ids who attended any events?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT participant_id) FROM participants_in_Events"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name of the race held most recently?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name of the race that occurred most recently?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name and date of the most recent race?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name and date of the race that occurred most recently?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE YEAR = 2017",
        "question": "Find the names of all races held in 2017.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE YEAR = 2017",
        "question": "What are the names of all the races that occurred in the year 2017?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "question": "Find the distinct names of all races held between 2014 and 2017?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "question": "What are the unique names of all race held between 2014 and 2017?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "question": "What are the forename and surname of the driver who has the smallest laptime?",
        "correctness": 1,
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "question": "What is the forename and surname of the driver with the shortest laptime?",
        "correctness": 1,
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "question": "What is the id and last name of the driver with the longest laptime?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
        "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
        "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "question": "How many drivers were in the Australian Grand Prix held in 2009?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "question": "How many drivers did not participate in the races held in 2009?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "question": "How many drivers did not race in 2009?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "question": "What are the names and years of all races that had a driver with the last name Lewis?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "question": "Find the forename and surname of drivers whose nationality is German?",
        "correctness": 1,
        "gold_parse": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "question": "What is the first and last name of all the German drivers?",
        "correctness": 1,
        "gold_parse": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?",
        "correctness": 1,
        "gold_parse": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?",
        "correctness": 1,
        "gold_parse": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?",
        "correctness": 1,
        "gold_parse": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?",
        "correctness": 1,
        "gold_parse": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "question": "What are the numbers of constructors for different nationalities?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "question": "For each nationality, how many different constructors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "question": "What are the numbers of races for each constructor id?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "question": "For each constructor id, how many races are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "question": "What are the names of the races held after 2017 in Spain?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "question": "What are the names of all races held after 2000 in Spain?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)",
        "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)",
        "question": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)",
        "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)",
        "question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "question": "List the forenames of all distinct drivers in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "question": "What are the first names of all the different drivers in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "question": "List the names of all distinct races in reversed  lexicographic order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "question": "What are the names of races held between 2009 and 2011?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "question": "What are the names of all races held between 2009 and 2011?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "question": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
        "correctness": 1,
        "gold_parse": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "correctness": 1,
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and last name of the driver who participated in the most races after 2010?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
        "question": "What are the names of circuits that belong to UK or Malaysia?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
        "question": "What are the names of all the circuits that are in the UK or Malaysia?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "question": "Find the id and location of circuits that belong to France or Belgium?",
        "correctness": 1,
        "gold_parse": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "question": "What are the ids and locations of all circuits in France or Belgium?",
        "correctness": 1,
        "gold_parse": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "question": "What are the names of all the Japanese constructors that have earned more than 5 points?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",
        "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",
        "question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
        "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
        "question": "For each id of a driver who participated in at most 30 races, how many races did they participate in?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the id and surname of the driver who participated the most number of races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the ids and last names of all drivers who participated in the most races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "How many technicians are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "What is the number of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Name FROM technician ORDER BY Age ASC",
        "question": "List the names of technicians in ascending order of age.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM technician ORDER BY Age ASC"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Name FROM technician ORDER BY Age ASC",
        "question": "What are the names of the technicians by ascending order of age?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM technician ORDER BY Age ASC"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Team ,  Starting_Year FROM technician",
        "question": "What are the team and starting year of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  Starting_Year FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Team ,  Starting_Year FROM technician",
        "question": "What is the team and starting year for each technician?",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  Starting_Year FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Name FROM technician WHERE Team != \"NYY\"",
        "question": "List the name of technicians whose team is not \"NYY\".",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM technician WHERE Team != \"NYY\""
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Name FROM technician WHERE Team != \"NYY\"",
        "question": "What is the name of the technician whose team is not 'NYY'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM technician WHERE Team != \"NYY\""
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
        "question": "Show the name of technicians aged either 36 or 37",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
        "question": "What are the names of the technicians aged either 36 or 37?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "question": "What is the starting year of the oldest technicians?",
        "correctness": 1,
        "gold_parse": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "question": "What is the starting year for the oldest technician?",
        "correctness": 1,
        "gold_parse": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
        "question": "Show different teams of technicians and the number of technicians in each team.",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
        "question": "For each team, how many technicians are there?",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the team that has the most number of technicians.",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What are the teams with the most technicians?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2",
        "question": "Show the team that have at least two technicians.",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2",
        "question": "What is the team with at least 2 technicians?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID",
        "question": "Show names of technicians and series of machines they are assigned to repair.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID",
        "question": "What are the names of technicians and the machine series that they repair?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank",
        "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank",
        "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70",
        "question": "Show names of technicians who are assigned to repair machines with value point more than 70.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70",
        "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "question": "List the names of technicians who have not been assigned to repair machines.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "question": "What are the names of the technicians that have not been assigned to repair machines?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"",
        "question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
        "correctness": 1,
        "gold_parse": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"",
        "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?",
        "correctness": 1,
        "gold_parse": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT count(*) FROM entrepreneur",
        "question": "How many entrepreneurs are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM entrepreneur"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT count(*) FROM entrepreneur",
        "question": "Count the number of entrepreneurs.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM entrepreneur"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
        "question": "List the companies of entrepreneurs in descending order of money requested.",
        "correctness": 1,
        "gold_parse": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
        "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?",
        "correctness": 1,
        "gold_parse": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Company ,  Investor FROM entrepreneur",
        "question": "List the companies and the investors of entrepreneurs.",
        "correctness": 1,
        "gold_parse": "SELECT Company ,  Investor FROM entrepreneur"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Company ,  Investor FROM entrepreneur",
        "question": "What are the companies and investors that correspond to each entrepreneur?",
        "correctness": 1,
        "gold_parse": "SELECT Company ,  Investor FROM entrepreneur"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT avg(Money_Requested) FROM entrepreneur",
        "question": "What is the average money requested by all entrepreneurs?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Money_Requested) FROM entrepreneur"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT avg(Money_Requested) FROM entrepreneur",
        "question": "Return the average money requested across all entrepreneurs.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Money_Requested) FROM entrepreneur"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Name FROM People ORDER BY Weight ASC",
        "question": "What are the names of people in ascending order of weight?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM People ORDER BY Weight ASC"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Name FROM People ORDER BY Weight ASC",
        "question": "Return the names of people, ordered by weight ascending.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM People ORDER BY Weight ASC"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of entrepreneurs?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "Return the names of entrepreneurs.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "question": "What is the weight of the shortest person?",
        "correctness": 1,
        "gold_parse": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "question": "Return the weight of the shortest person.",
        "correctness": 1,
        "gold_parse": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "question": "Return the name of the heaviest entrepreneur.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
        "question": "What is the total money requested by entrepreneurs with height more than 1.85?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
        "question": "Give the total money requested by entrepreneurs who are taller than 1.85.",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\""
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\""
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor",
        "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
        "correctness": 1,
        "gold_parse": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor",
        "question": "How many entrepreneurs correspond to each investor?",
        "correctness": 1,
        "gold_parse": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "correctness": 1,
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "correctness": 1,
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "correctness": 1,
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "correctness": 1,
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "question": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "question": "List the names of people that are not entrepreneurs.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "question": "What are the names of people who are not entrepreneurs?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "correctness": 1,
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
        "correctness": 1,
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT count(DISTINCT Company) FROM entrepreneur",
        "question": "How many distinct companies are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Company) FROM entrepreneur"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT count(DISTINCT Company) FROM entrepreneur",
        "question": "Count the number of different companies.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Company) FROM entrepreneur"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
        "question": "Show the company of the tallest entrepreneur.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
        "question": "Which company was started by the entrepreneur with the greatest height?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT count(*) FROM perpetrator",
        "question": "How many perpetrators are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM perpetrator"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "question": "List the date of perpetrators in descending order of the number of people killed.",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM perpetrator ORDER BY Killed DESC"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "question": "List the number of people injured by perpetrators in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT Injured FROM perpetrator ORDER BY Injured ASC"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT avg(Injured) FROM perpetrator",
        "question": "What is the average number of people injured by all perpetrators?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Injured) FROM perpetrator"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
        "question": "What is the location of the perpetrator with the largest kills.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Name FROM People ORDER BY Height ASC",
        "question": "What are the names of people in ascending order of height?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM People ORDER BY Height ASC"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of perpetrators?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
        "question": "What are the names of perpetrators whose country is not \"China\"?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\""
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
        "question": "What is the name of the perpetrator with the biggest weight.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84",
        "question": "What is the total kills of the perpetrators with height more than 1.84.",
        "correctness": 1,
        "gold_parse": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\""
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country",
        "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
        "correctness": 1,
        "gold_parse": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the country that has the most perpetrators?",
        "correctness": 1,
        "gold_parse": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2",
        "question": "What are the countries that have at least two perpetrators?",
        "correctness": 1,
        "gold_parse": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC",
        "question": "List the names of perpetrators in descending order of the year.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
        "question": "List the names of people that are not perpetrators.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20",
        "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT count(DISTINCT LOCATION) FROM perpetrator",
        "question": "How many distinct locations of perpetrators are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT LOCATION) FROM perpetrator"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Show the date of the tallest perpetrator.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT max(YEAR) FROM perpetrator;",
        "question": "In which year did the most recent crime happen?",
        "correctness": 1,
        "gold_parse": "SELECT max(YEAR) FROM perpetrator;"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "question": "Report the name of all campuses in Los Angeles county.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "question": "What campuses are located in the county of Los Angeles?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"",
        "question": "What are the names of all campuses located at Chico?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"",
        "question": "What campuses are located in Chico?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  =  1958",
        "question": "Find all the campuses opened in 1958.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  =  1958"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  =  1958",
        "question": "What are the campuses that opened in 1958?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  =  1958"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  <  1800",
        "question": "Find the name of the campuses opened before 1800.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  <  1800"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  <  1800",
        "question": "What campuses opened before 1800?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  <  1800"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "question": "Which campus was opened between 1935 and 1939?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "question": "What campuses opened between 1935 and 1939?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "question": "What is the campus fee of \"San Jose State University\" in year 1996?",
        "correctness": 1,
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "correctness": 1,
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996",
        "question": "What is the campus fee of \"San Francisco State University\" in year 1996?",
        "correctness": 1,
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996",
        "question": "What is the campus fee for San Francisco State University in 1996?",
        "correctness": 1,
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "question": "How many universities have a campus fee higher than average?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "question": "How many universities have a campus fee greater than the average?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "question": "What campuses are located in Los Angeles county and opened after 1950?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "question": "Which year has the most degrees conferred?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "question": "In what year was the most degrees conferred?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "question": "Which campus has the most degrees conferred in all times?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "question": "What campus has the most degrees  conferrred over its entire existence?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
        "question": "Which campus has the most faculties in year 2003?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
        "question": "What campus has the most faculties in 2003?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "question": "Find the average fee on a CSU campus in 1996",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "question": "What is the average fee for a CSU campus in the year of 1996?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "question": "What is the average fee on a CSU campus in 2005?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus",
        "question": "report the total number of degrees granted between 1998 and 2002.",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus",
        "question": "how many degrees were conferred between 1998 and 2002?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus",
        "question": "For each Orange county campus, report the number of degrees granted after 2000.",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus",
        "question": "What is the total number of degrees granted after 2000 for each Orange county campus?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")",
        "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")",
        "question": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"",
        "question": "How many campuses are there in Los Angeles county?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"",
        "question": "How many campuses exist are in the county of LA?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "question": "List the campuses in Los Angeles county.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "question": "What campuses are in Los Angeles county?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "question": "How many degrees were conferred in \"San Jose State University\" in 2000?",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "question": "How many degrees were conferred at San Jose State University in 2000?",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "question": "What degrees were conferred in San Francisco State University in the year 2001?",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
        "question": "How many faculty is there in total in the year of 2002?",
        "correctness": 1,
        "gold_parse": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
        "question": "How many faculty, in total, are there in the year 2002?",
        "correctness": 1,
        "gold_parse": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
        "correctness": 1,
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "question": "What is the number of faculty at Long Beach State University in 2002?",
        "correctness": 1,
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
        "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?",
        "correctness": 1,
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
        "question": "How many faculty lines are there at San Francisco State University in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
        "question": "List the campus that have between 600 and 1000 faculty lines in year 2004.",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
        "question": "What are the campuses that had between 600 and 1000 faculty members in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1",
        "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
        "correctness": 1,
        "gold_parse": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1",
        "question": "How many faculty members did the university that conferred the most degrees in 2002 have?",
        "correctness": 1,
        "gold_parse": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
        "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
        "correctness": 1,
        "gold_parse": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
        "question": "How many faculty members are at the university that gave the least number of degrees in 2001?",
        "correctness": 1,
        "gold_parse": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "question": "How many undergraduates are there at San Jose State",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"",
        "question": "What is the number of graduates in \"San Francisco State University\" in year 2004?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"",
        "question": "How many people graduated from San Francisco State University in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "question": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "question": "In the year 2000, what is the campus fee for San Francisco State University?",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000",
        "question": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000",
        "question": "What is the campus fee in the year 2000 for San Jose State University?",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "question": "How many CSU campuses are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "question": "What is the total number of campuses?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT count(*) FROM candidate",
        "question": "How many candidates are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM candidate"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT count(*) FROM candidate",
        "question": "Count the number of candidates.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM candidate"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
        "question": "Which poll resource provided the most number of candidate information?",
        "correctness": 1,
        "gold_parse": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the poll resource associated with the most candidates.",
        "correctness": 1,
        "gold_parse": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "question": "what are the top 3 highest support rates?",
        "correctness": 1,
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "question": "Return the top 3 greatest support rates.",
        "correctness": 1,
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "correctness": 1,
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "correctness": 1,
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "correctness": 1,
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "correctness": 1,
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "question": "which poll source does the highest oppose rate come from?",
        "correctness": 1,
        "gold_parse": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "correctness": 1,
        "gold_parse": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people ORDER BY date_of_birth",
        "question": "List all people names in the order of their date of birth from old to young.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people ORDER BY date_of_birth"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people ORDER BY date_of_birth",
        "question": "What are the names of all people, ordered by their date of birth?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people ORDER BY date_of_birth"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
        "question": "Find the average height and weight for all males (sex is M).",
        "correctness": 1,
        "gold_parse": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
        "question": "What are the average height and weight across males (sex is M)?",
        "correctness": 1,
        "gold_parse": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "question": "find the names of people who are taller than 200 or lower than 190.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "question": "What are the names of people who have a height greater than 200 or less than 190?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",
        "question": "Find the average and minimum weight for each gender.",
        "correctness": 1,
        "gold_parse": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",
        "question": "What are the average and minimum weights for people of each sex?",
        "correctness": 1,
        "gold_parse": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "question": "which gender got the highest average uncertain ratio.",
        "correctness": 1,
        "gold_parse": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "question": "What is the sex of the candidate who had the highest unsure rate?",
        "correctness": 1,
        "gold_parse": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
        "question": "what are the names of people who did not participate in the candidate election.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
        "question": "Give the names of people who did not participate in the candidate election.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "question": "What are the names of candidates who have a lower support rate than oppose rate?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex",
        "question": "how many people are there whose weight is higher than 85 for each gender?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex",
        "question": "Count the number of people of each sex who have a weight higher than 85.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "correctness": 1,
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "correctness": 1,
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "question": "list all female (sex is F) candidate names in the alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "question": "What are the names of all female candidates in alphabetical order (sex is F)?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
        "question": "find the name of people whose height is lower than the average.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
        "question": "What are the names of people who are shorter than average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT * FROM people",
        "question": "List all info about all people.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM people"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT * FROM people",
        "question": "What is all the information about all people?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM people"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "Find the titles of all movies directed by steven spielberg.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "What are the names of all movies directed by Steven Spielberg?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
        "question": "What are the titles of all movies that James Cameron directed after 2000?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000",
        "question": "How many movies were made before 2000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Movie WHERE YEAR  <  2000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT director FROM Movie WHERE title  = 'Avatar'",
        "question": "Who is the director of movie Avatar?",
        "correctness": 1,
        "gold_parse": "SELECT director FROM Movie WHERE title  = 'Avatar'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT director FROM Movie WHERE title  = 'Avatar'",
        "question": "Who directed Avatar?",
        "correctness": 1,
        "gold_parse": "SELECT director FROM Movie WHERE title  = 'Avatar'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT count(*) FROM Reviewer",
        "question": "How many reviewers listed?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reviewer"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT count(*) FROM Reviewer",
        "question": "How many reviewers are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reviewer"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
        "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
        "question": "What is the id of the reviewer whose name includes the word \"Mike\"?",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"",
        "question": "What is the reviewer id of Daniel Lewis?",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\""
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"",
        "question": "What is the id of the reviewer named Daniel Lewis?",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\""
    },
    {
        "db_id": "movie_1",
        "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
        "question": "What is the total number of ratings that has more than 3 stars?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Rating WHERE stars  >  3"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
        "question": "How many movie ratings have more than 3 stars?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Rating WHERE stars  >  3"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT max(stars) ,  min(stars) FROM Rating",
        "question": "What is the lowest and highest rating star?",
        "correctness": 1,
        "gold_parse": "SELECT max(stars) ,  min(stars) FROM Rating"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT max(stars) ,  min(stars) FROM Rating",
        "question": "What is the maximum and mininum number of stars a rating can receive?",
        "correctness": 1,
        "gold_parse": "SELECT max(stars) ,  min(stars) FROM Rating"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year",
        "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year",
        "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
        "correctness": 1,
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "correctness": 1,
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "question": "What is the average rating star for each reviewer?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "question": "What is the average number of stars that each reviewer awards for a movie?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
        "question": "Find the titles of all movies that have no ratings.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
        "question": "What are the titles of all movies that have not been rated?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
        "question": "Find the names of all reviewers who have ratings with a NULL value for the date.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\""
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
        "question": "What are the different names of all reviewers whose ratings do not have a date field?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\""
    },
    {
        "db_id": "movie_1",
        "query": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)",
        "question": "What is the average rating stars and title for the oldest movie?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)",
        "question": "For the oldest movie listed, what is its average rating and title?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
        "question": "What is the name of the most recent movie?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
        "question": "What is the title of the newest movie?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",
        "question": "What is the maximum stars and year for the most recent movie?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",
        "question": "What is highest rating for the most recent movie and when was it released?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")",
        "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")",
        "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")",
        "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")",
        "question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
        "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
        "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3",
        "question": "Find the names of all reviewers who have contributed three or more ratings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3",
        "question": "What are the names of all reviewers that have rated 3 or more movies?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'",
        "question": "Find the names of all reviewers who rated Gone with the Wind.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'",
        "question": "What are the names of all the different reviewers who rates Gone with the Wind?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "question": "Find the names of all directors whose movies are rated by Sarah Martinez.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
        "question": "Return all reviewer names and movie names together in a single list.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Reviewer UNION SELECT title FROM Movie"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
        "question": "What are the names of all the reviewers and movie names?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Reviewer UNION SELECT title FROM Movie"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'",
        "question": "Find the titles of all movies not reviewed by Chris Jackson.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'",
        "question": "What are the titles of all movies that were not reviewed by Chris Jackson?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title",
        "question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title",
        "question": "For all directors who have directed more than one movie, what movies have they directed and what are their names?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title",
        "question": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title",
        "question": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1",
        "question": "What are the names of the directors who made exactly one movie?",
        "correctness": 1,
        "gold_parse": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1",
        "question": "What are the names of all directors who made one movie?",
        "correctness": 1,
        "gold_parse": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1",
        "question": "What are the names of the directors who made exactly one movie excluding director NULL?",
        "correctness": 1,
        "gold_parse": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1",
        "question": "What are the names of all directors who have made one movie except for the director named NULL?",
        "correctness": 1,
        "gold_parse": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director",
        "question": "How many movie reviews does each director get?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director",
        "question": "For each director, how many reviews have they received?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",
        "question": "Find the movies with the highest average rating. Return the movie titles and average rating.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",
        "question": "What are the movie titles with the highest average rating and what are those ratings?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1",
        "question": "What are the movie titles and average rating of the movies with the lowest average rating?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1",
        "question": "What are the titles and average ratings for all movies that have the lowest average rating?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
        "question": "What are the names and years of the movies that has the top 3 highest rating star?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
        "question": "What are the names and years released for the movies with the top 3 highest ratings?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director",
        "question": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director",
        "question": "For each director, what are the titles and ratings for all the movies they reviewed?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",
        "question": "Find the title and star rating of the movie that got the least rating star for each reviewer.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",
        "question": "For each reviewer id, what is the title and rating for the movie with the smallest rating?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "question": "Find the title and score of the movie with the lowest rating among all movies directed by each director.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "question": "For each director, what is the title and score of their most poorly rated movie?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the movie that is rated by most of times?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the movie that has been reviewed the most?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "question": "What are the titles of all movies that have rating star is between 3 and 5?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "question": "What are the titles of all movies that have between 3 and 5 stars?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
        "question": "Find the names of reviewers who had given higher than 3 star ratings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
        "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID",
        "question": "Find the average rating star for each movie that are not reviewed by Brittany Harris.",
        "correctness": 1,
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID",
        "question": "What is the average rating for each movie that has never been reviewed by Brittany Harris?",
        "correctness": 1,
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"",
        "question": "What are the ids of the movies that are not reviewed by Brittany Harris.",
        "correctness": 1,
        "gold_parse": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\""
    },
    {
        "db_id": "movie_1",
        "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"",
        "question": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?",
        "correctness": 1,
        "gold_parse": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\""
    },
    {
        "db_id": "movie_1",
        "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "question": "Find the average rating star for each movie that received at least 2 ratings.",
        "correctness": 1,
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "question": "For each movie that received more than 3 reviews, what is the average rating?",
        "correctness": 1,
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
        "question": "find the ids of reviewers who did not give 4 star.",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
        "question": "What are the ids of all reviewers who did not give 4 stars?",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Rating WHERE stars != 4",
        "question": "Find the ids of reviewers who didn't only give 4 star.",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Rating WHERE stars != 4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Rating WHERE stars != 4",
        "question": "What are the ids of all reviewers who have not given 4 stars at least once?",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Rating WHERE stars != 4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
        "question": "What are the names of all movies made before 1980 or had James Cameron as the director?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4",
        "question": "What are the names of reviewers who had rated 3 star and 4 star?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4",
        "question": "What are the names of all reviewers that have given 3 or 4 stars for reviews?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "question": "What are the names of movies that get 3 star and 4 star?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "question": "What are the names of all movies that received 3 or 4 stars?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT count(*) FROM county_public_safety",
        "question": "How many counties are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM county_public_safety"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT count(*) FROM county_public_safety",
        "question": "Count the number of countries.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM county_public_safety"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
        "question": "List the names of counties in descending order of population.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
        "question": "What are the names of the counties of public safety, ordered by population descending?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"",
        "question": "List the distinct police forces of counties whose location is not on east side.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\""
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"",
        "question": "What are the different police forces of counties that are not located in the East?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\""
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",
        "question": "What are the minimum and maximum crime rate of counties?",
        "correctness": 1,
        "gold_parse": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",
        "question": "Return the minimum and maximum crime rates across all counties.",
        "correctness": 1,
        "gold_parse": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
        "question": "Show the crime rates of counties in ascending order of number of police officers.",
        "correctness": 1,
        "gold_parse": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
        "question": "What are the crime rates of counties sorted by number of offices ascending?",
        "correctness": 1,
        "gold_parse": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM city ORDER BY Name ASC",
        "question": "What are the names of cities in ascending alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city ORDER BY Name ASC"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM city ORDER BY Name ASC",
        "question": "Return the names of cities, ordered alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city ORDER BY Name ASC"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Hispanic FROM city WHERE Black  >  10",
        "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?",
        "correctness": 1,
        "gold_parse": "SELECT Hispanic FROM city WHERE Black  >  10"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Hispanic FROM city WHERE Black  >  10",
        "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.",
        "correctness": 1,
        "gold_parse": "SELECT Hispanic FROM city WHERE Black  >  10"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "List the name of the county with the largest population.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "What is the name of the county with the greatest population?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
        "question": "List the names of the city with the top 5 white percentages.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city ORDER BY White DESC LIMIT 5"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
        "question": "What are the names of the five cities with the greatest proportion of white people?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city ORDER BY White DESC LIMIT 5"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
        "question": "Show names of cities and names of counties they are in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
        "question": "What are the names of cities, as well as the names of the counties they correspond to?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
        "question": "Show white percentages of cities and the crime rates of counties they are in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
        "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
        "correctness": 1,
        "gold_parse": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
        "question": "Show the name of cities in the county that has the largest number of police officers.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
        "question": "What are the names of cities that are in the county with the most police officers?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
        "question": "Show the number of cities in counties that have a population more than 20000.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
        "question": "How many cities are in counties that have populations of over 20000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90",
        "question": "Show the crime rate of counties with a city having white percentage more than 90.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90",
        "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "question": "Please show the police forces and the number of counties with each police force.",
        "correctness": 1,
        "gold_parse": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "question": "How many counties correspond to each police force?",
        "correctness": 1,
        "gold_parse": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the location shared by most counties?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which location has the most corresponding counties?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
        "question": "List the names of counties that do not have any cities.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
        "question": "What are the names of counties that do not contain any cities?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"",
        "question": "Show the police force shared by counties with location on the east and west.",
        "correctness": 1,
        "gold_parse": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\""
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"",
        "question": "Which police forces operate in both counties that are located in the East and in the West?",
        "correctness": 1,
        "gold_parse": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\""
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)",
        "question": "Show the names of cities in counties that have a crime rate less than 100.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)",
        "question": "What are the names of cities that are in counties that have a crime rate below 100?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
        "question": "Show the case burden of counties in descending order of population.",
        "correctness": 1,
        "gold_parse": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
        "question": "What are the case burdens of counties, ordered descending by population?",
        "correctness": 1,
        "gold_parse": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
        "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which room has the largest number of reservations?",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "How many kids stay in the rooms reserved by ROY SWEAZY?",
        "correctness": 1,
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
        "correctness": 1,
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "How many times does ROY SWEAZY has reserved a room.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "Find the number of times ROY SWEAZY has reserved a room.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;",
        "question": "Which room has the highest rate? List the room's full name, rate, check in and check out date.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;",
        "question": "Return the name, rate, check in and check out date for the room with the highest rate.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";",
        "question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",
        "correctness": 1,
        "gold_parse": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";",
        "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.",
        "correctness": 1,
        "gold_parse": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?",
        "correctness": 1,
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.",
        "correctness": 1,
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
        "question": "How many king beds are there?",
        "correctness": 1,
        "gold_parse": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
        "question": "Find the total number of king beds available.",
        "correctness": 1,
        "gold_parse": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
        "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
        "question": "What are the names and decor of rooms with a king bed? Sort them by their price",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
        "question": "What are the room name and base price of the room with the lowest base price?",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
        "question": "What is the decor of room Recluse and defiance?",
        "correctness": 1,
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
        "question": "Return the decor of the room named \"Recluse and defiance\".",
        "correctness": 1,
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
        "question": "What is the average base price of different bed type? List bed type and average base price.",
        "correctness": 1,
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
        "question": "For each bed type, find the average base price of different bed type.",
        "correctness": 1,
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';",
        "question": "What is the total number of people who could stay in the modern rooms in this inn?",
        "correctness": 1,
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';",
        "question": "How many people in total can stay in the modern rooms of this inn?",
        "correctness": 1,
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;",
        "question": "What kind of decor has the least number of reservations?",
        "correctness": 1,
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;",
        "question": "What is the least popular kind of decor?",
        "correctness": 1,
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "question": "Find the first and last names of people who payed more than the rooms' base prices.",
        "correctness": 1,
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "question": "What are the first and last names of people who payed more than the rooms' base prices?",
        "correctness": 1,
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Rooms;",
        "question": "How many rooms are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Rooms;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Rooms;",
        "question": "What is the total number of rooms available in this inn?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Rooms;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
        "question": "Find the number of rooms with a king bed.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
        "question": "How many rooms have a king bed?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
        "question": "Find the number of rooms for each bed type.",
        "correctness": 1,
        "gold_parse": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
        "question": "What are the number of rooms for each bed type?",
        "correctness": 1,
        "gold_parse": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "question": "Find the name of the room with the maximum occupancy.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "question": "What is the name of the room that can accommodate the most people?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",
        "question": "Find the id and name of the most expensive base price room.",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",
        "question": "Which room has the highest base price?",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";",
        "question": "List the type of bed and name of all traditional rooms.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";",
        "question": "What are the bed type and name of all the rooms with traditional decor?",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;",
        "question": "Find the number of rooms with king bed for each decor type.",
        "correctness": 1,
        "gold_parse": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "correctness": 1,
        "gold_parse": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;",
        "question": "Find the average and minimum price of the rooms in different decor.",
        "correctness": 1,
        "gold_parse": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;",
        "question": "What is the average minimum and price of the rooms for each different decor.",
        "correctness": 1,
        "gold_parse": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY basePrice;",
        "question": "List the name of all rooms sorted by their prices.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY basePrice;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY basePrice;",
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY basePrice;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;",
        "question": "Find the number of rooms with price higher than 120 for different decor.",
        "correctness": 1,
        "gold_parse": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;",
        "question": "How many rooms cost more than 120, for each different decor?",
        "correctness": 1,
        "gold_parse": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
        "question": "For each bed type, find the average room price.",
        "correctness": 1,
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
        "question": "What is the average base price of rooms, for each bed type?",
        "correctness": 1,
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";",
        "question": "List the name of rooms with king or queen bed.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";",
        "question": "What are the names of rooms that have either king or queen bed?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(DISTINCT bedType) FROM Rooms;",
        "question": "How many different types of beds are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT bedType) FROM Rooms;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(DISTINCT bedType) FROM Rooms;",
        "question": "Find the number of distinct bed types available in this inn.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT bedType) FROM Rooms;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "question": "Find the name and id of the top 3 expensive rooms.",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "question": "What are the name and id of the three highest priced rooms?",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );",
        "question": "Find the name of rooms whose price is higher than the average price.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );",
        "question": "What are the name of rooms that cost more than the average.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "question": "Find the number of rooms that do not have any reservation.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "question": "How many rooms have not had any reservation yet?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
        "question": "Return the name and number of reservations made for each of the rooms.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
        "question": "For each room, find its name and the number of times reservations were made for it.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
        "question": "Find the name of rooms whose base price is between 120 and 150.",
        "correctness": 1,
        "gold_parse": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
        "question": "Which rooms cost between 120 and 150? Give me the room names.",
        "correctness": 1,
        "gold_parse": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "question": "Find the name of rooms booked by some customers whose first name contains ROY.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'",
        "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "correctness": 1,
        "gold_parse": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",
        "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
        "correctness": 1,
        "gold_parse": "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
        "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
        "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
        "correctness": 1,
        "gold_parse": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'",
        "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
        "question": "How many different source system code for the cmi cross references are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC",
        "question": "List all information about customer master index, and sort them by details in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "correctness": 1,
        "gold_parse": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT count(*) FROM rent_arrears",
        "question": "How many council taxes are collected for renting arrears ?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM rent_arrears"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'",
        "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "correctness": 1,
        "gold_parse": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'",
        "question": "Which distinct source system code includes the substring 'en'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'"
    },
    {
        "db_id": "party_host",
        "query": "SELECT count(*) FROM party",
        "question": "How many parties are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM party"
    },
    {
        "db_id": "party_host",
        "query": "SELECT count(*) FROM party",
        "question": "Count the number of parties.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM party"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "List the themes of parties in ascending order of number of hosts.",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "What are the themes of parties ordered by the number of hosts in ascending manner?",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme ,  LOCATION FROM party",
        "question": "What are the themes and locations of parties?",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme ,  LOCATION FROM party"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme ,  LOCATION FROM party",
        "question": "Give me the theme and location of each party.",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme ,  LOCATION FROM party"
    },
    {
        "db_id": "party_host",
        "query": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\"",
        "question": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
        "correctness": 1,
        "gold_parse": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\""
    },
    {
        "db_id": "party_host",
        "query": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\"",
        "question": "What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?",
        "correctness": 1,
        "gold_parse": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\""
    },
    {
        "db_id": "party_host",
        "query": "SELECT avg(Number_of_hosts) FROM party",
        "question": "What is the average number of hosts for parties?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Number_of_hosts) FROM party"
    },
    {
        "db_id": "party_host",
        "query": "SELECT avg(Number_of_hosts) FROM party",
        "question": "Compute the average number of hosts for parties.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Number_of_hosts) FROM party"
    },
    {
        "db_id": "party_host",
        "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
        "question": "What is the location of the party with the most hosts?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1"
    },
    {
        "db_id": "party_host",
        "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
        "question": "Which party had the most hosts? Give me the party location.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",
        "question": "Show different nationalities along with the number of hosts of each nationality.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",
        "question": "How many hosts does each nationality have? List the nationality and the count.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common nationality of hosts.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which nationality has the most hosts?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",
        "question": "Show the themes of parties and the names of the party hosts.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",
        "question": "For each party, return its theme and the name of its host.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age",
        "question": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age",
        "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50",
        "question": "Show the locations of parties with hosts older than 50.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50",
        "question": "Which parties have hosts of age above 50? Give me the party locations.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
        "question": "Show the host names for parties with number of hosts greater than 20.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
        "question": "Which parties have more than 20 hosts? Give me the host names for these parties.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
        "question": "Show the name and the nationality of the oldest host.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
        "question": "What are the name and the nationality of the host of the highest age?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "List the names of hosts who did not serve as a host of any party in our record.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "What are the names of hosts who did not host any party in our record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT count(*) FROM region",
        "question": "How many regions do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM region"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT count(*) FROM region",
        "question": "Count the number of regions.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM region"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
        "question": "Show all region code and region name sorted by the codes.",
        "correctness": 1,
        "gold_parse": "SELECT region_code ,  region_name FROM region ORDER BY region_code"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
        "question": "What are the codes and names for all regions, sorted by codes?",
        "correctness": 1,
        "gold_parse": "SELECT region_code ,  region_name FROM region ORDER BY region_code"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT region_name FROM region ORDER BY region_name",
        "question": "List all region names in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT region_name FROM region ORDER BY region_name"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT region_name FROM region ORDER BY region_name",
        "question": "What are the names of the regions in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT region_name FROM region ORDER BY region_name"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "question": "Show names for all regions except for Denmark.",
        "correctness": 1,
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "question": "Return the names of all regions other than Denmark.",
        "correctness": 1,
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "question": "How many storms had death records?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "question": "Count the number of storms in which at least 1 person died.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "question": "List name, dates active, and number of deaths for all storms with at least 1 death.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "correctness": 1,
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "correctness": 1,
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",
        "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
        "correctness": 1,
        "gold_parse": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",
        "question": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.",
        "correctness": 1,
        "gold_parse": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "List name and damage for all storms in a descending order of max speed.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "What are the names and damage in millions for storms, ordered by their max speeds descending?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT count(DISTINCT region_id) FROM affected_region",
        "question": "How many regions are affected?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT region_id) FROM affected_region"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT count(DISTINCT region_id) FROM affected_region",
        "question": "Count the number of different affected regions.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT region_id) FROM affected_region"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
        "question": "Show the name for regions not affected.",
        "correctness": 1,
        "gold_parse": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
        "question": "What are the names of regions that were not affected?",
        "correctness": 1,
        "gold_parse": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "question": "Show the name for regions and the number of storms for each region.",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "question": "How many storms occured in each region?",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
        "question": "List the name for storms and the number of affected regions for each storm.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
        "question": "How many regions were affected by each storm?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the storm name and max speed which affected the greatest number of regions?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name and max speed of the storm that affected the most regions.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
        "question": "Show the name of storms which don't have affected region in record.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
        "question": "What are the names of storms that did not affect any regions?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "question": "Show storm name with at least two regions and 10 cities affected.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "question": "Show all storm names except for those with at least two affected regions.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "question": "What are the names of storms that did not affect two or more regions?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "correctness": 1,
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "question": "Return the names of the regions affected by storms that had a death count of at least 10.",
        "correctness": 1,
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "question": "Show all storm names affecting region \"Denmark\".",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "question": "What are the names of the storms that affected Denmark?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "question": "Show the region name with at least two storms.",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "question": "What are the names of regions with two or more storms?",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
        "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.",
        "correctness": 1,
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
        "question": "What are the names of regions that were affected by the storm in which the most people died?",
        "correctness": 1,
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
        "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
        "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'"
    },
    {
        "db_id": "election",
        "query": "SELECT count(*) FROM county",
        "question": "How many counties are there in total?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM county"
    },
    {
        "db_id": "election",
        "query": "SELECT count(*) FROM county",
        "question": "Count the total number of counties.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM county"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name ,  Population FROM county",
        "question": "Show the county name and population of all counties.",
        "correctness": 1,
        "gold_parse": "SELECT County_name ,  Population FROM county"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name ,  Population FROM county",
        "question": "What are the name and population of each county?",
        "correctness": 1,
        "gold_parse": "SELECT County_name ,  Population FROM county"
    },
    {
        "db_id": "election",
        "query": "SELECT avg(Population) FROM county",
        "question": "Show the average population of all counties.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Population) FROM county"
    },
    {
        "db_id": "election",
        "query": "SELECT avg(Population) FROM county",
        "question": "On average how large is the population of the counties?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Population) FROM county"
    },
    {
        "db_id": "election",
        "query": "SELECT max(Population) ,  min(Population) FROM county",
        "question": "Return the maximum and minimum population among all counties.",
        "correctness": 1,
        "gold_parse": "SELECT max(Population) ,  min(Population) FROM county"
    },
    {
        "db_id": "election",
        "query": "SELECT max(Population) ,  min(Population) FROM county",
        "question": "What are the maximum and minimum population of the counties?",
        "correctness": 1,
        "gold_parse": "SELECT max(Population) ,  min(Population) FROM county"
    },
    {
        "db_id": "election",
        "query": "SELECT DISTINCT District FROM election",
        "question": "Show all the distinct districts for elections.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT District FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT DISTINCT District FROM election",
        "question": "What are the distinct districts for elections?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT District FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"",
        "question": "Show the zip code of the county with name \"Howard\".",
        "correctness": 1,
        "gold_parse": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\""
    },
    {
        "db_id": "election",
        "query": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"",
        "question": "What is the zip code the county named \"Howard\" is located in?",
        "correctness": 1,
        "gold_parse": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\""
    },
    {
        "db_id": "election",
        "query": "SELECT Delegate FROM election WHERE District  =  1",
        "question": "Show the delegate from district 1 in election.",
        "correctness": 1,
        "gold_parse": "SELECT Delegate FROM election WHERE District  =  1"
    },
    {
        "db_id": "election",
        "query": "SELECT Delegate FROM election WHERE District  =  1",
        "question": "Who is the delegate of district 1 in the elections?",
        "correctness": 1,
        "gold_parse": "SELECT Delegate FROM election WHERE District  =  1"
    },
    {
        "db_id": "election",
        "query": "SELECT Delegate ,  Committee FROM election",
        "question": "Show the delegate and committee information of elections.",
        "correctness": 1,
        "gold_parse": "SELECT Delegate ,  Committee FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT Delegate ,  Committee FROM election",
        "question": "What are the delegate and committee information for each election record?",
        "correctness": 1,
        "gold_parse": "SELECT Delegate ,  Committee FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "question": "How many distinct governors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party"
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "question": "Count the number of distinct governors.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party"
    },
    {
        "db_id": "election",
        "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "correctness": 1,
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
    },
    {
        "db_id": "election",
        "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "correctness": 1,
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
    },
    {
        "db_id": "election",
        "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\""
    },
    {
        "db_id": "election",
        "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\""
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "Show all the information about election.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "Return all the information for each election record.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
        "question": "Show the delegates and the names of county they belong to.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
        "question": "What are the delegate and name of the county they belong to, for each county?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "question": "Find the delegates who are from counties with population below 100000.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000"
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "question": "How many distinct delegates are from counties with population larger than 50000?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000"
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "question": "Count the number of distinct delegates who are from counties with population above 50000.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000"
    },
    {
        "db_id": "election",
        "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"",
        "question": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?",
        "correctness": 1,
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"",
        "question": "Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "question": "Show the delegates and the names of the party they belong to.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID"
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "question": "For each delegate, find the names of the party they are part of.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2"
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
        "question": "Return all the committees that have delegates from Democratic party.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
        "question": "Which committees have delegates from the Democratic party?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "question": "Show the name of each county along with the corresponding number of delegates from that county.",
        "correctness": 1,
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id"
    },
    {
        "db_id": "election",
        "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "question": "For each county, find the name of the county and the number of delegates from that county.",
        "correctness": 1,
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "question": "Show the name of each party and the corresponding number of delegates from that party.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "question": "For each party, return the name of the party and the number of delegates from that party.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY Population ASC",
        "question": "Return the names of all counties sorted by population in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY Population ASC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY Population ASC",
        "question": "Sort the names of all counties in ascending order of population.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY Population ASC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Return the names of all counties sorted by county name in descending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Sort the names of all counties in descending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
        "question": "Show the name of the county with the biggest population.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
        "question": "Which county has the largest population? Give me the name of the county.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
        "question": "Show the 3 counties with the smallest population.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
        "question": "What are the 3 counties that have the smallest population? Give me the county names.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3"
    },
    {
        "db_id": "election",
        "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "question": "Show the names of counties that have at least two delegates.",
        "correctness": 1,
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "election",
        "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "election",
        "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
        "question": "Show the name of the party that has at least two records.",
        "correctness": 1,
        "gold_parse": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "election",
        "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
        "question": "Which party has two or more records?",
        "correctness": 1,
        "gold_parse": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the party that has the most delegates.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which party has the largest number of delegates?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "election",
        "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the people that have been governor the most times.",
        "correctness": 1,
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "election",
        "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which people severed as governor most frequently?",
        "correctness": 1,
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "election",
        "query": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "correctness": 1,
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "election",
        "query": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
        "correctness": 1,
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "election",
        "query": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "question": "What are the names of parties that do not have delegates in election?",
        "correctness": 1,
        "gold_parse": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)"
    },
    {
        "db_id": "election",
        "query": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "question": "Which parties did not have any delegates in elections?",
        "correctness": 1,
        "gold_parse": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
        "question": "What are the names of parties that have both delegates on \"Appropriations\" committee and",
        "correctness": 1,
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\""
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
        "question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "question": "Which committees have delegates from both democratic party and liberal party?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "question": "Find the committees that have delegates both from from the democratic party and the liberal party.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    {
        "db_id": "news_report",
        "query": "SELECT count(*) FROM journalist",
        "question": "How many journalists are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM journalist"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Name FROM journalist ORDER BY Years_working ASC",
        "question": "List the names of journalists in ascending order of years working.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM journalist ORDER BY Years_working ASC"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality ,  Age FROM journalist",
        "question": "What are the nationalities and ages of journalists?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  Age FROM journalist"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\"",
        "question": "Show the names of journalists from \"England\" or \"Wales\".",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\""
    },
    {
        "db_id": "news_report",
        "query": "SELECT avg(Years_working) FROM journalist",
        "question": "What is the average number of years spent working as a journalist?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Years_working) FROM journalist"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1",
        "question": "What is the nationality of the journalist with the largest number of years working?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality",
        "question": "Show the different nationalities and the number of journalists of each nationality.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common nationality for journalists.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3",
        "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC",
        "question": "Show the dates, places, and names of events in descending order of the attendance.",
        "correctness": 1,
        "gold_parse": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC"
    },
    {
        "db_id": "news_report",
        "query": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID",
        "question": "Show the names of journalists and the dates of the events they reported.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID"
    },
    {
        "db_id": "news_report",
        "query": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
        "question": "Show the names of journalists and the names of the events they reported in ascending order",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC"
    },
    {
        "db_id": "news_report",
        "query": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name",
        "question": "Show the names of journalists and the number of events they reported.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name"
    },
    {
        "db_id": "news_report",
        "query": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of journalists that have reported more than one event.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)",
        "question": "List the names of journalists who have not reported any event.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)"
    },
    {
        "db_id": "news_report",
        "query": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",
        "question": "what are the average and maximum attendances of all events?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event"
    },
    {
        "db_id": "news_report",
        "query": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "question": "Find the average age and experience working length of journalists working on different role type.",
        "correctness": 1,
        "gold_parse": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    {
        "db_id": "news_report",
        "query": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2",
        "question": "List the event venues and names that have the top 2 most number of people attended.",
        "correctness": 1,
        "gold_parse": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT ResName FROM Restaurant;",
        "question": "Show me all the restaurants.",
        "correctness": 1,
        "gold_parse": "SELECT ResName FROM Restaurant;"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";",
        "question": "What is the address of the restaurant Subway?",
        "correctness": 1,
        "gold_parse": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";",
        "question": "What is the rating of the restaurant Subway?",
        "correctness": 1,
        "gold_parse": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT ResTypeName FROM Restaurant_Type;",
        "question": "List all restaurant types.",
        "correctness": 1,
        "gold_parse": "SELECT ResTypeName FROM Restaurant_Type;"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";",
        "question": "What is the description of the restaurant type Sandwich?",
        "correctness": 1,
        "gold_parse": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;",
        "question": "Which restaurants have highest rating? List the restaurant name and its rating.",
        "correctness": 1,
        "gold_parse": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "question": "What is the age of student Linda Smith?",
        "correctness": 1,
        "gold_parse": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "question": "What is the gender of the student Linda Smith?",
        "correctness": 1,
        "gold_parse": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Fname , Lname FROM Student WHERE Major  =  600;",
        "question": "List all students' first names and last names who majored in 600.",
        "correctness": 1,
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Major  =  600;"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "question": "Which city does student Linda Smith live in?",
        "correctness": 1,
        "gold_parse": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT count(*) FROM Student WHERE Advisor =  1121;",
        "question": "Advisor 1121 has how many students?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE Advisor =  1121;"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;",
        "question": "Which Advisor has most of students? List advisor and the number of students.",
        "correctness": 1,
        "gold_parse": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
        "question": "Which major has least number of students? List the major and the number of students.",
        "correctness": 1,
        "gold_parse": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;",
        "question": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "correctness": 1,
        "gold_parse": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;",
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "correctness": 1,
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';",
        "question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
        "correctness": 1,
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'",
        "question": "How many restaurant is the Sandwich type restaurant?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
        "question": "How long does student Linda Smith spend on the restaurant in total?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
        "question": "How many times has the student Linda Smith visited Subway?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
        "question": "When did Linda Smith visit Subway?",
        "correctness": 1,
        "gold_parse": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;",
        "question": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.",
        "correctness": 1,
        "gold_parse": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which student visited restaurant most often? List student's first name and last name.",
        "correctness": 1,
        "gold_parse": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'",
        "question": "Find the ids of orders whose status is 'Success'.",
        "correctness": 1,
        "gold_parse": "SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and price of the product that has been ordered the greatest number of times.",
        "correctness": 1,
        "gold_parse": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT count(*) FROM customers",
        "question": "Find the number of customers in total.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT count(DISTINCT payment_method) FROM customers",
        "question": "How many different payment methods are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT payment_method) FROM customers"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "question": "Show the details of all trucks in the order of their license number.",
        "correctness": 1,
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
        "question": "Find the name of the most expensive product.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
        "question": "Find the names of customers who are not living in the state of California.",
        "correctness": 1,
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'",
        "question": "List the names and emails of customers who payed by Visa card.",
        "correctness": 1,
        "gold_parse": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
        "question": "Find the names and phone numbers of customers living in California state.",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
        "question": "Find the states which do not have any employee in their record.",
        "correctness": 1,
        "gold_parse": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer",
        "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
        "correctness": 1,
        "gold_parse": "SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
        "question": "Find the name of the first 5 customers.",
        "correctness": 1,
        "gold_parse": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the payment method that is used most frequently.",
        "correctness": 1,
        "gold_parse": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT route_name FROM Delivery_Routes ORDER BY route_name",
        "question": "List the names of all routes in alphabetic order.",
        "correctness": 1,
        "gold_parse": "SELECT route_name FROM Delivery_Routes ORDER BY route_name"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of route that has the highest number of deliveries.",
        "correctness": 1,
        "gold_parse": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "question": "List the state names and the number of customers living in each state.",
        "correctness": 1,
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM authors",
        "question": "How many authors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM authors"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM authors",
        "question": "Count the number of authors.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM authors"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM inst",
        "question": "How many institutions are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM inst"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM inst",
        "question": "Count the number of institutions.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM inst"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM papers",
        "question": "How many papers are published in total?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM papers"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM papers",
        "question": "Count the number of total papers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM papers"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"",
        "question": "What are the titles of papers published by \"Jeremy Gibbons\"?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"",
        "question": "Find the titles of all the papers written by \"Jeremy Gibbons\"",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Find all the papers published by \"Aaron Turon\".",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Find the titles of all the papers written by \"Aaron Turon\".",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"",
        "question": "How many papers have \"Atsushi Ohori\" published?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"",
        "question": "How many papers are \"Atsushi Ohori\" the author of?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
        "question": "Which institution does \"Katsuhiro Ueno\" belong to?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
        "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"",
        "question": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"",
        "question": "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "question": "Which authors belong to the institution \"Google\"? Show the first names and last names.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "question": "Find the first names and last names of the authors whose institution affiliation is \"Google\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"",
        "question": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
        "correctness": 1,
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"",
        "question": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.",
        "correctness": 1,
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"",
        "question": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".",
        "correctness": 1,
        "gold_parse": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"",
        "question": "What are the first and last name of the author who published the paper titled \"Nameless, Painless\"?",
        "correctness": 1,
        "gold_parse": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
        "question": "What are the papers published under the institution \"Indiana University\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
        "question": "List the titles of the papers whose authors are from the institution \"Indiana University\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "question": "Find all the papers published by the institution \"Google\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "question": "Which papers were written by authors from the institution \"Google\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"",
        "question": "How many papers are published by the institution \"Tokohu University\"?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"",
        "question": "Find the number of papers published by authors from the institution \"Tokohu University\".",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"",
        "question": "Find the number of papers published by the institution \"University of Pennsylvania\".",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"",
        "question": "How many papers are written by authors from the institution \"University of Pennsylvania\"?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"",
        "question": "Find the papers which have \"Olin Shivers\" as an author.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"",
        "question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
        "question": "Which papers have \"Stephanie Weirich\" as an author?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
        "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"",
        "question": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"",
        "question": "Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\".",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the last name of the author that has published the most papers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",
        "question": "Which author has written the most papers? Find his or her last name.",
        "correctness": 1,
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "question": "Retrieve the country that has published the most papers.",
        "correctness": 1,
        "gold_parse": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the country that the most papers are affiliated with.",
        "correctness": 1,
        "gold_parse": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the organization that has published the largest number of papers.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which institution has the most papers? Find the name of the institution.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%ML%\"",
        "question": "Find the titles of the papers that contain the word \"ML\".",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%ML%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%ML%\"",
        "question": "Which papers have the substring \"ML\" in their titles? Return the titles of the papers.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%ML%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "Which paper's title contains the word \"Database\"?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"",
        "question": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".",
        "correctness": 1,
        "gold_parse": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"",
        "question": "Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.",
        "correctness": 1,
        "gold_parse": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
        "question": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".",
        "correctness": 1,
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
        "question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.",
        "correctness": 1,
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "question": "Retrieve the title of the paper that has the largest number of authors.",
        "correctness": 1,
        "gold_parse": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "question": "Which paper has the most authors? Give me the paper title.",
        "correctness": 1,
        "gold_parse": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
        "question": "What is the first name of the author with last name \"Ueno\"?",
        "correctness": 1,
        "gold_parse": "SELECT fname FROM authors WHERE lname  =  \"Ueno\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
        "question": "Which authors have last name \"Ueno\"? List their first names.",
        "correctness": 1,
        "gold_parse": "SELECT fname FROM authors WHERE lname  =  \"Ueno\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT lname FROM authors WHERE fname  =  \"Amal\"",
        "question": "Find the last name of the author with first name \"Amal\".",
        "correctness": 1,
        "gold_parse": "SELECT lname FROM authors WHERE fname  =  \"Amal\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT lname FROM authors WHERE fname  =  \"Amal\"",
        "question": "Which authors have first name \"Amal\"? List their last names.",
        "correctness": 1,
        "gold_parse": "SELECT lname FROM authors WHERE fname  =  \"Amal\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT fname FROM authors ORDER BY fname",
        "question": "Find the first names of all the authors ordered in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT fname FROM authors ORDER BY fname"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT fname FROM authors ORDER BY fname",
        "question": "Sort the first names of all the authors in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT fname FROM authors ORDER BY fname"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT lname FROM authors ORDER BY lname",
        "question": "Retrieve all the last names of authors in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT lname FROM authors ORDER BY lname"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT lname FROM authors ORDER BY lname",
        "question": "Give me a list of all the last names of authors sorted in alphabetical order",
        "correctness": 1,
        "gold_parse": "SELECT lname FROM authors ORDER BY lname"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT fname ,  lname FROM authors ORDER BY lname",
        "question": "Retrieve all the first and last names of authors in the alphabetical order of last names.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  lname FROM authors ORDER BY lname"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT fname ,  lname FROM authors ORDER BY lname",
        "question": "Sort the list of all the first and last names of authors in alphabetical order of the last names.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  lname FROM authors ORDER BY lname"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT last_name) FROM actor",
        "question": "How many different last names do the actors and actresses have?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT last_name) FROM actor"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT last_name) FROM actor",
        "question": "Count the number of different last names actors have.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT last_name) FROM actor"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most popular first name of the actors?",
        "correctness": 1,
        "gold_parse": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the most common first name among all actors.",
        "correctness": 1,
        "gold_parse": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most popular full name of the actors?",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the most common full name among all actors.",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
        "question": "Which districts have at least two addresses?",
        "correctness": 1,
        "gold_parse": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
        "question": "Give the districts which have two or more addresses.",
        "correctness": 1,
        "gold_parse": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?",
        "correctness": 1,
        "gold_parse": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.",
        "correctness": 1,
        "gold_parse": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "correctness": 1,
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
        "correctness": 1,
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM address WHERE district  =  'California'",
        "question": "How many addresses are in the district of California?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM address WHERE district  =  'California'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM address WHERE district  =  'California'",
        "question": "Count the number of addressed in the California district.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM address WHERE district  =  'California'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "question": "How many cities are in Australia?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "question": "Count the number of cities in Australia.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "question": "Which countries have at least 3 cities?",
        "correctness": 1,
        "gold_parse": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "question": "What are the countries that contain 3 or more cities?",
        "correctness": 1,
        "gold_parse": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
        "question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.",
        "correctness": 1,
        "gold_parse": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
        "question": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?",
        "correctness": 1,
        "gold_parse": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM customer WHERE active = '1'",
        "question": "How many customers have an active value of 1?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customer WHERE active = '1'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM customer WHERE active = '1'",
        "question": "Count the number of customers who are active.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customer WHERE active = '1'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "question": "Which film has the highest rental rate? And what is the rate?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "question": "What are the title and rental rate of the film with the highest rental rate?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "question": "What are the full names of actors who had roles in more than 30 films?",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which store owns most items?",
        "correctness": 1,
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the store that has the most items in inventory?",
        "correctness": 1,
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT sum(amount) FROM payment",
        "question": "What is the total amount of all payments?",
        "correctness": 1,
        "gold_parse": "SELECT sum(amount) FROM payment"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT sum(amount) FROM payment",
        "question": "Return the sum of all payment amounts.",
        "correctness": 1,
        "gold_parse": "SELECT sum(amount) FROM payment"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "What is the full name and id of the customer who has the lowest total amount of payment?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "question": "What is the genre name of the film HUNGER ROOF?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "question": "Return the name of the category to which the film 'HUNGER ROOF' belongs.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "question": "How many films are there in each category? List the genre name, genre id and the count.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "question": "What are the names and ids of the different categories, and how many films are in each?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the title and id of the film that has the greatest number of copies in inventory?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the title and inventory id of the film that is rented most often.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT language_id) FROM film",
        "question": "How many languages are in these films?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM film"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT language_id) FROM film",
        "question": "Count the number of different languages in these films.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM film"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title FROM film WHERE rating  =  'R'",
        "question": "What are all the movies rated as R? List the titles.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM film WHERE rating  =  'R'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title FROM film WHERE rating  =  'R'",
        "question": "Return the titles of any movies with an R rating.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM film WHERE rating  =  'R'"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "question": "Where is store 1 located?",
        "correctness": 1,
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "question": "Return the address of store 1.",
        "correctness": 1,
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "question": "Return all the information for all employees without any department number.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM employees WHERE department_id  =  \"null\""
    },
    {
        "db_id": "hr_1",
        "query": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "question": "What are all the employees without a department number?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM employees WHERE department_id  =  \"null\""
    },
    {
        "db_id": "hr_1",
        "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "question": "Display all the information about the department Marketing.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "question": "What is all the information about the Marketing department?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "when is the hire date for those employees whose first name does not containing the letter M?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "On what dates were employees without the letter M in their first names hired?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "question": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
        "correctness": 1,
        "gold_parse": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "question": "Return the phone numbers of employees with salaries between 8000 and 12000.",
        "correctness": 1,
        "gold_parse": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\""
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "question": "Return the full names and salaries of employees with null commissions.",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\""
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "question": "Return the full names and salaries for employees with first names that end with the letter m.",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "correctness": 1,
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "correctness": 1,
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "question": "What are the full names of employees who with in department 70 or 90?",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "correctness": 1,
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\""
    },
    {
        "db_id": "hr_1",
        "query": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "question": "What are the salaries and manager ids for employees who have managers?",
        "correctness": 1,
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\""
    },
    {
        "db_id": "hr_1",
        "query": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
        "question": "display all the details from Employees table for those employees who was hired before 2002-06-21.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
        "question": "What is all the information about employees hired before June 21, 2002?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'"
    }
]