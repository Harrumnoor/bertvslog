[
    {
        "db_id": "movie_1",
        "question": "For each director, what is the title and score of their most poorly rated movie?",
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "query": "SELECT T1.title , Sum ( T2.stars ) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the average room count of the apartments that have booking status code \"Provisional\".",
        "gold_parse": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "query": "SELECT Avg ( T1.bathroom_count ) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the average fee on a CSU campus in 1996",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show all product names and the total quantity ordered for each product name.",
        "gold_parse": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "query": "SELECT product_name , Sum ( * ) FROM Products GROUP BY product_name",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Find the id and city of the student address with the highest average monthly rental.",
        "gold_parse": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
        "query": "SELECT T2.student_id , T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.student_id ORDER BY Avg ( T2.monthly_rental ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = value AND T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the facility codes of apartments with more than 4 bedrooms.",
        "gold_parse": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
        "query": "SELECT facility_code FROM Apartment_Facilities GROUP BY facility_code HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What are the first and last names of all customers who lived in Lockmanfurt?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\"",
        "query": "SELECT first_name , last_name FROM Customers WHERE email_address = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the city with the most customers?",
        "gold_parse": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?",
        "gold_parse": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")",
        "query": "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars > ( SELECT Avg ( T2.stars ) FROM Rating AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show invoice dates and order id and details for all invoices.",
        "gold_parse": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "query": "SELECT T1.date_order_placed , T2.order_id FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How much in total does customer with first name as Carole and last name as Bernhard paid?",
        "gold_parse": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
        "query": "SELECT Sum ( amount_outstanding ) FROM Customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which campus has the most faculties in year 2003?",
        "gold_parse": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
        "query": "SELECT Faculty FROM faculty WHERE Year = value GROUP BY Campus ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each director, what is the title and score of their most poorly rated movie?",
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "query": "SELECT T1.title , Avg ( T2.stars ) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the number of faculty at Long Beach State University in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM faculty WHERE Year = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find the most prominent max page size among all the products.",
        "gold_parse": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT product FROM product GROUP BY product ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many lessons did the customer Ryan Goodwin complete?",
        "gold_parse": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What campuses are located in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T1.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "In what city does Janessa Sawayn live?",
        "gold_parse": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\"",
        "query": "SELECT city FROM Addresses WHERE line_1_number_building = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show ids for all transactions whose amounts are greater than the average.",
        "gold_parse": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "query": "SELECT account_id FROM Financial_Transactions WHERE transaction_amount > ( SELECT Avg ( transaction_amount ) FROM Financial_Transactions )",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What are the first and last names of all customers with more than 2 payments?",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2",
        "query": "SELECT first_name , last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Find the names of all reviewers who have ratings with a NULL value for the date.",
        "gold_parse": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "What are the names of body builders?",
        "gold_parse": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_full_name = value AND T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What are the ids, date opened, name, and other details for all accounts?",
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "query": "SELECT order_id , date_order_placed , order_details FROM Orders",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find all the distinct district names ordered by city area in descending.",
        "gold_parse": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
        "query": "SELECT DISTINCT District_name FROM district ORDER BY City_Population Desc",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many distinct order ids correspond to each product?",
        "gold_parse": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "query": "SELECT product_id , Count ( * ) FROM Products GROUP BY product_id",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What are the apartment number and the room count of each apartment?",
        "gold_parse": "SELECT apt_number ,  room_count FROM Apartments",
        "query": "SELECT apt_number , Count ( * ) FROM Apartments GROUP BY apt_number",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".",
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
        "query": "SELECT T2.booking_start_date , T2.booking_end_date FROM Guests AS T1 JOIN Apartment_Bookings AS T2 ON T1.guest_id = T2.guest_id WHERE T1.gender_code = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Find the texts of assessment notes for teachers with last name \"Schuster\".",
        "gold_parse": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"",
        "query": "SELECT T2.notes_id FROM Teachers AS T1 JOIN Assessment_Notes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which year has the most degrees conferred?",
        "gold_parse": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT T3.Year FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus GROUP BY T3.Year ORDER BY Avg ( T2.Degrees ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?",
        "gold_parse": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "query": "SELECT T3.Year FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Undergraduate > value INTERSECT SELECT T2.Campus FROM discipline_enrollments AS T2 WHERE T2.Discipline > value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What is the average number of bedrooms of all apartments?",
        "gold_parse": "SELECT avg(bedroom_count) FROM Apartments",
        "query": "SELECT Avg ( bathroom_count ) FROM Apartments",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.County FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T1.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "List all information about the assessment notes sorted by date in ascending order.",
        "gold_parse": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC",
        "query": "SELECT * FROM Behavior_Incident ORDER BY date_incident_start Asc",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What campuses are in Los Angeles county?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "query": "SELECT Id FROM Campuses WHERE County = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all movies that received 3 or 4 stars?",
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars LIKE value OR T2.stars LIKE value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which campus was opened between 1935 and 1939?",
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "query": "SELECT T3.Campus FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year > = value AND T2.Year < = value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "What is the average snatch score of body builders?",
        "gold_parse": "SELECT avg(Snatch) FROM body_builder",
        "query": "SELECT Avg ( Clean_Jerk ) FROM body_builder",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "gold_parse": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "query": "SELECT building_description FROM Apartment_Buildings GROUP BY building_description HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
        "gold_parse": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\"",
        "query": "SELECT Sum ( T1.Total ) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Undergraduate = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.",
        "gold_parse": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "gold_parse": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full'",
        "query": "SELECT Accreditation_type , Company_name FROM phone WHERE Accreditation_type LIKE value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which apartment type code is the most common among apartments with more than one bathroom?",
        "gold_parse": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Count the number of chip model that do not have wifi.",
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "query": "SELECT Count ( * ) FROM screen_mode WHERE Hardware_colours NOT IN ( SELECT Hardware_colours FROM screen_mode )",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "Which city does has most number of customers?",
        "gold_parse": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the id of the reviewer whose name includes the word \"Mike\"?",
        "gold_parse": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
        "query": "SELECT T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T1.name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all directors who have made one movie except for the director named NULL?",
        "gold_parse": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1",
        "query": "SELECT T1.name FROM Reviewer AS T1 WHERE T1.rID NOT IN ( SELECT T2.director FROM Movie AS T2 WHERE T2.title = value )",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = value AND T1.Type = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Find the booking start date and end date for the apartments that have more than two bedrooms.",
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
        "query": "SELECT booking_start_date , booking_end_date FROM Apartment_Bookings GROUP BY apt_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "gold_parse": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T3.invoice_number , T1.date_order_placed FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id JOIN Financial_Transactions AS T3 ON T2.invoice_number = T3.invoice_number GROUP BY T3.invoice_number ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?",
        "gold_parse": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
        "query": "SELECT T2.name , T1.title , T3.ratingDate FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID AND T1.mID = T3.mID ORDER BY T3.stars Asc",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "List all information about the assessment notes sorted by date in ascending order.",
        "gold_parse": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC",
        "query": "SELECT * FROM Ref_Incident_Type ORDER BY incident_type_description Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What are the different product sizes?",
        "gold_parse": "SELECT DISTINCT product_size FROM Products",
        "query": "SELECT DISTINCT product_color FROM Products",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Count the number of financial transactions that the account with the name 337 has.",
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "query": "SELECT Count ( * ) FROM Accounts WHERE account_name = value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "What are the clean and jerk score of the body builder with the highest total score?",
        "gold_parse": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "query": "SELECT Clean_Jerk , Total FROM body_builder ORDER BY Total Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "Which city lives most of staffs? List the city name and number of staffs.",
        "gold_parse": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT city , Count ( * ) FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "query": "SELECT account_id , date_account_opened , other_account_details FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each director, what is the title and score of their most poorly rated movie?",
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "query": "SELECT T1.title , Min ( T2.stars ) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Find the average rating star for each movie that received at least 2 ratings.",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T2.mID HAVING Avg ( T2.stars ) > = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "gold_parse": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "query": "SELECT building_address FROM Apartment_Buildings GROUP BY building_description HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What are the line 1 of addresses shared by some students and some teachers?",
        "gold_parse": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "query": "SELECT T1.email_address FROM Students AS T1 UNION SELECT T2.email_address FROM Teachers AS T2",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_description = value AND T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find the name of the products that are not using the most frequently-used max page size.",
        "gold_parse": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT product FROM product EXCEPT SELECT product FROM product WHERE dpi < = value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "What is the name of the body builder with the greatest body weight?",
        "gold_parse": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "query": "SELECT Name FROM people ORDER BY Weight Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Return the apartment number with the largest number of bedrooms.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
        "query": "SELECT apt_number FROM Apartments GROUP BY apt_number ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Return all reviewer names and movie names together in a single list.",
        "gold_parse": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
        "query": "SELECT T2.stars , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "gold_parse": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "query": "SELECT Total , Clean_Jerk FROM body_builder ORDER BY Total Asc",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
        "gold_parse": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
        "query": "SELECT T2.rID FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = value AND T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many lessons did the customer with the first name Ray take?",
        "gold_parse": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the number of graduates in \"San Francisco State University\" in year 2004?",
        "gold_parse": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"",
        "query": "SELECT Count ( * ) FROM faculty WHERE Campus = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What is the apartment number of the apartment with the most beds?",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
        "query": "SELECT apt_number FROM Apartments GROUP BY apt_number ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Graduate = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?",
        "gold_parse": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")",
        "query": "SELECT title FROM Movie ORDER BY year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find the number of stores in each city.",
        "gold_parse": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",
        "query": "SELECT Count ( * ) , Headquartered_City FROM district GROUP BY Headquartered_City",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Sort the apartment numbers in ascending order of room count.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Campus = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all reviewers that have rated 3 or more movies?",
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value UNION SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars > = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many lesson does customer with first name Ray took?",
        "gold_parse": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find the list of page size which have more than 3 product listed",
        "gold_parse": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
        "query": "SELECT dimensions FROM product GROUP BY dimensions HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "What is the minimum snatch score?",
        "gold_parse": "SELECT min(snatch) FROM body_builder",
        "query": "SELECT Min ( Height ) FROM people",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Find all the building full names containing the word \"court\".",
        "gold_parse": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
        "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_short_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which campus has the most degrees conferred in all times?",
        "gold_parse": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT T3.Campus FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus GROUP BY T3.Campus ORDER BY Avg ( T2.Degrees ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.FTE_AY ) FROM Campuses AS T1 JOIN enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Faculty = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?",
        "gold_parse": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000",
        "query": "SELECT cell_mobile_phone_number , email_address FROM Customers WHERE amount_outstanding > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What degrees were conferred in San Francisco State University in the year 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What city is the headquarter of the store Blackville?",
        "gold_parse": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
        "query": "SELECT Headquartered_City FROM district WHERE District_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = value AND T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What are the code and description of the least frequent detention type ?",
        "gold_parse": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT incident_type_code , incident_type_description FROM Ref_Incident_Type GROUP BY incident_type_code ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "gold_parse": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'",
        "query": "SELECT T1.Model_name FROM chip_model AS T1 EXCEPT SELECT T1.Model_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T2.Type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "gold_parse": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full'",
        "query": "SELECT T1.Bluetooth , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Accreditation_type LIKE value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = value AND T1.Type = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT * FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T1.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What are the code and description of the most frequent behavior incident type?",
        "gold_parse": "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT incident_type_code , incident_type_description FROM Ref_Incident_Type GROUP BY incident_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What are the address and phone number of the buildings managed by \"Brenden\"?",
        "gold_parse": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
        "query": "SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.County FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T2.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee of \"San Jose State University\" in year 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "What is the minimum snatch score?",
        "gold_parse": "SELECT min(snatch) FROM body_builder",
        "query": "SELECT Min ( Clean_Jerk ) FROM body_builder",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.",
        "gold_parse": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32",
        "query": "SELECT T3.Company_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode AND T1.Model_name = T3.chip_model WHERE T2.Type = value AND T1.RAM_MiB > value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Count ( * ) FROM Apartments WHERE apt_number LIKE value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "gold_parse": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
        "query": "SELECT Max ( bathroom_count ) , Max ( bathroom_count ) FROM Apartments",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "query": "SELECT T1.name , T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value INTERSECT SELECT T3.director FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi < value OR dpi < value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which year has the most degrees conferred?",
        "gold_parse": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT T3.Year FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus GROUP BY T2.Year ORDER BY Avg ( T3.Undergraduate ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each movie that received more than 3 reviews, what is the average rating?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "gold_parse": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1",
        "query": "SELECT Model_name FROM chip_model WHERE Launch_year = value ORDER BY RAM_MiB Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( CampusFee ) FROM csu_fees WHERE Year = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Company_name = value AND T1.Type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "gold_parse": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\"",
        "query": "SELECT Avg ( screen_mode ) FROM phone WHERE Company_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many accounts are there?",
        "gold_parse": "SELECT count(*) FROM Accounts",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?",
        "gold_parse": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
        "query": "SELECT T1.apt_type_code , T1.apt_number FROM Apartments AS T1 JOIN Guests AS T2 JOIN Apartment_Bookings AS T3 ON T1.apt_id = T3.apt_id AND T3.guest_id = T2.guest_id WHERE T2.guest_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the total number of ratings that has more than 3 stars?",
        "gold_parse": "SELECT count(*) FROM Rating WHERE stars  >  3",
        "query": "SELECT Count ( * ) FROM Movie",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which year has the most degrees conferred?",
        "gold_parse": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT T2.Year FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN degrees AS T3 ON T1.Id = T3.Campus GROUP BY T2.Year ORDER BY Avg ( T3.Degrees ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many employees are there?",
        "gold_parse": "SELECT count(*) FROM Staff",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_address = value AND T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Faculty = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Which city is the headquarter of the store named \"Blackville\" in?",
        "gold_parse": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
        "query": "SELECT City_Population FROM district WHERE District_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many vehicles exist?",
        "gold_parse": "SELECT count(*) FROM Vehicles",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , customer_id , phone_number FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "In which city do the most employees live and how many of them live there?",
        "gold_parse": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT city , Count ( * ) FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Campus = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT bedroom_count FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN enrollments AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T1.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Find the average number of bedrooms of all the apartments.",
        "gold_parse": "SELECT avg(bedroom_count) FROM Apartments",
        "query": "SELECT Avg ( bathroom_count ) FROM Apartments",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.",
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director",
        "query": "SELECT T1.director , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID ORDER BY T2.stars Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many degrees were conferred in \"San Jose State University\" in 2000?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query": "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.County = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Find the details for all chip models.",
        "gold_parse": "SELECT * FROM chip_model",
        "query": "SELECT used_kb FROM screen_mode WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the average fee on a CSU campus in 1996",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "gold_parse": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
        "query": "SELECT Count ( * ) FROM Staff WHERE first_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_description LIKE value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Find the total number of rooms in the apartments that have facility code \"Gym\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
        "query": "SELECT Count ( * ) FROM Apartment_Facilities WHERE facility_code = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee in the year 2000 for San Jose State University?",
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What is the average pages per minute color?",
        "gold_parse": "SELECT avg(pages_per_minute_color) FROM product",
        "query": "SELECT Avg ( Ranking ) FROM store",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the average fee on a CSU campus in 1996",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value INTERSECT SELECT T3.director , T3.title FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What are the top three apartment types in terms of the average room count? Give me the",
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY Avg ( bathroom_count ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\"",
        "query": "SELECT T1.Model_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T2.Type = value EXCEPT SELECT T1.Model_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T2.Type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
        "gold_parse": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\"",
        "query": "SELECT T1.Hardware_colours , T1.Char_cells FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Company_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T1.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all the different reviewers who rates Gone with the Wind?",
        "gold_parse": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'",
        "query": "SELECT DISTINCT name FROM Reviewer",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which year has the most degrees conferred?",
        "gold_parse": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT T3.Year FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus GROUP BY T2.Year ORDER BY Avg ( T2.Degrees ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT CampusFee FROM csu_fees WHERE Year = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all directors who made one movie?",
        "gold_parse": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1",
        "query": "SELECT DISTINCT name FROM Reviewer",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value INTERSECT SELECT T3.director , T2.stars FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "How many reviewers are there?",
        "gold_parse": "SELECT count(*) FROM Reviewer",
        "query": "SELECT Count ( * ) FROM Movie",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Find the average ram mib size of the chip models that are never used by any phone.",
        "gold_parse": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
        "query": "SELECT Avg ( T1.Hardware_colours ) FROM screen_mode AS T1 WHERE T1.Hardware_colours NOT IN ( SELECT T2.chip_model FROM phone AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "In which country and state does Janessa Sawayn live?",
        "gold_parse": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\"",
        "query": "SELECT T1.country FROM Addresses AS T1 JOIN Customers AS T2 ON T1.address_id = T2.customer_address_id WHERE T2.first_name = value AND T1.state_province_county = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the name of the movie that is rated by most of times?",
        "gold_parse": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T2.mID ORDER BY Sum ( T2.stars ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "List the first name middle name and last name of all staff.",
        "gold_parse": "SELECT first_name ,  middle_name ,  last_name FROM Staff",
        "query": "SELECT middle_name , last_name FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 1996?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find all the stores in the district with the most population.",
        "gold_parse": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
        "query": "SELECT District_name FROM district ORDER BY City_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "query": "SELECT bedroom_count FROM Apartments WHERE apt_type_code = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What campuses opened between 1935 and 1939?",
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "query": "SELECT Campus FROM faculty WHERE Year BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the first name of the staff who did not give any lesson?",
        "gold_parse": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "query": "SELECT first_name FROM Staff EXCEPT SELECT first_name FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_full_name = value AND T1.building_short_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Find the titles of all movies directed by steven spielberg.",
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What are the building full names that contain the word \"court\"?",
        "gold_parse": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
        "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_short_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "query": "SELECT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = value INTERSECT SELECT T3.name , T3.name FROM Reviewer AS T3 JOIN Rating AS T2 ON T3.rID = T2.rID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all movies directed by Steven Spielberg?",
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What degrees were conferred in San Francisco State University in the year 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the number of faculty at Long Beach State University in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many universities have a campus fee higher than average?",
        "gold_parse": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "query": "SELECT Count ( * ) FROM Campuses",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What are the facility codes of the apartments with more than four bedrooms?",
        "gold_parse": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
        "query": "SELECT T2.facility_code FROM Apartments AS T1 JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id GROUP BY T1.apt_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find the name and population of district with population between 200000 and 2000000",
        "gold_parse": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "query": "SELECT District_name , City_Population FROM district WHERE City_Area BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".",
        "gold_parse": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\"",
        "query": "SELECT T2.Char_cells , T2.Pixels , T2.Hardware_colours FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T1.Model_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "List the first name middle name and last name of all staff.",
        "gold_parse": "SELECT first_name ,  middle_name ,  last_name FROM Staff",
        "query": "SELECT first_name , last_name FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?",
        "gold_parse": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\"",
        "query": "SELECT T2.lesson_id FROM Staff AS T1 JOIN Lessons AS T2 ON T1.staff_id = T2.staff_id WHERE T1.first_name = value AND T1.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?",
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID GROUP BY T2.rID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT Max ( Degrees ) FROM degrees",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Find the title and score of the movie with the lowest rating among all movies directed by each director.",
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "query": "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID ORDER BY T2.stars Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "List the names and origins of people who are not body builders.",
        "gold_parse": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",
        "query": "SELECT T1.Name , T1.Weight FROM people AS T1 WHERE T1.People_ID NOT IN ( SELECT T2.People_ID FROM body_builder AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT * FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T2.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "gold_parse": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "query": "SELECT T3.Faculty FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Undergraduate > value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Return the apartment number and the number of rooms for each apartment.",
        "gold_parse": "SELECT apt_number ,  room_count FROM Apartments",
        "query": "SELECT apt_number , Count ( * ) FROM Apartments GROUP BY apt_number",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "Which last names are both used by customers and by staff?",
        "gold_parse": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "query": "SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = value INTERSECT SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What are the start and end dates for incidents with incident type code \"NOISE\"?",
        "gold_parse": "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\"",
        "query": "SELECT date_incident_start , date_incident_start FROM Behavior_Incident WHERE incident_type_code = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the reviewer id of Daniel Lewis?",
        "gold_parse": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"",
        "query": "SELECT T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the addresses and phones of all the buildings managed by \"Brenden\".",
        "gold_parse": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
        "query": "SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
        "gold_parse": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "query": "SELECT account_id FROM Financial_Transactions WHERE transaction_amount > ( SELECT Avg ( transaction_amount ) FROM Financial_Transactions )",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
        "gold_parse": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
        "query": "SELECT Count ( * ) FROM faculty WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "gold_parse": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\"",
        "query": "SELECT T2.lesson_id FROM Staff AS T1 JOIN Lessons AS T2 ON T1.staff_id = T2.staff_id WHERE T1.first_name = value AND T1.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query": "SELECT DISTINCT customer_first_name , customer_last_name , phone_number FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many faculty lines are there at San Francisco State University in 2004?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
        "query": "SELECT Count ( * ) FROM faculty WHERE Year = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "List phone number and email address of customer with more than 2000 outstanding balance.",
        "gold_parse": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000",
        "query": "SELECT cell_mobile_phone_number , email_address FROM Customers WHERE amount_outstanding > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show the order ids and the number of items in each order.",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "gold_parse": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = value AND T1.year > value INTERSECT SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = value AND T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each director, what is the title and score of their most poorly rated movie?",
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "query": "SELECT T1.title , Max ( T2.stars ) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "query": "SELECT Campus FROM faculty WHERE Year = value OR Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Report the name of all campuses in Los Angeles county.",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "query": "SELECT Id FROM Campuses WHERE County = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Faculty = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "query": "SELECT T1.name , T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value INTERSECT SELECT T3.director FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Discipline = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "List email address and birthday of customer whose first name as Carole.",
        "gold_parse": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"",
        "query": "SELECT email_address , email_address FROM Customers WHERE first_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What campus has the most degrees  conferrred over its entire existence?",
        "gold_parse": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT Faculty FROM faculty GROUP BY Campus ORDER BY Avg ( Year ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?",
        "gold_parse": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year",
        "query": "SELECT year FROM Movie ORDER BY year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.chip_model = value AND T1.Type = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "gold_parse": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.year < value OR T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all reviewers that have given 3 or 4 stars for reviews?",
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4",
        "query": "SELECT name FROM Reviewer",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
        "query": "SELECT booking_start_date , booking_end_date FROM Apartment_Bookings GROUP BY apt_booking_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = value AND T1.Type = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many transaction does each account have? Show the number and account id.",
        "gold_parse": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "query": "SELECT Count ( * ) , account_id FROM Accounts GROUP BY account_id",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "How many movie reviews does each director get?",
        "gold_parse": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director",
        "query": "SELECT director , Count ( * ) FROM Movie GROUP BY director",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What is the average room count of the apartments whose booking status code is \"Provisional\"?",
        "gold_parse": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "query": "SELECT Avg ( T1.bathroom_count ) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Return the order ids and details for orderes with two or more invoices.",
        "gold_parse": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "query": "SELECT order_id , order_details FROM Orders GROUP BY order_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What is the average number of rooms of apartments with type code \"Studio\"?",
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "query": "SELECT Avg ( bathroom_count ) FROM Apartments WHERE apt_type_code = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "In what year was the most degrees conferred?",
        "gold_parse": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT Year FROM discipline_enrollments GROUP BY Year ORDER BY Avg ( Graduate ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Find all information about student addresses, and sort by monthly rental in descending order.",
        "gold_parse": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
        "query": "SELECT T1.email_address FROM Students AS T1 JOIN Student_Addresses AS T2 ON T1.student_id = T2.student_id ORDER BY T2.monthly_rental Desc",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "query": "SELECT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = value INTERSECT SELECT T3.name , T2.stars FROM Reviewer AS T3 JOIN Rating AS T2 ON T3.rID = T2.rID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Find the names of all directors whose movies are rated by Sarah Martinez.",
        "gold_parse": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "query": "SELECT DISTINCT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "How many reviewers listed?",
        "gold_parse": "SELECT count(*) FROM Reviewer",
        "query": "SELECT Count ( * ) FROM Movie",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Find the dates of assessment notes for students with first name \"Fanny\".",
        "gold_parse": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\"",
        "query": "SELECT T2.date_incident_start FROM Students AS T1 JOIN Behavior_Incident AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.room_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_full_name = value AND T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
        "gold_parse": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Find the texts of assessment notes for teachers with last name \"Schuster\".",
        "gold_parse": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"",
        "query": "SELECT T2.detention_summary FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?",
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "query": "SELECT DISTINCT T2.name , T1.title , T1.director FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many invoices do we have?",
        "gold_parse": "SELECT count(*) FROM Invoices",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many vehicle in total?",
        "gold_parse": "SELECT count(*) FROM Vehicles",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all movies made before 1980 or had James Cameron as the director?",
        "gold_parse": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.year > value OR T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "List each birth place along with the number of people from there.",
        "gold_parse": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",
        "query": "SELECT Birth_Date , Count ( * ) FROM people GROUP BY Birth_Date",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "What are the birthdays of people in ascending order of height?",
        "gold_parse": "SELECT Birth_Date FROM People ORDER BY Height ASC",
        "query": "SELECT Birth_Place FROM people ORDER BY Height Asc",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
        "query": "SELECT Count ( * ) FROM faculty WHERE Campus = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
        "gold_parse": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32",
        "query": "SELECT T2.Accreditation_type , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year > value AND T1.RAM_MiB > value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi > value AND dpi < value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN enrollments AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?",
        "gold_parse": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year",
        "query": "SELECT T1.year FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars < = value ORDER BY T1.year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many lessons have been cancelled?",
        "gold_parse": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\"",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "How many movie ratings have more than 3 stars?",
        "gold_parse": "SELECT count(*) FROM Rating WHERE stars  >  3",
        "query": "SELECT Count ( * ) FROM Movie",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.",
        "gold_parse": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "List the campuses in Los Angeles county.",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "query": "SELECT Id FROM Campuses WHERE County = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What is the customer id, first and last name with most number of accounts.",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_id , customer_first_name , customer_last_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "When did the staff member named Janessa Sawayn join the company?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "List all cities of addresses in alphabetical order.",
        "gold_parse": "SELECT city FROM Addresses ORDER BY city",
        "query": "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the date of birth for the staff member named Janessa Sawayn?",
        "gold_parse": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "List first name and last name of customers that have more than 2 payments.",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2",
        "query": "SELECT first_name , last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many faculty members are at the university that gave the least number of degrees in 2001?",
        "gold_parse": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
        "query": "SELECT Count ( * ) FROM faculty WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "gold_parse": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "query": "SELECT building_description FROM Apartment_Buildings GROUP BY building_short_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the average fee on a CSU campus in 1996",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Campus = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each director, what is the title and score of their most poorly rated movie?",
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "query": "SELECT T1.director , Min ( T2.stars ) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Count the number of invoices.",
        "gold_parse": "SELECT count(*) FROM Invoices",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.",
        "gold_parse": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
        "query": "SELECT T2.name , T1.title , T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID AND T1.mID = T3.mID ORDER BY T3.stars Asc",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Count ( * ) FROM Apartment_Buildings WHERE building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "gold_parse": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "query": "SELECT building_short_name FROM Apartment_Buildings GROUP BY building_description HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi > value OR dpi < value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the titles of all movies that have not been rated?",
        "gold_parse": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars ! = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the total time for all lessons taught by Janessa Sawayn?",
        "gold_parse": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\"",
        "query": "SELECT Sum ( T2.lesson_time ) FROM Customers AS T1 JOIN Lessons AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = value AND T1.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What city is the headquarter of the store Blackville?",
        "gold_parse": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
        "query": "SELECT Headquartered_City FROM district WHERE City_Population = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "How many stores are headquarted in each city?",
        "gold_parse": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",
        "query": "SELECT Headquartered_City , Count ( * ) FROM district GROUP BY Headquartered_City",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What are the names of the districts that have both mall and village store style shops?",
        "gold_parse": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"",
        "query": "SELECT T2.District_name FROM store AS T1 JOIN district AS T2 JOIN store_district AS T3 ON T1.Store_ID = T3.Store_ID AND T3.District_ID = T2.District_ID WHERE T1.Store_Name = value INTERSECT SELECT T2.District_name FROM store AS T1 JOIN district AS T2 JOIN store_district AS T3 ON T1.Store_ID = T3.Store_ID AND T3.District_ID = T2.District_ID WHERE T1.Store_Name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T1.Year < value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many transaction does account with name 337 have?",
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "query": "SELECT Count ( * ) FROM Accounts WHERE account_name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = value AND T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of all apartments with facility code \"Gym\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
        "query": "SELECT Sum ( T1.bathroom_count ) FROM Apartments AS T1 JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id WHERE T2.facility_code = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Faculty = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "query": "SELECT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = value INTERSECT SELECT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( * ) FROM Apartments WHERE apt_number LIKE value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "gold_parse": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "query": "SELECT building_short_name FROM Apartment_Buildings GROUP BY building_short_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Find the texts of assessment notes for teachers with last name \"Schuster\".",
        "gold_parse": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"",
        "query": "SELECT T1.detention_type_description FROM Ref_Detention_Type AS T1 JOIN Teachers AS T2 JOIN Detention AS T3 ON T1.detention_type_code = T3.detention_type_code AND T3.teacher_id = T2.teacher_id WHERE T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many undergraduates are there at San Jose State",
        "gold_parse": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "query": "SELECT Count ( * ) FROM Campuses WHERE County = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi < value AND dpi > value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find the names of districts where have both city mall and village store type stores.",
        "gold_parse": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"",
        "query": "SELECT T1.District_name FROM district AS T1 WHERE T1.Headquartered_City = value INTERSECT SELECT T1.District_name FROM store AS T2 JOIN district AS T1 JOIN store_district AS T3 ON T2.Store_ID = T3.Store_ID AND T3.District_ID = T1.District_ID WHERE T2.Type = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show all product names and the total quantity ordered for each product name.",
        "gold_parse": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "query": "SELECT T2.product_name , Sum ( T1.vat_rating ) FROM Product_Categories AS T1 JOIN Products AS T2 ON T1.production_type_code = T2.production_type_code GROUP BY T2.product_name",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show all product names and the total quantity ordered for each product name.",
        "gold_parse": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many order items correspond to each order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the directors who made exactly one movie excluding director NULL?",
        "gold_parse": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1",
        "query": "SELECT T2.name FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.title = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What are the names of all products that are not the most frequently-used maximum page size?",
        "gold_parse": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT T1.product FROM product AS T1 EXCEPT SELECT T1.product FROM product AS T1 JOIN store AS T2 WHERE T2.Area_size < = ( SELECT Max ( T2.Area_size ) FROM store AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "gold_parse": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "query": "SELECT building_short_name FROM Apartment_Buildings GROUP BY building_full_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each director, what are the titles and ratings for all the movies they reviewed?",
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director",
        "query": "SELECT T1.title , T2.stars FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
        "gold_parse": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
        "query": "SELECT T1.apt_type_code , T1.apt_number FROM Apartments AS T1 JOIN Guests AS T2 JOIN Apartment_Bookings AS T3 ON T1.apt_id = T3.apt_id AND T3.guest_id = T2.guest_id WHERE T2.guest_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( CampusFee ) FROM csu_fees WHERE Year = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Return all distinct detention type codes.",
        "gold_parse": "SELECT DISTINCT detention_type_code FROM Detention",
        "query": "SELECT DISTINCT address_type_code FROM Ref_Address_Types",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find the names of all stores in Khanewal District.",
        "gold_parse": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
        "query": "SELECT T1.Store_Name FROM store AS T1 JOIN district AS T2 JOIN store_district AS T3 ON T1.Store_ID = T3.Store_ID AND T3.District_ID = T2.District_ID WHERE T2.Headquartered_City = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT Hardware_Model_name FROM phone",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Campus = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "gold_parse": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1",
        "query": "SELECT Type , Count ( * ) FROM screen_mode GROUP BY Type ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Give me the minimum and maximum bathroom count among all the apartments.",
        "gold_parse": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
        "query": "SELECT Max ( bathroom_count ) , Max ( bathroom_count ) FROM Apartments",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Find the title and star rating of the movie that got the least rating star for each reviewer.",
        "gold_parse": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",
        "query": "SELECT T1.name , T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID ORDER BY T2.stars Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show all product names without an order.",
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "query": "SELECT product_name FROM Products EXCEPT SELECT product_name FROM Products",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?",
        "gold_parse": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\"",
        "query": "SELECT T2.Graphics_mode , T2.Type FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T1.Model_name = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "How many models do not have the wifi function?",
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "query": "SELECT Count ( * ) FROM phone WHERE screen_mode = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Count the total number of apartment bookings.",
        "gold_parse": "SELECT count(*) FROM Apartment_Bookings",
        "query": "SELECT Count ( * ) FROM Apartment_Buildings",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find the city with the most number of stores.",
        "gold_parse": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Headquartered_City FROM district GROUP BY Headquartered_City ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show the product ids and the number of unique orders containing each product.",
        "gold_parse": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "query": "SELECT product_id , Count ( * ) FROM Products GROUP BY product_id",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which campus was opened between 1935 and 1939?",
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "query": "SELECT Campus FROM faculty WHERE Year > = value AND Year < = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each reviewer id, what is the title and rating for the movie with the smallest rating?",
        "gold_parse": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",
        "query": "SELECT T2.name , T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID AND T1.mID = T3.mID ORDER BY T3.stars Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.",
        "gold_parse": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value INTERSECT SELECT T3.building_manager FROM Apartment_Buildings AS T3 JOIN Apartments AS T1 ON T3.building_id = T1.building_id JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show all product names and the number of customers having an order on each product.",
        "gold_parse": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee of \"San Jose State University\" in year 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Who directed Avatar?",
        "gold_parse": "SELECT director FROM Movie WHERE title  = 'Avatar'",
        "query": "SELECT T2.name FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.director = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Faculty = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Count ( * ) FROM Apartments WHERE apt_number = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "When are the birthdays of customer who are classified as 'Good Customer' status?",
        "gold_parse": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
        "gold_parse": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "query": "SELECT District_name , Headquartered_City FROM district WHERE City_Population BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 1996?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( CampusFee ) FROM csu_fees WHERE Year = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Find the ids of reviewers who didn't only give 4 star.",
        "gold_parse": "SELECT rID FROM Rating WHERE stars != 4",
        "query": "SELECT T1.rID FROM Reviewer AS T1 EXCEPT SELECT T2.rID FROM Rating AS T2 WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many products were not included in any order?",
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "query": "SELECT Count ( * ) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Products )",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What are the different product names, and what is the sum of quantity ordered for each product?",
        "gold_parse": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "query": "SELECT product_name , Sum ( * ) FROM Products GROUP BY product_name",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "List the height and weight of people in descending order of height.",
        "gold_parse": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
        "query": "SELECT T2.Height , T2.Weight FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total Desc",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which campus has the most degrees conferred in all times?",
        "gold_parse": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT T3.Campus FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus GROUP BY T2.Campus ORDER BY Sum ( T2.Degrees ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each director, how many reviews have they received?",
        "gold_parse": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director",
        "query": "SELECT director , Count ( * ) FROM Movie GROUP BY director",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.County FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many transactions do we have?",
        "gold_parse": "SELECT count(*) FROM Financial_transactions",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is highest rating for the most recent movie and when was it released?",
        "gold_parse": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",
        "query": "SELECT title , year FROM Movie ORDER BY year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Count the number of transactions.",
        "gold_parse": "SELECT count(*) FROM Financial_transactions",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What are the last names that are used by customers and staff?",
        "gold_parse": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "query": "SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = value INTERSECT SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What is the city with the most number of flagship stores?",
        "gold_parse": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Headquartered_City FROM district GROUP BY Headquartered_City ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "gold_parse": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T2.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What are the names of the states that have 2 to 4 employees living there?",
        "gold_parse": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4",
        "query": "SELECT state_province_county FROM Addresses GROUP BY state_province_county HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "gold_parse": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT vehicle_id , vehicle_details FROM Vehicles GROUP BY vehicle_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Undergraduate = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all reviewers that have given 3 or 4 stars for reviews?",
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars LIKE value OR T2.stars LIKE value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which campus has the most degrees conferred in all times?",
        "gold_parse": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT T3.Campus FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus GROUP BY T2.Campus ORDER BY Avg ( T2.Degrees ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "What is the minimum snatch score?",
        "gold_parse": "SELECT min(snatch) FROM body_builder",
        "query": "SELECT Min ( Total ) FROM body_builder",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many faculty, in total, are there in the year 2002?",
        "gold_parse": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
        "query": "SELECT Count ( * ) FROM faculty WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "gold_parse": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000",
        "query": "SELECT District_name FROM district WHERE City_Area > value OR Headquartered_City = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_description = value AND T1.building_short_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Graduate = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many degrees were conferred at San Jose State University in 2000?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query": "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.",
        "gold_parse": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200",
        "query": "SELECT Weight FROM people WHERE Height > value OR Height > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?",
        "gold_parse": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "query": "SELECT Count ( * ) FROM faculty WHERE Campus = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "gold_parse": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = value AND T1.year > value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many customers in total?",
        "gold_parse": "SELECT count(*) FROM Customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Return the id and full name of the customer with the most accounts.",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_id , customer_first_name , customer_last_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
        "gold_parse": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
        "query": "SELECT T2.account_id , T2.date_account_opened , T2.other_account_details FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show order ids and the total quantity in each order.",
        "gold_parse": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Sum ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "gold_parse": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?",
        "gold_parse": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year",
        "query": "SELECT year , title FROM Movie WHERE year < = value ORDER BY year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "gold_parse": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "query": "SELECT T1.Pixels FROM screen_mode AS T1 WHERE T1.Type = value INTERSECT SELECT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Find the number of apartments that have no facility.",
        "gold_parse": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "query": "SELECT Count ( * ) FROM Apartments AS T1 WHERE T1.apt_id NOT IN ( SELECT T2.apt_id FROM Apartment_Bookings AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY Avg ( bathroom_count ) Desc",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Campus = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Find the average room count of the apartments that have the \"Studio\" type code.",
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "query": "SELECT Avg ( bathroom_count ) FROM Apartments WHERE apt_type_code = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "query": "SELECT Campus FROM faculty WHERE Year = value OR Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi < value OR dpi > value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "How many assessment notes are there in total?",
        "gold_parse": "SELECT count(*) FROM ASSESSMENT_NOTES",
        "query": "SELECT Count ( * ) FROM Ref_Address_Types",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many customers are there?",
        "gold_parse": "SELECT count(*) FROM Customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = value AND T1.building_short_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many different products correspond to each order id?",
        "gold_parse": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "query": "SELECT Count ( * ) , order_id FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the average fee on a CSU campus in 1996",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Faculty = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Find the id and last name of the student that has the most behavior incidents?",
        "gold_parse": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT student_id , last_name FROM Students GROUP BY student_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the average price for a lesson taught by Janessa Sawayn?",
        "gold_parse": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\"",
        "query": "SELECT Avg ( T2.price ) FROM Customers AS T1 JOIN Lessons AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = value AND T1.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "gold_parse": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1",
        "query": "SELECT Model_name FROM chip_model WHERE Launch_year = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?",
        "gold_parse": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")",
        "query": "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars > ( SELECT Avg ( T2.stars ) FROM Rating AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",
        "gold_parse": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
        "query": "SELECT customer_status_code , phone_number , email_address FROM Customers WHERE first_name = value OR last_name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the most common apartment type code among apartments with more than 1 bathroom.",
        "gold_parse": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many people graduated from San Francisco State University in 2004?",
        "gold_parse": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"",
        "query": "SELECT Count ( * ) FROM Campuses",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the average fee on a CSU campus in 1996",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Campus = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT bathroom_count FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the average fee on a CSU campus in 1996",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Faculty = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = value AND T1.building_full_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many faculty is there in total in the year of 2002?",
        "gold_parse": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
        "query": "SELECT Count ( * ) FROM faculty WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many apartment bookings are there in total?",
        "gold_parse": "SELECT count(*) FROM Apartment_Bookings",
        "query": "SELECT Count ( * ) FROM Apartment_Buildings",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = value AND T1.building_short_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many undergraduates are there at San Jose State",
        "gold_parse": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "query": "SELECT Count ( * ) FROM faculty WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( CampusFee ) FROM csu_fees",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?",
        "gold_parse": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
        "query": "SELECT Count ( * ) FROM Staff WHERE first_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.screen_mode = value AND T1.Type = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query": "SELECT DISTINCT customer_first_name , customer_last_name , phone_number FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value INTERSECT SELECT T3.director FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
        "gold_parse": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT teacher_id , first_name FROM Teachers GROUP BY teacher_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "gold_parse": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many apartments do not have any facility?",
        "gold_parse": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "query": "SELECT Count ( * ) FROM Apartments AS T1 WHERE T1.apt_id NOT IN ( SELECT T2.apt_id FROM Apartment_Bookings AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the nickname of the employee named Janessa Sawayn?",
        "gold_parse": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT nickname FROM Staff WHERE first_name = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the titles of all movies that have not been rated?",
        "gold_parse": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
        "query": "SELECT T1.title FROM Movie AS T1 WHERE T1.mID NOT IN ( SELECT T2.mID FROM Rating AS T2 WHERE T2.stars = value )",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 1996?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many faculty, in total, are there in the year 2002?",
        "gold_parse": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
        "query": "SELECT Count ( * ) FROM faculty WHERE Year = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "gold_parse": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000",
        "query": "SELECT District_name FROM district WHERE City_Area > value OR Headquartered_City = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee of \"San Jose State University\" in year 1996?",
        "gold_parse": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show the number of accounts.",
        "gold_parse": "SELECT count(*) FROM Accounts",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_full_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What are the line 1 and average monthly rentals of all student addresses?",
        "gold_parse": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id",
        "query": "SELECT Avg ( monthly_rental ) , Avg ( monthly_rental ) FROM Student_Addresses",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "How many distinct birth places are there?",
        "gold_parse": "SELECT count(DISTINCT Birth_Place) FROM people",
        "query": "SELECT Count ( DISTINCT Birth_Date ) FROM people",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What are the invoice dates, order ids, and order details for all invoices?",
        "gold_parse": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "query": "SELECT T1.date_order_placed , T2.order_id , T1.order_details FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = value AND T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "List the number of customers that did not have any payment history.",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )",
        "query": "SELECT Count ( * ) FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Lessons AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Give the order ids for all orders, as well as the total product quantity in each.",
        "gold_parse": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
        "query": "SELECT T2.parent_product_id , Sum ( T1.vat_rating ) FROM Product_Categories AS T1 JOIN Products AS T2 ON T1.production_type_code = T2.production_type_code GROUP BY T2.parent_product_id",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( room_count ) FROM Apartments WHERE apt_number LIKE value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What campus has the most faculties in 2003?",
        "gold_parse": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
        "query": "SELECT Faculty FROM faculty WHERE Year = value GROUP BY Campus ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.",
        "gold_parse": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title",
        "query": "SELECT title , title FROM Movie GROUP BY director HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T2.Year < value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many staff in total?",
        "gold_parse": "SELECT count(*) FROM Staff",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which campus was opened between 1935 and 1939?",
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "query": "SELECT Campus FROM faculty WHERE Year BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show all product sizes.",
        "gold_parse": "SELECT DISTINCT product_size FROM Products",
        "query": "SELECT DISTINCT product_color FROM Products",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value INTERSECT SELECT T1.name , T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What are the names of all the stores located in Khanewal District?",
        "gold_parse": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
        "query": "SELECT District_name FROM district WHERE Headquartered_City = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Count ( * ) FROM Apartment_Buildings WHERE building_full_name = value AND building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Count ( * ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = value AND T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.",
        "gold_parse": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "query": "SELECT apt_type_code , Sum ( bathroom_count ) FROM Apartments GROUP BY apt_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Find the names of all reviewers who rated Gone with the Wind.",
        "gold_parse": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID ORDER BY T2.stars Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Which district has the least area?",
        "gold_parse": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "query": "SELECT Headquartered_City FROM district ORDER BY City_Area Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many male students (sex is 'M') are allergic to any type of food?",
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value AND T1.AllergyType = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the number of male (sex is 'M') students who have some food type allery.",
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value AND T1.AllergyType = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many locations are listed in the database?",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "query": "SELECT Count ( DISTINCT Location_Description ) FROM Ref_Locations",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Which job titles correspond to jobs with salaries over 9000?",
        "gold_parse": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the salaries and manager ids for employees who have managers?",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "query": "SELECT SALARY , MANAGER_ID FROM employees",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Show the studios that have not produced films with director \"Walter Hill\".",
        "gold_parse": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "query": "SELECT Studio FROM film WHERE Director ! = value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the headquarters without companies that are in the banking industry?",
        "gold_parse": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "query": "SELECT Headquarters FROM company WHERE Main_Industry ! = value",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Which studios have never worked with the director Walter Hill?",
        "gold_parse": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "query": "SELECT Studio FROM film WHERE Director ! = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?",
        "gold_parse": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
        "query": "SELECT billing_country FROM invoices GROUP BY billing_country ORDER BY Sum ( total ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee id and salary of all employees who report to Payam (first name).",
        "gold_parse": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
        "query": "SELECT EMPLOYEE_ID , SALARY FROM employees WHERE FIRST_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.",
        "gold_parse": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
        "query": "SELECT T1.problem_log_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value OR T2.staff_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems which are reported before 1978-06-26?",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date < value",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Count the number of markets that have a number of cities lower than 300.",
        "gold_parse": "SELECT count(*) FROM market WHERE Number_cities  <  300",
        "query": "SELECT Count ( * ) FROM film_market_estimation WHERE Low_Estimate < value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY Sum ( T2.total ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all tracks that are on playlists titled Movies?",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\"",
        "query": "SELECT name FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "query": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all of Bob's friends?",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "query": "SELECT name FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "gold_parse": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "query": "SELECT Date , Venue FROM workshop ORDER BY Date Asc",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the customer who started a policy most recently.",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.Start_Date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "query": "SELECT CName FROM Course WHERE Days = value UNION SELECT CName FROM Course WHERE Days = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Who advises student 1004?",
        "gold_parse": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "query": "SELECT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "gold_parse": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "query": "SELECT Poll_Source FROM candidate WHERE Unsure_rate = value",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "gold_parse": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "query": "SELECT Title , Studio FROM film WHERE Title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10",
        "query": "SELECT first_name , last_name FROM customers GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "gold_parse": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "query": "SELECT name , Industry FROM Companies ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has the highest base price?",
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1",
        "query": "SELECT decor FROM Rooms ORDER BY basePrice Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of budget codes.",
        "gold_parse": "SELECT count(*) FROM Ref_budget_codes",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the names and types of the companies that have ever operated a flight?",
        "gold_parse": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id",
        "query": "SELECT T1.name , T1.Type FROM operate_company AS T1 WHERE T1.id IN ( SELECT T2.company_id FROM flight AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names of friends who are younger than the average age for a friend?",
        "gold_parse": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
        "query": "SELECT DISTINCT name FROM Person WHERE age < ( SELECT Avg ( age ) FROM Person )",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician that have produced the most number of songs?",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Count the number of courses.",
        "gold_parse": "SELECT count(*) FROM COURSE",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Who is the youngest employee in the company? List employee's first and last name.",
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the number of projects.",
        "gold_parse": "SELECT count(*) FROM Projects",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "query": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "query": "SELECT T2.FIRST_NAME , T2.HIRE_DATE , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME ! = value ORDER BY T2.SALARY Asc",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Show names of pilots that have more than one record.",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
        "query": "SELECT Pilot_name FROM pilot GROUP BY Pilot_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Which building does the instructor who teaches the most number of courses live in?",
        "gold_parse": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Building FROM Faculty GROUP BY Building ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
        "gold_parse": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "query": "SELECT Document_Type_Code , Document_Description , Document_ID FROM Documents",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "gold_parse": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",
        "query": "SELECT T1.staff_name , Count ( * ) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T2.contact_staff_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the number of documents.",
        "gold_parse": "SELECT count(*) FROM Documents",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Count the number of distinct claim outcome codes.",
        "gold_parse": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "query": "SELECT Count ( DISTINCT Claim_Status_Code ) FROM Claim_Headers",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have vocals of type lead?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the oldest person whose job is student?",
        "gold_parse": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "query": "SELECT name FROM Person ORDER BY age Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has friends that are younger than the average age?",
        "gold_parse": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
        "query": "SELECT name FROM Person WHERE age < ( SELECT Avg ( age ) FROM Person )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are full names and salaries of employees working in the city of London?",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the code of the location with the largest number of documents.",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Location_Description FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the number of invoices from Chicago, IL.",
        "gold_parse": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "query": "SELECT Count ( * ) FROM invoices WHERE billing_city = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "gold_parse": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "query": "SELECT T2.FIRST_NAME , T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.LAST_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?",
        "gold_parse": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "query": "SELECT Count ( * ) FROM station AS T1 JOIN trip AS T2 WHERE T1.city = value AND T2.end_date = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the total number of people who could stay in the modern rooms in this inn?",
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.bedType = value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "How many different projects are there?",
        "gold_parse": "SELECT count(DISTINCT name) FROM projects",
        "query": "SELECT Count ( * ) FROM Scientists",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the songs that do not have a lead vocal.",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the label with the most albums?",
        "gold_parse": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId GROUP BY T2.Label ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
        "query": "SELECT T2.problem_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = value AND T2.date_problem_closed > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_humidity ) > = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Return the hosts of competitions for which the theme is not Aliens?",
        "gold_parse": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
        "query": "SELECT Theme FROM farm_competition WHERE Competition_ID NOT IN ( SELECT Theme FROM farm_competition )",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "which gender got the highest average uncertain ratio.",
        "gold_parse": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "query": "SELECT Sex FROM people GROUP BY Sex ORDER BY Avg ( Height ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show the average age for male and female students.",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problem id and log id are assigned to the staff named Rylan Homenick?",
        "gold_parse": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
        "query": "SELECT T2.problem_id , T2.reported_by_staff_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the states which do not have any employee in their record.",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
        "query": "SELECT state_province_county FROM Addresses EXCEPT SELECT state_province_county FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "return all columns of the albums created in the year of 2012.",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2012",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of the people who have no friends who are students?",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "query": "SELECT T1.name FROM Person AS T1 WHERE T1.name NOT IN ( SELECT T2.friend FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of accounts.",
        "gold_parse": "SELECT count(*) FROM Accounts",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of the youngest male?",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "query": "SELECT name FROM Person ORDER BY age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "gold_parse": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
        "query": "SELECT id FROM station WHERE city = value AND long > value AND long > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?",
        "gold_parse": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "query": "SELECT T1.long , T1.city , T2.start_station_name FROM station AS T1 JOIN trip AS T2 ORDER BY T2.duration Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the number of people whose age is greater than all engineers.",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "query": "SELECT Count ( * ) FROM Person WHERE age > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of all tracks in the playlists of Movies.",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\"",
        "query": "SELECT name FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the first name of the band mate who perfomed in the most songs?",
        "gold_parse": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Firstname FROM Band GROUP BY Id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of documents with document type code CV or BK.",
        "gold_parse": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
        "query": "SELECT Count ( * ) FROM All_Documents WHERE Document_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many instruments does the song \"Badlands\" use?",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
        "gold_parse": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
        "query": "SELECT T2.problem_id , T2.reported_by_staff_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name, checking balance and saving balance of all accounts in the bank.",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the oldest log id and its corresponding problem id?",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony and the results of all music festivals",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Music_Festival , Result FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which city has the highest temperature in February?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "query": "SELECT email , phone FROM customers WHERE last_name = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List name of all tracks in Balls to the Wall.",
        "gold_parse": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\"",
        "query": "SELECT name FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Return the name, rate, check in and check out date for the room with the highest rate.",
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1",
        "query": "SELECT T1.roomName , T1.bedType , T2.Room FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the low and high estimates of film markets?",
        "gold_parse": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "query": "SELECT Type , High_Estimate FROM film_market_estimation",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the student first and last names and grade points of all enrollments.",
        "gold_parse": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "query": "SELECT Fname , LName FROM Student",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "gold_parse": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "query": "SELECT Employee_ID , Count ( * ) FROM Employees GROUP BY Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "How many companies are there?",
        "gold_parse": "SELECT count(*) FROM Companies",
        "query": "SELECT Count ( * ) FROM buildings",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "list all female (sex is F) candidate names in the alphabetical order.",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "query": "SELECT Name FROM people WHERE Sex = value ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
        "query": "SELECT T2.EMPLOYEE_ID , T2.LAST_NAME , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of the trips that lasted the longest and how long did they last?",
        "gold_parse": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
        "query": "SELECT id , end_date FROM trip ORDER BY duration Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musicians who has played back position the most?",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the songs in volumes with more than 1 week on top?",
        "gold_parse": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1",
        "query": "SELECT Song FROM volume GROUP BY Song HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Sheep_and_Goats > value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "gold_parse": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "query": "SELECT bedType , Count ( * ) FROM Rooms GROUP BY bedType",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names, departments, cities, and state provinces for each employee?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T2.STATE_PROVINCE FROM employees AS T1 JOIN locations AS T2",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "query": "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What information is there on albums from 2010?",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "query": "SELECT * FROM Albums WHERE Year > = value AND Year < = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the first and last names of the customers with the 10 cheapest invoices?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id JOIN invoice_lines AS T3 ON T2.id = T3.invoice_id ORDER BY T3.unit_price Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the first names of all students that are not enrolled in courses?",
        "gold_parse": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "query": "SELECT Fname FROM Student EXCEPT SELECT Fname FROM Student",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job title and average salary of employees.",
        "gold_parse": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "query": "SELECT JOB_TITLE , Avg ( MAX_SALARY ) FROM jobs GROUP BY JOB_TITLE",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name of account that has the lowest total checking and saving balance.",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the person that has no friend?",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "query": "SELECT T1.name FROM Person AS T1 WHERE T1.name NOT IN ( SELECT T2.friend FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the number of distinct projects.",
        "gold_parse": "SELECT count(DISTINCT name) FROM projects",
        "query": "SELECT Count ( * ) FROM Scientists",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE subscription_type = value )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the average salary for each job title?",
        "gold_parse": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "query": "SELECT JOB_TITLE , Avg ( MAX_SALARY ) FROM jobs GROUP BY JOB_TITLE",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "From the trip record, find the number of unique bikes.",
        "gold_parse": "SELECT count(DISTINCT bike_id) FROM trip",
        "query": "SELECT Count ( * ) FROM station",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the average age for a male in each job?",
        "gold_parse": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "query": "SELECT Avg ( age ) , city FROM Person WHERE gender = value GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has a friend that is from new york city?",
        "gold_parse": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "query": "SELECT name FROM Person WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the average age of the students who have allergies with food and animal types.",
        "gold_parse": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
        "query": "SELECT Avg ( T1.Age ) FROM Student AS T1 WHERE T1.Sex IN ( SELECT T2.AllergyType FROM Allergy_Type AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "How many distinct claim outcome codes are there?",
        "gold_parse": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "query": "SELECT Count ( DISTINCT Claim_Status_Code ) FROM Claim_Headers",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the names of all female candidates in alphabetical order (sex is F)?",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "query": "SELECT Name FROM people WHERE Sex = value ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees WHERE SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the code of the document type \"Paper\".",
        "gold_parse": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
        "query": "SELECT Document_Type_Name FROM Ref_Document_Types WHERE Document_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many rooms have a king bed?",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the name of the first 5 customers.",
        "gold_parse": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
        "query": "SELECT customer_name FROM Customers ORDER BY customer_name Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "gold_parse": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "query": "SELECT T2.FIRST_NAME , T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.LAST_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have lower temperature in March than in Dec and have never served as host cities?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_log_id = value",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "What are the average profits of companies?",
        "gold_parse": "SELECT avg(Profits_billion) FROM Companies",
        "query": "SELECT Avg ( Sales_billion ) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many accounts do we have?",
        "gold_parse": "SELECT count(*) FROM Accounts",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who are the friends of Bob?",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'",
        "query": "SELECT friend FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the main industries of the companies without gas stations and what are the companies?",
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "query": "SELECT T1.Main_Industry FROM company AS T1 WHERE T1.Company_ID NOT IN ( SELECT T2.Company_ID FROM station_company AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "gold_parse": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'",
        "query": "SELECT DISTINCT name FROM airport WHERE Country = value OR Country = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the number of matches in different competitions.",
        "gold_parse": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",
        "query": "SELECT Count ( DISTINCT Competition ) FROM match",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the days that had the smallest temperature range, and what was that range?",
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "query": "SELECT T1.start_date , T1.duration FROM trip AS T1 JOIN weather AS T2 ORDER BY T2.min_humidity Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.",
        "gold_parse": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T1.Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T2.Destroyed_by_Employee_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T3.Statement_ID , T2.Statement_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID AND T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID GROUP BY T1.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of persons who are friends with Alice for the shortest years.",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT name FROM PersonFriend ORDER BY year Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "query": "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many courses are there in total?",
        "gold_parse": "SELECT count(*) FROM COURSE",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many albums does Billy Cobham has?",
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"",
        "query": "SELECT Count ( * ) FROM tracks WHERE name = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have served as host cities more than once? Return me their GDP and population.",
        "gold_parse": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "query": "SELECT City , Regional_Population FROM city GROUP BY City HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many unique labels are there for albums?",
        "gold_parse": "SELECT count(DISTINCT label) FROM albums",
        "query": "SELECT Count ( * ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "query": "SELECT DISTINCT Fname , city_code FROM Student WHERE Sex > = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "query": "SELECT Min ( duration ) , Min ( duration ) FROM trip WHERE start_station_name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the checking balance and saving balance in the Brown\u2019s account.",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the starting date and ending data in location for the document named \"Robin CV\".",
        "gold_parse": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"",
        "query": "SELECT T2.Date_in_Location_From , T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code WHERE T1.Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "gold_parse": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT skill_id , skill_description FROM Skills GROUP BY skill_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "query": "SELECT Max ( Consider_rate ) , Min ( Oppose_rate ) , Max ( Oppose_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the the phone number of Nancy Edwards?",
        "gold_parse": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "query": "SELECT phone FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "In February, which city marks the highest temperature?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "query": "SELECT T1.City , T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents.",
        "gold_parse": "SELECT count(*) FROM Documents",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "What is the average number of votes of representatives from party \"Republican\"?",
        "gold_parse": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"",
        "query": "SELECT Avg ( T1.Vote_Percent ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY T2.total Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the albums produced in year 2010?",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name",
        "query": "SELECT T1.Name , Count ( * ) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project GROUP BY T2.Project",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Music_Festival , Result FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the budget type code and description and the corresponding document id.",
        "gold_parse": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "query": "SELECT T1.Document_Type_Code , T2.Document_Details , T1.Document_ID FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = value AND T2.LAST_NAME > value AND T2.LAST_NAME < value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Which friend of Zach has the longest-lasting friendship?",
        "gold_parse": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "query": "SELECT name FROM Person ORDER BY gender Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the first and last name of the employee who reports to Nancy Edwards?",
        "gold_parse": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "query": "SELECT T2.Name , Min ( T1.Unsure_rate ) FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T2.Sex",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "gold_parse": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "query": "SELECT T1.JOB_TITLE , Avg ( T1.MAX_SALARY ) FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "gold_parse": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "query": "SELECT MANAGER_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Which buildings have more than one company offices? Give me the building names.",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "query": "SELECT name FROM buildings GROUP BY name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "query": "SELECT Min ( Support_rate ) , Max ( Consider_rate ) , Avg ( Oppose_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the country ID and number of cities for each country.",
        "gold_parse": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
        "query": "SELECT COUNTRY_ID , Count ( * ) FROM countries GROUP BY COUNTRY_ID",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part fault requires the most number of skills to fix? List part id and name.",
        "gold_parse": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT skill_id , skill_code FROM Skills GROUP BY skill_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.",
        "gold_parse": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 EXCEPT SELECT T3.EMPLOYEE_ID FROM departments AS T2 JOIN job_history AS T3 ON T2.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE T2.LOCATION_ID = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.",
        "gold_parse": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T1.Employee_ID FROM Employees AS T1 EXCEPT SELECT T2.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed AS T2",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
        "gold_parse": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",
        "query": "SELECT id , City , name FROM airport ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many trips did not end in San Francisco?",
        "gold_parse": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
        "query": "SELECT Count ( * ) FROM station WHERE city ! = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How long does track Fast As a Shark has?",
        "gold_parse": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"",
        "query": "SELECT Max ( milliseconds ) FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the songs performed by artist with last name \"Heilo\"",
        "gold_parse": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T2.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "query": "SELECT Event_ID FROM Events WHERE Event_Details ! = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculty members who are a part of department 520?",
        "gold_parse": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "query": "SELECT T1.Fname , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "query": "SELECT T1.start_date , T2.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f = value AND T2.min_temperature_f < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the ids and names of stations from which at least 200 trips started.",
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "query": "SELECT id , name FROM station GROUP BY id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the id of each employee and the number of document destroyed by that employee?",
        "gold_parse": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "query": "SELECT Employee_ID , Count ( * ) FROM Employees GROUP BY Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which claim processing stage has the most claims? Show the claim status name.",
        "gold_parse": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Claim_Status_Code FROM Claim_Headers GROUP BY Claim_Status_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "gold_parse": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "query": "SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance > value INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "gold_parse": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id",
        "query": "SELECT T1.fault_description , T2.fault_status FROM Part_Faults AS T1 JOIN Fault_Log_Parts AS T2 ON T1.part_fault_id = T2.part_fault_id",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the ages of all of Zach's friends who are in the longest relationship?",
        "gold_parse": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "query": "SELECT age FROM Person ORDER BY age Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?",
        "gold_parse": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "query": "SELECT Title FROM film WHERE Director = value INTERSECT SELECT Title FROM film WHERE Director = value",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Which building has the largest number of company offices? Give me the building name.",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.name FROM buildings AS T1 JOIN Companies AS T2 JOIN Office_locations AS T3 ON T1.id = T3.building_id AND T3.company_id = T2.id GROUP BY T2.Headquarters ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the oldest log id and its corresponding problem id.",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets can each parts be used in? List the part name and the number.",
        "gold_parse": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
        "query": "SELECT part_name , Count ( * ) FROM Parts GROUP BY part_id",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the maximum and minimum grade point of students who live in NYC?",
        "gold_parse": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "query": "SELECT Max ( Age ) , Min ( Age ) FROM Student WHERE city_code = value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the number of distinct stages in claim processing.",
        "gold_parse": "SELECT count(*) FROM claims_processing_stages",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "gold_parse": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
        "query": "SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_ID = T2.head_ID WHERE T2.temporary_acting = value INTERSECT SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_ID = T2.head_ID WHERE T2.temporary_acting = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the start station and end station for the trips with the three oldest id.",
        "gold_parse": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "query": "SELECT start_date , start_station_id FROM trip ORDER BY id Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many vocal types are used in the song \"Le Pop\"?",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "List the authors who do not have submission to any workshop.",
        "gold_parse": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "query": "SELECT Author FROM submission EXCEPT SELECT Author FROM submission",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "In which country does Roberto Almeida?",
        "gold_parse": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "query": "SELECT country FROM employees WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who are the friends of Alice that are doctors?",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "gold_parse": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
        "query": "SELECT T2.product_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_last_name > = value AND T1.staff_last_name < = value INTERSECT SELECT T2.product_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Show the details of all trucks in the order of their license number.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the youngest male?",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "query": "SELECT name FROM Person ORDER BY age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Unsure_rate , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return names of songs in volumes that are by artists that are at least 32 years old.",
        "gold_parse": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
        "query": "SELECT Famous_Title FROM artist WHERE Age > = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids of employees who report to Payam, and what are their salaries?",
        "gold_parse": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
        "query": "SELECT T2.EMPLOYEE_ID , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each city, list their names in decreasing order by their highest station latitude.",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "query": "SELECT city , name FROM station GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many friends does Dan have?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product which has problems, what are the number of problems and the product id?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "query": "SELECT product_name , Count ( * ) FROM Product GROUP BY product_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "Which service id and type has the least number of participants?",
        "gold_parse": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT Service_ID , Service_Type_Code FROM Services GROUP BY Service_ID ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the maximum and minumum grade points?",
        "gold_parse": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "query": "SELECT Max ( gradepoint ) , Min ( lettergrade ) FROM Gradeconversion",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for those who had two or more jobs.",
        "gold_parse": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "query": "SELECT EMPLOYEE_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "gold_parse": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "query": "SELECT Name , Count ( * ) FROM artist GROUP BY Name",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME ! = value ORDER BY T2.EMPLOYEE_ID Asc",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many orders does Luca Mancini have in his invoices?",
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "query": "SELECT Count ( * ) FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "On what dates were employees without the letter M in their first names hired?",
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT HIRE_DATE FROM employees WHERE LAST_NAME ! = value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "For each player, show the team and the location of school they belong to.",
        "gold_parse": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
        "query": "SELECT Team , Position FROM player",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the members of the club \"Tennis Club\".",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value OR MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the course names for courses taught on MTW?",
        "gold_parse": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
        "query": "SELECT CName FROM Course WHERE CName = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the total number of clubs.",
        "gold_parse": "SELECT count(*) FROM club",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location name for document \"Robin CV\".",
        "gold_parse": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
        "query": "SELECT Location_Name FROM Ref_Locations WHERE Location_Description = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many females are in the network?",
        "gold_parse": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "query": "SELECT Count ( * ) FROM Person WHERE gender = value AND age = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID AND T1.StuID = T3.StuID WHERE T2.ClubName = value AND T3.Position = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Count the number of courses with more than 2 credits.",
        "gold_parse": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "gold_parse": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
        "query": "SELECT Count ( * ) , company_id FROM Third_Party_Companies GROUP BY company_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What are the names of customers who do not have any policies?",
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 EXCEPT SELECT T2.Customer_ID FROM Policies AS T2",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many animal type allergies exist?",
        "gold_parse": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "List the company name and rank for all companies in the decreasing order of their sales.",
        "gold_parse": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
        "query": "SELECT Company , Rank FROM company ORDER BY Sales_billion Asc",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value AND T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the different main industries for all companies?",
        "gold_parse": "SELECT DISTINCT main_industry FROM company",
        "query": "SELECT DISTINCT Company FROM company",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances for all customers?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the different album labels listed?",
        "gold_parse": "SELECT DISTINCT label FROM Albums",
        "query": "SELECT DISTINCT Title FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Provide the full names of employees earning more than the employee with id 163.",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY > value AND MANAGER_ID = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.",
        "gold_parse": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees ORDER BY SALARY Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the name of all the clubs at \"AKW\".",
        "gold_parse": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"",
        "query": "SELECT ClubName FROM Club WHERE ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
        "gold_parse": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
        "query": "SELECT Count ( * ) FROM exhibition WHERE Ticket_Price > value OR Ticket_Price < value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the room name and base price of the room with the lowest base price?",
        "gold_parse": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
        "query": "SELECT roomName , decor FROM Rooms ORDER BY basePrice Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 ORDER BY T2.precipitation_inches Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the names of the songs by the artist whose last name is \"Heilo\"?",
        "gold_parse": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T2.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?",
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "query": "SELECT T1.id FROM station AS T1 EXCEPT SELECT T2.station_id FROM status AS T2 WHERE T2.bikes_available > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name , T1.last_name ORDER BY Sum ( T2.total ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each trip, return its ending station's installation date.",
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "query": "SELECT end_date , start_date FROM trip",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the ages of all music artists?",
        "gold_parse": "SELECT Age FROM artist",
        "query": "SELECT Max ( Age ) FROM artist",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the age of the friend of Zach with longest year relationship?",
        "gold_parse": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "query": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Give the songs included in volumes that have more than 1 week on top.",
        "gold_parse": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1",
        "query": "SELECT Song FROM volume GROUP BY Song HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What are the three largest cities in terms of regional population?",
        "gold_parse": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "query": "SELECT City FROM city WHERE Regional_Population = ( SELECT Max ( Regional_Population ) FROM city )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "query": "SELECT date FROM weather WHERE min_humidity BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the names and headquarters of all companies ordered by descending market value?",
        "gold_parse": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
        "query": "SELECT T2.Manager_Name , T1.Headquarters FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Market_Value Desc",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Where is the club \"Pen and Paper Gaming\" located?",
        "gold_parse": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"",
        "query": "SELECT ClubName FROM Club WHERE ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician that has been at the back position the most?",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Lastname FROM Band AS T1 JOIN Performance AS T2 ON T1.Id = T2.Bandmate GROUP BY T2.StagePosition ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is Nancy Edwards's address?",
        "gold_parse": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "query": "SELECT address FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the id of each employee and the number of document destruction authorised by that employee?",
        "gold_parse": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "query": "SELECT Employee_ID , Count ( * ) FROM Employees GROUP BY Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
        "gold_parse": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "query": "SELECT name FROM buildings WHERE Status = value ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have used the instrument \"drums\"?",
        "gold_parse": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "How many submissions are there?",
        "gold_parse": "SELECT count(*) FROM submission",
        "query": "SELECT Count ( * ) FROM workshop",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",
        "gold_parse": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\"",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.roomName = value AND T2.LastName = value AND T2.LastName = value",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
        "gold_parse": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "query": "SELECT Title , Studio FROM film WHERE Title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Count the number of companies.",
        "gold_parse": "SELECT count(*) FROM Companies",
        "query": "SELECT Count ( * ) FROM buildings",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the ids and details of all statements?",
        "gold_parse": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
        "query": "SELECT Document_ID , Document_Description FROM Documents",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "query": "SELECT CName FROM Course WHERE Days = value UNION SELECT CName FROM Course WHERE Days = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "gold_parse": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the male friend of Alice whose job is a doctor?",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "query": "SELECT name FROM Person WHERE city = value AND gender = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the last names and ages of the students who are allergic to milk and cat?",
        "gold_parse": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "query": "SELECT LName , Age FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many musicians play in the song \"Flash\"?",
        "gold_parse": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the ids of all the employees who have destroyed documents?",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed GROUP BY Destroyed_by_Employee_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by more than one school.",
        "gold_parse": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "query": "SELECT Denomination FROM school GROUP BY School_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What si the youngest employee's first and last name?",
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Who is the advisor of student with ID 1004?",
        "gold_parse": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "query": "SELECT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the number of scientists involved for the projects that require more than 300 hours.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name",
        "query": "SELECT Count ( * ) FROM Projects WHERE Hours > value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "gold_parse": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
        "query": "SELECT T2.Name , T2.Hours , T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Name Asc",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?",
        "gold_parse": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "query": "SELECT Avg ( min_temperature_f ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students who are female are allergic to milk or eggs?",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "query": "SELECT Count ( * ) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = value OR T1.Allergy = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many roles are there?",
        "gold_parse": "SELECT count(*) FROM ROLES",
        "query": "SELECT Count ( DISTINCT Role_Code ) FROM Roles",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are each document's location code, and starting date and ending data in that location?",
        "gold_parse": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
        "query": "SELECT T1.Location_Code , T2.Date_in_Location_From , T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"?",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value AND T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "gold_parse": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "query": "SELECT DName FROM Department WHERE Division = value INTERSECT SELECT DName FROM Department WHERE Division = value AND Building = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many customers does Steve Johnson support?",
        "gold_parse": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the name of the customer that has been involved in the most policies.",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Customer_Details FROM Customers GROUP BY Customer_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of songs in all the studio albums.",
        "gold_parse": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "query": "SELECT Count ( * ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "query": "SELECT T1.id FROM station AS T1 WHERE T1.long > value INTERSECT SELECT T2.station_id FROM status AS T2 WHERE T2.bikes_available < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the customers first and last name of 10 least expensive invoices.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id JOIN invoice_lines AS T3 ON T2.id = T3.invoice_id ORDER BY T3.unit_price Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Return the decor of the room named \"Recluse and defiance\".",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "query": "SELECT decor FROM Rooms WHERE roomName = value AND roomName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the ids of documents with the type code CV that do not have expenses.",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "query": "SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T2.Document_ID FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "gold_parse": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
        "query": "SELECT billing_country , total FROM invoices WHERE total = ( SELECT Max ( total ) FROM invoices )",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What is the denomination of the school the most players belong to?",
        "gold_parse": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.School FROM school AS T1 JOIN player AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.School_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many statements do we have?",
        "gold_parse": "SELECT count(*) FROM Statements",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "query": "SELECT product_name , Count ( * ) FROM Product GROUP BY product_id",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Compute the average profits companies make.",
        "gold_parse": "SELECT avg(Profits_billion) FROM Companies",
        "query": "SELECT Avg ( Sales_billion ) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?",
        "gold_parse": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)",
        "query": "SELECT T2.Name , T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code AND T1.SSN = T3.Scientist GROUP BY T3.Project ORDER BY Sum ( T2.Hours ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "gold_parse": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "query": "SELECT T1.name , T1.city , T2.start_date FROM station AS T1 JOIN trip AS T2 ORDER BY T2.duration Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the list of distinct product names sorted by product id?",
        "gold_parse": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
        "query": "SELECT DISTINCT product_name FROM Product ORDER BY product_name Asc",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician who was in the most songs?",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Count the number of artists who have had volumes.",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "query": "SELECT Count ( * ) FROM artist",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the budget type code with most number of documents.",
        "gold_parse": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
        "gold_parse": "SELECT venue FROM MATCH ORDER BY date DESC",
        "query": "SELECT T2.Host_City FROM match AS T1 JOIN hosting_city AS T2 ON T1.Match_ID = T2.Match_ID ORDER BY T1.Date Desc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude of the starting points of all trips?",
        "gold_parse": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "query": "SELECT Avg ( duration ) , Avg ( start_date ) FROM trip",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each city, return the highest latitude among its stations.",
        "gold_parse": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "query": "SELECT city , Max ( long ) FROM station GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "get the details of employees who manage a department.",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are all the different zip codes that have a maximum dew point that was always below 70?",
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "query": "SELECT DISTINCT zip_code FROM weather WHERE wind_dir_degrees < value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE FirstName = value AND LastName = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the id of the trip that started from the station with the highest dock count?",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "query": "SELECT T2.id FROM station AS T1 JOIN trip AS T2 ORDER BY T1.lat Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "How many exhibition are there in year 2005 or after?",
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "query": "SELECT Count ( * ) FROM exhibition WHERE Year = value OR Year > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the first name of the band mate that has performed in most songs.",
        "gold_parse": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Firstname FROM Band GROUP BY Firstname ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs use drums as an instrument?",
        "gold_parse": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"",
        "query": "SELECT Count ( * ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the total checking balance in all accounts?",
        "gold_parse": "SELECT sum(balance) FROM checking",
        "query": "SELECT Sum ( balance ) FROM SAVINGS",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the department name, city, and state province for each department.",
        "gold_parse": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
        "query": "SELECT T1.DEPARTMENT_NAME , T2.CITY , T2.STATE_PROVINCE , T2.STATE_PROVINCE FROM departments AS T1 JOIN locations AS T2",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of stations that have latitude lower than 37.5?",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "query": "SELECT name FROM station WHERE long < value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by cat allergies?",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the name of scientists who are assigned to some project.",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "query": "SELECT Name FROM Scientists",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "query": "SELECT Denomination FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the minimum salary in each department?",
        "gold_parse": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
        "query": "SELECT Min ( T1.MIN_SALARY ) , T2.DEPARTMENT_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What country does Roberto Almeida live?",
        "gold_parse": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "query": "SELECT country FROM employees WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
        "gold_parse": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
        "query": "SELECT T1.Document_Date FROM Documents AS T1 WHERE T1.Document_Type_Code = value INTERSECT SELECT T1.Document_Date FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code WHERE T2.Document_Type_Name = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "gold_parse": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2",
        "query": "SELECT Issue_Date FROM volume GROUP BY Song HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the names of the courses with at least five enrollments.",
        "gold_parse": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "query": "SELECT CName FROM Course GROUP BY CID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show the student id of the oldest student.",
        "gold_parse": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "query": "SELECT Major FROM Student ORDER BY Age Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.Rate = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many calendar items do we have?",
        "gold_parse": "SELECT count(*) FROM Ref_calendar",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "gold_parse": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2",
        "query": "SELECT asset_id , asset_details FROM Assets INTERSECT SELECT asset_details FROM Assets WHERE asset_details < value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "query": "SELECT Match_ID FROM match WHERE Score = value AND Competition = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name and checking balance of the account which has the lowest savings balance?",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents are with document type code BK for each product id?",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "query": "SELECT Count ( * ) , Document_Type_Code FROM Documents WHERE Document_Type_Code = value GROUP BY Document_Type_Code",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the ids of the departments where any manager is managing 4 or more employees.",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query": "SELECT DEPARTMENT_ID FROM departments GROUP BY DEPARTMENT_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Count the number of trips that did not end in San Francisco city.",
        "gold_parse": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"",
        "query": "SELECT Count ( * ) FROM trip WHERE start_date ! = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the number of departments in Division \"AS\"?",
        "gold_parse": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "query": "SELECT Count ( DISTINCT DName ) FROM Department WHERE Division = value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_ID ORDER BY Sum ( T3.Amount_Claimed ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the first name and job id for all employees in the Finance department?",
        "gold_parse": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "query": "SELECT T2.FIRST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.",
        "gold_parse": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "query": "SELECT City , Hanyu_Pinyin FROM city ORDER BY GDP Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
        "gold_parse": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of the scientists, and how many projects are each of them working on?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "query": "SELECT Name , Count ( * ) FROM Scientists GROUP BY Name",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the phones of departments in Room 268?",
        "gold_parse": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "query": "SELECT DName FROM Department WHERE Building = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "gold_parse": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "query": "SELECT Document_Description , Document_Name FROM Documents WHERE Other_Details = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many departments are in the division AS?",
        "gold_parse": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "query": "SELECT Count ( DISTINCT DName ) FROM Department WHERE Division = value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "gold_parse": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
        "query": "SELECT T2.name FROM architect AS T1 JOIN bridge AS T2 ON T2.architect_id = T1.id JOIN mill AS T3 ON T1.id = T3.architect_id WHERE T3.name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the count of customers that Steve Johnson supports?",
        "gold_parse": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the name of each department and the number of employees in each.",
        "gold_parse": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",
        "query": "SELECT T1.DEPARTMENT_NAME , Count ( * ) FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different instruments does the musician with the last name \"Heilo\" use?",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
        "query": "SELECT Count ( * ) FROM Band WHERE Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the friend of Zach with longest year relationship?",
        "gold_parse": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "gold_parse": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
        "query": "SELECT first_name , last_name FROM Maintenance_Engineers",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is employee Nancy Edwards's phone number?",
        "gold_parse": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "query": "SELECT T1.first_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.",
        "gold_parse": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "query": "SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME FROM employees",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the first and last names of the artist who perfomed the song \"Badlands\"?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those employees who joined after 7th September, 1987.",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "query": "SELECT EMPLOYEE_ID FROM employees WHERE HIRE_DATE > value AND LAST_NAME < value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students have a food allergy?",
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "query": "SELECT Count ( * ) FROM Allergy_Type WHERE AllergyType = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of bands.",
        "gold_parse": "SELECT count(*) FROM Band",
        "query": "SELECT Count ( * ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the team and the location of school each player belongs to?",
        "gold_parse": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
        "query": "SELECT Team , Position FROM player",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the total number of people who has no friend living in the city of Austin.",
        "gold_parse": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
        "query": "SELECT Count ( * ) FROM Person WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many orders does Lucas Mancini has?",
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "gold_parse": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2",
        "query": "SELECT Famous_Title FROM artist GROUP BY Famous_Title HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "query": "SELECT T1.School FROM school AS T1 EXCEPT SELECT T2.Nickname FROM school_details AS T2 WHERE T2.Division = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names and gradepoints for all enrollments?",
        "gold_parse": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "query": "SELECT Fname , LName FROM Student",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those departments where more than ten employees work who got a commission percentage.",
        "gold_parse": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "query": "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE subscription_type = value )",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "query": "SELECT T1.Name FROM artist AS T1 WHERE T1.Artist_ID NOT IN ( SELECT T2.Artist_ID FROM exhibition AS T2 WHERE T2.Year = value )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are all the different start station names for a trip that lasted less than 100?",
        "gold_parse": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
        "query": "SELECT DISTINCT start_date FROM trip WHERE duration < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the ids of all the employees who authorize document destruction?",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed WHERE Document_ID = value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of scientists who are assigned to any project?",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "query": "SELECT Name FROM Scientists",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Which employees were hired after September 7th, 1987?",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "query": "SELECT FIRST_NAME FROM employees WHERE HIRE_DATE > value AND LAST_NAME < value",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "List the name of a building along with the name of a company whose office is in the building.",
        "gold_parse": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
        "query": "SELECT T1.name FROM buildings AS T1 JOIN Companies AS T2 JOIN Office_locations AS T3 ON T1.id = T3.building_id AND T3.company_id = T2.id WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the name and price of the product that has been ordered the greatest number of times.",
        "gold_parse": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT product_name , product_price FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of the oldest student?",
        "gold_parse": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "query": "SELECT name FROM Person ORDER BY age Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the full name of the employee who has the most customers?",
        "gold_parse": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT first_name , last_name FROM employees GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the composer who created the track \"Fast As a Shark\"?",
        "gold_parse": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"",
        "query": "SELECT T1.seq FROM sqlite_sequence AS T1 JOIN tracks AS T2 WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "gold_parse": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23",
        "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age = value OR T1.Age = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019.",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is all the information about all people?",
        "gold_parse": "SELECT * FROM people",
        "query": "SELECT * FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are all the employees without a department number?",
        "gold_parse": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the saving balance of the account with the highest checking balance.",
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "query": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find all the zip codes in which the max dew point have never reached 70.",
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "query": "SELECT zip_code FROM weather WHERE zip_code NOT IN ( SELECT zip_code FROM weather )",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "What are the first and last name of the president of the club \"Bootup Baltimore\"?",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "In which year did the most recent crime happen?",
        "gold_parse": "SELECT max(YEAR) FROM perpetrator",
        "query": "SELECT Year FROM perpetrator GROUP BY Year ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog publishers have substring \"Murray\" in their names?",
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "query": "SELECT catalog_publisher FROM Catalogs WHERE catalog_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find all the catalog publishers whose name contains \"Murray\"",
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "query": "SELECT catalog_publisher FROM Catalogs WHERE catalog_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the names of all cities and states?",
        "gold_parse": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "query": "SELECT town_city , state_province_county FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the highest acc percent score in the competition?",
        "gold_parse": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "query": "SELECT ACC_Percent FROM basketball_match GROUP BY ACC_Percent ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the countries for appelations with at most 3 wines?",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "query": "SELECT Appelation FROM wine GROUP BY Appelation HAVING Count ( * ) < = value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Which publishers did not publish a book in 1989?",
        "gold_parse": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989",
        "query": "SELECT Publisher FROM book_club WHERE Year ! = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "How many residents does each property have? List property id and resident count.",
        "gold_parse": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "query": "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "Count the number of climbers.",
        "gold_parse": "SELECT count(*) FROM climber",
        "query": "SELECT Count ( * ) FROM mountain",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the season, the player, and the name of the team that players belong to.",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "query": "SELECT T2.Season , T1.Name , T3.Team FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team JOIN player AS T3 ON T1.Team_id = T3.Team",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the total number of routes for each country and airline in that country?",
        "gold_parse": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "query": "SELECT Count ( * ) , country FROM airports GROUP BY country",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "How many events are there?",
        "gold_parse": "SELECT count(*) FROM event",
        "query": "SELECT Count ( * ) FROM swimmer",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What are the name, origin and owner of each program?",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the maximum price and score for wines produced in the appelation St. Helena.",
        "gold_parse": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "query": "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "query": "SELECT T3.catalog_entry_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T1.catalog_name = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What is all the customer information for customers in NY state?",
        "gold_parse": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "query": "SELECT Email FROM Customer WHERE State = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "gold_parse": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "query": "SELECT T1.LastName FROM Customer AS T1 WHERE T1.CustomerId NOT IN ( SELECT T2.CustomerId FROM Invoice AS T2 WHERE T2.Total > value )",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "gold_parse": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_details = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the distinct names of nurses on call?",
        "gold_parse": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
        "query": "SELECT DISTINCT Name FROM Nurse",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "query": "SELECT DISTINCT T1.Event FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the names of teams that have no match season record.",
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "query": "SELECT T1.Name FROM team AS T1 WHERE T1.Team_id NOT IN ( SELECT T2.Team FROM player AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "For each product, return its id and the number of times it was ordered.",
        "gold_parse": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query": "SELECT product_id , Count ( * ) FROM Order_Items GROUP BY product_id ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the number of characteristics that the product \"flax\" has.",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "query": "SELECT Count ( * ) FROM building WHERE Floors < value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "query": "SELECT T2.Name , T1.ArtistId FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T1.ArtistId HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the id of the instructor who advises of all students from History department?",
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "query": "SELECT ID FROM instructor WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
        "query": "SELECT T1.Name , T1.Position FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "gold_parse": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the year and semester with the most courses?",
        "gold_parse": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT year , Count ( * ) FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of courses without prerequisites.",
        "gold_parse": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "query": "SELECT Count ( * ) FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM takes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many regions do we have?",
        "gold_parse": "SELECT count(*) FROM region",
        "query": "SELECT Count ( * ) FROM storm",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of different characteristic names the product 'cumin' has.",
        "gold_parse": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the medication used for the patient staying in room 111?",
        "gold_parse": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111",
        "query": "SELECT T1.Name FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient WHERE T2.ExaminationRoom = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the most common full name among all actors.",
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT first_name , last_name FROM actor GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the maximum and minimum number of cows across all farms.",
        "gold_parse": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "query": "SELECT Max ( Sheep_and_Goats ) , Min ( Sheep_and_Goats ) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the id of the student who most recently registered course 301?",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "query": "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Count the number of stores the chain South has.",
        "gold_parse": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are each physician's employee id and department id primarily affiliated.",
        "gold_parse": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "query": "SELECT EmployeeID , SSN FROM Physician",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the id of the patient who stayed in room 111 most recently?",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which department has the largest number of employees?",
        "gold_parse": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1",
        "query": "SELECT Department FROM Affiliated_With GROUP BY Department ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Which wineries produce at least four wines?",
        "gold_parse": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
        "query": "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation GROUP BY T1.Appelation HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first and last name of students who are not in the largest major.",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT Fname , LName FROM Student EXCEPT SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the first names of all customers that live in Brazil and have an invoice.",
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "query": "SELECT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value INTERSECT SELECT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "query": "SELECT card_id , card_type_code , card_number , other_card_details FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "gold_parse": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.booking_id , T1.amount_payable FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T2.booking_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the address of store 1.",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "query": "SELECT address FROM address WHERE address = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
        "gold_parse": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
        "query": "SELECT Store_Phone , Store_Email_Address FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the card numbers of members from Kentucky?",
        "gold_parse": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "query": "SELECT Card_Number FROM member WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "How many products are there in the records?",
        "gold_parse": "SELECT count(*) FROM catalog_contents",
        "query": "SELECT Count ( * ) FROM Attribute_Definitions",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the first and last name of all the German drivers?",
        "gold_parse": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "query": "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids and names of department stores with both marketing and managing departments?",
        "gold_parse": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "query": "SELECT T3.department_name , T3.dept_store_id FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = value INTERSECT SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the average order quantity per order.",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct ids of customers who made an order after any order that was Cancelled?",
        "gold_parse": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "query": "SELECT DISTINCT T1.customer_id FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_date < value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "gold_parse": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid",
        "query": "SELECT name , Count ( * ) FROM user_profiles GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the names of teams that do no have match season record?",
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "query": "SELECT T1.Name FROM team AS T1 WHERE T1.Team_id NOT IN ( SELECT T2.Team FROM player AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who is the delegate of district 1 in the elections?",
        "gold_parse": "SELECT Delegate FROM election WHERE District  =  1",
        "query": "SELECT Delegate FROM election WHERE Committee = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T2.resident_id , T1.service_type_code FROM Things AS T1 JOIN Customer_Events AS T2 ON T1.thing_id = T2.thing_id JOIN Timed_Status_of_Things AS T3 ON T1.thing_id = T3.thing_id WHERE T3.Status_of_Thing_Code = value OR T3.Date_and_Date < value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "How many followers does each user have?",
        "gold_parse": "SELECT count(*) FROM follows",
        "query": "SELECT Sum ( followers ) , name FROM user_profiles GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "query": "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > value OR T2.Year < value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many different card types are there?",
        "gold_parse": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "query": "SELECT Count ( DISTINCT transaction_type ) FROM Financial_Transactions",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states where have some college students in tryout.",
        "gold_parse": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "query": "SELECT state FROM College GROUP BY state HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the unit of measurement of product named \"cumin\"?",
        "gold_parse": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"",
        "query": "SELECT characteristic_data_type FROM Characteristics WHERE characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name of the customer who made an order most recently.",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "How many entrepreneurs are there?",
        "gold_parse": "SELECT count(*) FROM entrepreneur",
        "query": "SELECT Count ( DISTINCT Investor ) FROM entrepreneur",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of different languages in these films.",
        "gold_parse": "SELECT count(DISTINCT language_id) FROM film",
        "query": "SELECT Count ( * ) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "gold_parse": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
        "query": "SELECT Award , Count ( * ) FROM musical GROUP BY Award",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What are the id and name of the photos for mountains?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000",
        "query": "SELECT T1.id , T2.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of actors whose age is not 20.",
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20",
        "query": "SELECT Name FROM actor WHERE age < = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "gold_parse": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "query": "SELECT * FROM results WHERE milliseconds > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players and how many years has each played?",
        "gold_parse": "SELECT Player ,  Years_Played FROM player",
        "query": "SELECT Player , Count ( * ) FROM player GROUP BY Player",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many dorms have amenities?",
        "gold_parse": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the first name of the students who are in age 20 to 25 and living in PHL city?",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE city_code = value INTERSECT SELECT Fname FROM Student WHERE Age < value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.",
        "gold_parse": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "query": "SELECT product_details FROM Products WHERE product_details = value OR product_details = value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "gold_parse": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "query": "SELECT meter_600 , meter_400 FROM swimmer WHERE Nationality = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the different cities that have more than 100 memberships?",
        "gold_parse": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "query": "SELECT DISTINCT City FROM branch GROUP BY City HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query": "SELECT T1.staff_id FROM Staff_Department_Assignments AS T1 WHERE T1.date_assigned_to < ( SELECT T2.department_name FROM Departments AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers who never made an order.",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "gold_parse": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges",
        "query": "SELECT Name , Location FROM station ORDER BY Total_Passengers Asc",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Count the number of different colleges that players who play for Columbus Crew are from.",
        "gold_parse": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "query": "SELECT Count ( * ) FROM team WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_name , customer_phone , customer_email FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "How many books fall into each category?",
        "gold_parse": "SELECT category ,  count(*) FROM book_club GROUP BY category",
        "query": "SELECT Count ( * ) , Type FROM culture_company GROUP BY Type",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What college has a student who successfully made the team in the role of a goalie?",
        "gold_parse": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "query": "SELECT T1.enr FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".",
        "gold_parse": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "gold_parse": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
        "query": "SELECT Carrier FROM phone WHERE Memory_in_G > value INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many different genders are there in the dorms?",
        "gold_parse": "SELECT count(DISTINCT gender) FROM dorm",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "query": "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "Which organizations are not a parent organization of others? List the organization id.",
        "gold_parse": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
        "query": "SELECT organization_id FROM Organizations EXCEPT SELECT organization_id FROM Organizations",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of regions with two or more storms?",
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.length > value OR T3.height < value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of the instructors who taught C Programming course before.",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "query": "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name WHERE T2.title = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the patient who has the most recent undergoing treatment?",
        "gold_parse": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the most frequently ordered product? Tell me the detail of the product",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT product_details FROM Products GROUP BY product_details ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?",
        "gold_parse": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "List the names of all courses ordered by their titles and credits.",
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits",
        "query": "SELECT title FROM course ORDER BY credits Asc",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE length BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the total revenue of each manufacturer?",
        "gold_parse": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
        "query": "SELECT Sum ( T1.Revenue ) , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T2.Manufacturer",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Which countries do not have a stadium that was opened after 2006?",
        "gold_parse": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006",
        "query": "SELECT Country FROM stadium WHERE Opening_year > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products have the characteristic named \"hot\"?",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Which colleges does each player with a name that starts with the letter D  who tried out go to?",
        "gold_parse": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName LIKE value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "gold_parse": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "query": "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names and years of all races that had a driver with the last name Lewis?",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "query": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held between 2009 and 2011?",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "query": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the code of the product type with an average price higher than the average price of all products?",
        "gold_parse": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
        "query": "SELECT product_type_code FROM Products WHERE product_price > ( SELECT Avg ( product_price ) FROM Products )",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many diffrent dorm amenities are there?",
        "gold_parse": "SELECT count(*) FROM dorm_amenity",
        "query": "SELECT Count ( DISTINCT dorm_name ) FROM Dorm",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
        "query": "SELECT T1.cName FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value )",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "gold_parse": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "query": "SELECT name FROM user_profiles WHERE email = value OR email = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Count the number of tracks that are part of the rock genre.",
        "gold_parse": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "query": "SELECT Count ( * ) FROM Genre WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the department with the fewest staff assignments.",
        "gold_parse": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",
        "gold_parse": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT College FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "gold_parse": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "query": "SELECT Name , Winery , Year FROM wine WHERE Price > value ORDER BY Price Desc",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT T2.product_name , T2.typical_buying_price FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T1.product_category_description = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR replacement_cost < value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the description of the color for most products?",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code GROUP BY T2.characteristic_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "query": "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which people severed as governor most frequently?",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Attorney_General FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "gold_parse": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT employee_name , Count ( * ) FROM Employees GROUP BY employee_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the name of colleges that have at least two players in descending alphabetical order.",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "query": "SELECT College FROM match_season GROUP BY College HAVING Count ( * ) < = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the average and total capacity of dorms for the students with gender X.",
        "gold_parse": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
        "query": "SELECT Avg ( student_capacity ) , Avg ( student_capacity ) FROM Dorm WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find number of products which Sony does not make.",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = value INTERSECT SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "How many students attend course English?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?",
        "gold_parse": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "query": "SELECT order_id , customer_id FROM Customer_Orders ORDER BY order_date Asc",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of customers who are active.",
        "gold_parse": "SELECT count(*) FROM customer WHERE active = '1'",
        "query": "SELECT Count ( * ) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who attended  statistics courses in the order of attendance date.",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
        "query": "SELECT T1.student_id FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.course_id = T2.course_id ORDER BY T2.date_of_attendance Asc",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students who are living in the dorm that has most number of amenities.",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT Fname FROM Student WHERE city_code = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Who is the founder of Sony?",
        "gold_parse": "SELECT founder FROM manufacturers WHERE name  =  'Sony'",
        "query": "SELECT Founder FROM Manufacturers WHERE Founder = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the all games score and location of the school called Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "What is the name of the youngest editor?",
        "gold_parse": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
        "query": "SELECT Name FROM editor ORDER BY Age Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many debit cards do we have?",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "query": "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?",
        "gold_parse": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "query": "SELECT Days_held FROM wrestler WHERE Name = value OR Name = value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What are the names of perpetrators?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many different courses offered by Physics department?",
        "gold_parse": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "query": "SELECT Count ( * ) FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List all channel names ordered by their rating in percent from big to small.",
        "gold_parse": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
        "query": "SELECT Name FROM channel ORDER BY Rating_in_percent Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?",
        "gold_parse": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING Count ( * ) > value UNION SELECT product_id FROM Product_Suppliers WHERE total_value_purchased < value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "query": "SELECT cName FROM College WHERE enr > value INTERSECT SELECT cName FROM College WHERE enr < value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which programs' origins are not \"Beijing\"? Give me the program names.",
        "gold_parse": "SELECT name FROM program WHERE origin != 'Beijing'",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Origin ! = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of medications prescribed for each brand.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "query": "SELECT Count ( * ) , Brand FROM Medication GROUP BY Brand",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "gold_parse": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "query": "SELECT attribute_name , attribute_id FROM Attribute_Definitions",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "query": "SELECT country FROM circuits WHERE lat > value OR lat < value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the name and address of the customers who have both New and Pending orders.",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "gold_parse": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT T2.dept_name FROM department AS T1 JOIN course AS T2 ON T1.dept_name = T2.dept_name ORDER BY T1.budget Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
        "gold_parse": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
        "query": "SELECT Count ( * ) FROM budget WHERE Invested > value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What is the name of the most common genre in all tracks?",
        "gold_parse": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Name FROM Genre GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the state and country of all cities with post code starting with 4.",
        "gold_parse": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "query": "SELECT state_province_county , country FROM Addresses WHERE zip_postcode = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "For each manufacturer name, what are the names and prices of their most expensive product?",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "query": "SELECT Name , Price FROM Products ORDER BY Price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students who are living in the Smith Hall.",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
        "query": "SELECT Fname FROM Student WHERE city_code = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many employees have certificate.",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "query": "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the channel code and contact number of the customer contact channel that was active for the longest time?",
        "gold_parse": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "query": "SELECT customer_id , other_customer_details FROM Customers ORDER BY date_became_customer Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many languages are in these films?",
        "gold_parse": "SELECT count(DISTINCT language_id) FROM film",
        "query": "SELECT Count ( * ) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "query": "SELECT student_id FROM Students",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the description and code of the type of service that is performed the most often?",
        "gold_parse": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Service_Type_Description , Service_Type_Code FROM Ref_Service_Types GROUP BY Service_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of customers.",
        "gold_parse": "SELECT count(*) FROM Customers",
        "query": "SELECT Count ( * ) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the name of the product that has the smallest capacity.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of the top three products that were purchased in the largest amount?",
        "gold_parse": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which party has the largest number of delegates?",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Party FROM party GROUP BY Party ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which programs are never broadcasted in the morning? Give me the names of the programs.",
        "gold_parse": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "query": "SELECT T1.Name FROM program AS T1 WHERE T1.Program_ID NOT IN ( SELECT T2.Program_ID FROM broadcast_share AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers who have purchased a keyboard?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "query": "SELECT DISTINCT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many different majors are there and how many different city codes are there for each student?",
        "gold_parse": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "query": "SELECT Major , Count ( * ) FROM Student GROUP BY Major",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the color description of the product with name \"catnip\"?",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the product type, name, and price for products supplied by supplier 3.",
        "gold_parse": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
        "query": "SELECT T2.product_type_code , T2.product_name , T2.product_price FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id WHERE T1.supplier_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers who have purchased both products Latte and Americano?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average and total capacity for all dorms who are of gender X?",
        "gold_parse": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
        "query": "SELECT Avg ( student_capacity ) , Min ( student_capacity ) FROM Dorm WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the characteristic name used by most number of the products?",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT characteristic_name FROM Characteristics GROUP BY characteristic_data_type ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics.",
        "gold_parse": "SELECT count(*) FROM CHARACTERISTICS",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the name of the party that has the most delegates.",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Party FROM party GROUP BY Party ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "Show the park of the roller coaster with the highest speed.",
        "gold_parse": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
        "query": "SELECT Park FROM roller_coaster ORDER BY Height Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Which reign is the most common among wrestlers?",
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Event FROM wrestler GROUP BY Event ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the name of the student in the History department with the most credits.",
        "gold_parse": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "query": "SELECT name FROM student ORDER BY tot_cred Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the names of the top 10 airlines that operate the most number of routes.",
        "gold_parse": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.src_apid ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the names of tracks that contain the the word you in them?",
        "gold_parse": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "query": "SELECT T3.Name FROM Playlist AS T1 JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId JOIN Track AS T3 ON T2.TrackId = T3.TrackId WHERE T1.Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many different instructors have taught some course?",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many storms had death records?",
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "query": "SELECT Count ( * ) FROM storm",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "query": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "What is the location of the party with the most hosts?",
        "gold_parse": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
        "query": "SELECT T1.Location FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name and position of the head of the department with the least employees.",
        "gold_parse": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T2.Name , T2.Position FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who didn't take any course from Biology department.",
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "query": "SELECT T1.name FROM student AS T1 EXCEPT SELECT T1.name FROM department AS T2 JOIN course AS T3 ON T3.dept_name = T2.dept_name JOIN student AS T1 ON T2.dept_name = T1.dept_name WHERE T3.dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find courses that ran in Fall 2009 but not in Spring 2010.",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.semester FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Governor , Count ( * ) FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "What are the mission codes, fates, and names of the ships involved?",
        "gold_parse": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "query": "SELECT T1.Code , T2.Name , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of rooms for different block code?",
        "gold_parse": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "query": "SELECT BlockCode , Count ( * ) FROM Room GROUP BY BlockCode",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "gold_parse": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "query": "SELECT DISTINCT Name FROM Nurse",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_pounds Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the product ids and color descriptions for products with two or more characteristics?",
        "gold_parse": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "query": "SELECT product_id , product_description FROM Products GROUP BY product_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each delegate, find the names of the party they are part of.",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "query": "SELECT Comptroller , Party FROM party",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".",
        "gold_parse": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"",
        "query": "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What is the county that produces the most wines scoring higher than 90?",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show ids for the faculty members who don't advise any student.",
        "gold_parse": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "query": "SELECT T1.FacID FROM Faculty AS T1 EXCEPT SELECT T2.FacID FROM Faculty_Participates_in AS T2",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Count the number of tracks that are of the media type \"AAC audio file\".",
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "query": "SELECT Count ( * ) FROM MediaType WHERE Name = value AND Name = value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the total kills of the perpetrators with height more than 1.84.",
        "gold_parse": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84",
        "query": "SELECT Count ( * ) FROM people WHERE Height > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "query": "SELECT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the different card types, and how many cards are there of each?",
        "gold_parse": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "query": "SELECT T1.card_type_code , Count ( * ) FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE parent_entry_id > value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the members that have never registered at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the description of the most popular role among users that have logged in?",
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT T1.role_description FROM Roles AS T1 JOIN Users AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Count the number of distinct channel owners.",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the product type whose average price is higher than the average price of all products.",
        "gold_parse": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
        "query": "SELECT product_type_code FROM Products WHERE product_price > ( SELECT Avg ( product_price ) FROM Products )",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the id and salary of Mark Young.",
        "gold_parse": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "query": "SELECT eid , salary FROM employee",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "gold_parse": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "query": "SELECT City FROM branch WHERE Open_year = value INTERSECT SELECT City FROM branch WHERE membership_amount > value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "gold_parse": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "query": "SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id ORDER BY T2.product_name Asc",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "query": "SELECT name FROM enzyme WHERE Chromosome ! = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physicians who are trained in a procedure that costs more than 5000.",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "query": "SELECT * FROM Procedures WHERE Cost > value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Where does the customer with the first name Linda live? And what is her email?",
        "gold_parse": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
        "query": "SELECT email , last_update FROM customer WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "List the time of elimination of the wrestlers with largest days held.",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "query": "SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the category code and typical price of 'cumin'.",
        "gold_parse": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"",
        "query": "SELECT product_category_code , typical_selling_price FROM Products WHERE typical_buying_price = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
        "query": "SELECT characteristic_name FROM Characteristics WHERE characteristic_type_code = value",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "How many parties are there?",
        "gold_parse": "SELECT count(*) FROM party",
        "query": "SELECT Count ( DISTINCT Party_Theme ) FROM party",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all the physicians who prescribe Thesisin as medication.",
        "gold_parse": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "query": "SELECT Name FROM Physician WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show member names without any registered branch.",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "List the season, home team, away team of all the games.",
        "gold_parse": "SELECT season ,  home_team ,  away_team FROM game",
        "query": "SELECT Season , Competition , Home_team FROM game",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.inventory_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
        "gold_parse": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "query": "SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < value AND T1.County = value AND T1.County = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "query": "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "gold_parse": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC",
        "query": "SELECT Player_name , Sponsor_name FROM player ORDER BY Votes Desc",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the first name and the last name of the customer who made the earliest rental?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "query": "SELECT first_name , last_name FROM customer ORDER BY create_date Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_dollars ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Give the names of tracks that do not have a race in the class 'GT'.",
        "gold_parse": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "query": "SELECT T1.Name FROM track AS T1 WHERE T1.Track_ID NOT IN ( SELECT T2.Track_ID FROM race AS T2 WHERE T2.Class = value )",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the ids for all the students who participate in an activity and are under 20.",
        "gold_parse": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "query": "SELECT StuID FROM Student WHERE Age = value INTERSECT SELECT StuID FROM Student WHERE Age = value",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "how many ships are there?",
        "gold_parse": "SELECT count(*) FROM ship",
        "query": "SELECT Count ( * ) FROM captain",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the total number of catalog contents.",
        "gold_parse": "SELECT count(*) FROM catalog_contents",
        "query": "SELECT Count ( * ) FROM Attribute_Definitions",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the average price of wines that are not produced from Sonoma county.",
        "gold_parse": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')",
        "query": "SELECT Avg ( Price ) FROM wine WHERE State ! = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the name and publication date of the catalogs with catalog level number above 5?",
        "gold_parse": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "query": "SELECT T1.catalog_name , T1.date_of_publication FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show all storm names affecting region \"Denmark\".",
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the title of course whose prerequisite is course Differential Geometry.",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "query": "SELECT title FROM course",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers are living in city \"Lake Geovannyton\"?",
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
        "query": "SELECT Count ( * ) FROM Addresses WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.",
        "gold_parse": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT T1.supplier_name , Avg ( T2.total_value_purchased ) FROM Suppliers AS T1 JOIN Product_Suppliers AS T2 ON T1.supplier_id = T2.supplier_id GROUP BY T1.supplier_name ORDER BY Avg ( T2.total_value_purchased ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients' prescriptions physician John Dorian made.",
        "gold_parse": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "query": "SELECT Count ( * ) FROM Physician WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Tell me the number of orders with \"Second time\" as order detail.",
        "gold_parse": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE other_customer_details = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the cities no customers live in?",
        "gold_parse": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "query": "SELECT city FROM Addresses EXCEPT SELECT city FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "What are the country names, area and population which has both roller coasters with speed higher",
        "gold_parse": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55",
        "query": "SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed > value INTERSECT SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many kinds of different ratings are listed?",
        "gold_parse": "SELECT count(DISTINCT rating) FROM film",
        "query": "SELECT Count ( * ) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.",
        "gold_parse": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "query": "SELECT Min ( Order_Quantity ) , Max ( Order_Quantity ) , Avg ( Order_Quantity ) FROM Invoice_Items",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( strength ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "What is the total budget amount for school \"Glenn\" in all years?",
        "gold_parse": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'",
        "query": "SELECT Sum ( Budgeted ) FROM budget WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the aircraft name for the flight with number 99",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno LIKE value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "query": "SELECT DISTINCT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many cities are in Australia?",
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "query": "SELECT Count ( * ) FROM country WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts exist in the database?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "query": "SELECT T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.name = value AND T1.Porphyria = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List the names of all left-footed players who have overall rating between 85 and 90.",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
        "query": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating < value INTERSECT SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the name of physicians who took some appointment.",
        "gold_parse": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "query": "SELECT Name FROM Physician",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "gold_parse": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "query": "SELECT T2.building , T2.room_number , T2.year FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = value ORDER BY T1.title Asc",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Class , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of all the physicians who took appointments.",
        "gold_parse": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "query": "SELECT Name FROM Physician",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the entry names of the catalog with the attribute that have the most entries.",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT catalog_name FROM Catalogs GROUP BY catalog_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "query": "SELECT cName FROM College WHERE state = value UNION SELECT cName FROM College WHERE enr > value AND state = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the course with Differential Geometry as a prerequisite?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "query": "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.semester = value",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the positions of players whose average number of points scored by that position is larger than 20?",
        "gold_parse": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "query": "SELECT Position FROM player WHERE Points > value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the total number of students who are living in a male dorm?",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "query": "SELECT Count ( * ) FROM Dorm WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines made from red grapes and with prices above 50?",
        "gold_parse": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
        "query": "SELECT Name FROM wine WHERE Grape = value INTERSECT SELECT Name FROM wine WHERE Price > value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM player WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the total revenue for each manufacturer.",
        "gold_parse": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
        "query": "SELECT Sum ( T1.Revenue ) , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T2.Manufacturer",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the average number of followers for the users who had some tweets.",
        "gold_parse": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "query": "SELECT Avg ( followers ) FROM user_profiles",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Count the number of different statuses.",
        "gold_parse": "SELECT count(DISTINCT Status) FROM city",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the title and inventory id of the film that is rented most often.",
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "query": "SELECT Name FROM Physician GROUP BY Name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT product_name , typical_selling_price , product_description FROM Products WHERE product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the id and name of the staff who has been assigned for the shortest period.",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and market share of the browser Safari?",
        "gold_parse": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
        "query": "SELECT id , market_share FROM browser ORDER BY market_share Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the names of teams from universities that have a below average enrollment?",
        "gold_parse": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "query": "SELECT Nickname FROM university WHERE Enrollment < ( SELECT Avg ( Enrollment ) FROM university )",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?",
        "gold_parse": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "query": "SELECT City FROM branch WHERE Open_year > value INTERSECT SELECT City FROM branch WHERE Open_year < value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What is the list of program names, sorted by the order of launch date?",
        "gold_parse": "SELECT name FROM program ORDER BY launch",
        "query": "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID ORDER BY T2.Time_of_day Asc",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for all the clubs?",
        "gold_parse": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "query": "SELECT Max ( Silver ) , Min ( Gold ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id and name of the staff who has been assigned for the least amount of time?",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Count how many appointments have been made in total.",
        "gold_parse": "SELECT count(*) FROM appointment",
        "query": "SELECT Count ( * ) FROM Physician",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
        "gold_parse": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"",
        "query": "SELECT Avg ( T2.Order_Quantity ) FROM Invoices AS T1 JOIN Invoice_Items AS T2 ON T1.Invoice_ID = T2.Invoice_ID WHERE T1.payment_method_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value OR T1.characteristic_type_description = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "gold_parse": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "query": "SELECT Name FROM Products WHERE Price > value OR Manufacturer < value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find distinct cities of address of students?",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "query": "SELECT DISTINCT city FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of nurses who are nursing an undergoing treatment.",
        "gold_parse": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T2.pName , T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "query": "SELECT id , name , Porphyria FROM enzyme ORDER BY Porphyria Desc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names of staff who have been assigned multiple jobs?",
        "gold_parse": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "query": "SELECT staff_name FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "query": "SELECT DISTINCT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T1.Name Asc",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the number of albums by the artist \"Metallica\".",
        "gold_parse": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "query": "SELECT Count ( * ) FROM Artist WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "On which days more than one revisions were made on catalogs.",
        "gold_parse": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "query": "SELECT date_of_publication FROM Catalogs GROUP BY catalog_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "gold_parse": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T2.stadium_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "query": "SELECT Count ( * ) FROM Institution WHERE Type = value OR Founded > value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "query": "SELECT protein_name , common_name FROM protein",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "gold_parse": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "query": "SELECT id , Trade_Name FROM medicine GROUP BY id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name , name FROM employee WHERE salary > value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many appointments are there?",
        "gold_parse": "SELECT count(*) FROM appointment",
        "query": "SELECT Count ( * ) FROM Physician",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Find the names of programs that are never broadcasted in the morning.",
        "gold_parse": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "query": "SELECT T1.Name FROM channel AS T1 WHERE T1.Channel_ID NOT IN ( SELECT T2.Channel_ID FROM broadcast AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "gold_parse": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "query": "SELECT T1.catalog_name , T1.date_of_publication FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "gold_parse": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "query": "SELECT T1.School_name FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.total_budget_percent_budgeted > value OR T1.Enrollment > value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "query": "SELECT Count ( * ) FROM flight WHERE distance > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
        "gold_parse": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "gold_parse": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
        "query": "SELECT Winery , Name , Score FROM wine WHERE Score > value ORDER BY Score Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many instructors teach a course in the Spring of 2010?",
        "gold_parse": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT Count ( * ) FROM takes WHERE year = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the number of courses provided in each semester and year.",
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "query": "SELECT Count ( * ) , year FROM takes GROUP BY year",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What is the number of technicians?",
        "gold_parse": "SELECT count(*) FROM technician",
        "query": "SELECT Count ( * ) FROM repair",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the average age and number of male students (with sex M) from each city.",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the names of stadiums that some Australian swimmers have been to.",
        "gold_parse": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'",
        "query": "SELECT name FROM stadium WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_name , customer_phone , customer_email FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.Attorney_General , Count ( * ) FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party GROUP BY T2.District ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of card types.",
        "gold_parse": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "query": "SELECT Count ( DISTINCT transaction_type ) FROM Financial_Transactions",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the id of the candidate who most recently accessed the course?",
        "gold_parse": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "query": "SELECT candidate_id FROM Candidate_Assessments GROUP BY candidate_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and salaries of instructors who advise students in the Math department?",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1",
        "query": "SELECT T1.shipping_agent_name , Count ( * ) FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code GROUP BY T2.shipping_agent_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
        "gold_parse": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'",
        "query": "SELECT Name FROM member WHERE Hometown = value INTERSECT SELECT Name FROM member WHERE Hometown = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_euros > value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the employee id of the head whose department has the least number of employees?",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "What is the number of ships?",
        "gold_parse": "SELECT count(*) FROM ship",
        "query": "SELECT Count ( * ) FROM mission",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Give the ids of the three products purchased in the largest amounts.",
        "gold_parse": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the name, location, mascot for all schools.",
        "gold_parse": "SELECT school_name ,  LOCATION ,  mascot FROM school",
        "query": "SELECT T1.School_name , T1.Location , T2.donator_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"",
        "query": "SELECT id FROM Player WHERE height BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the nominees that have been nominated more than two musicals.",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "query": "SELECT Award FROM musical GROUP BY Award HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products are there for each manufacturer?",
        "gold_parse": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "query": "SELECT Count ( * ) , Manufacturer FROM Products GROUP BY Manufacturer",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "query": "SELECT Count ( * ) FROM enzyme WHERE Porphyria ! = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "gold_parse": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "query": "SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = value INTERSECT SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Nominee FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "gold_parse": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "query": "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List total amount of  invoice from Chicago, IL.",
        "gold_parse": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "query": "SELECT Sum ( total ) FROM invoices WHERE billing_city = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by each allergy type?",
        "gold_parse": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "query": "SELECT AllergyType , Count ( * ) FROM Allergy_Type GROUP BY AllergyType",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show the company name with the number of gas station.",
        "gold_parse": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "query": "SELECT Count ( * ) FROM company",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest savings balance.",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the names of customers who have no policies associated.",
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 EXCEPT SELECT T2.Customer_ID FROM Policies AS T2",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "gold_parse": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5",
        "query": "SELECT name , Count ( * ) FROM genres GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the name of the customer who has made the largest amount of claim in a single claim?",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_ID ORDER BY Sum ( T3.Amount_Claimed ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How much is the track Fast As a Shark?",
        "gold_parse": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\"",
        "query": "SELECT milliseconds FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the titles of all albums that start with A in alphabetical order?",
        "gold_parse": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title",
        "query": "SELECT title FROM albums ORDER BY title Asc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the total and maximum duration for all trips with the bike id 636?",
        "gold_parse": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
        "query": "SELECT Sum ( duration ) , Sum ( duration ) FROM trip WHERE bike_id = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all allergy type with number of students affected.",
        "gold_parse": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "query": "SELECT AllergyType , Count ( * ) FROM Allergy_Type GROUP BY AllergyType",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "query": "SELECT Rank , Market_Value , Profits_billion FROM company WHERE Sales_billion = value ORDER BY Sales_billion Asc",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "find the full name of employees who report to Nancy Edwards?",
        "gold_parse": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT zip_code FROM weather WHERE zip_code = value GROUP BY zip_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the average ages for male and female students?",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Show the names of pilots and the number of records they have.",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "query": "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the description of the claim status \"Open\".",
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "query": "SELECT T2.Claim_Status_Description FROM Claim_Headers AS T1 JOIN Claims_Processing_Stages AS T2 WHERE T1.Claim_Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On which day has it neither been foggy nor rained in the zip code of 94107?",
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "query": "SELECT start_date FROM trip EXCEPT SELECT start_date FROM trip WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "How many pilots are there?",
        "gold_parse": "SELECT count(*) FROM pilot",
        "query": "SELECT Count ( * ) FROM aircraft",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average bike availablility for stations not in Palo Alto?",
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "query": "SELECT Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 WHERE T1.city ! = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the zip code that has the lowest average mean sea level pressure?",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY Avg ( min_humidity ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the name, latitude, and city of the station with the lowest latitude?",
        "gold_parse": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "query": "SELECT name , city , long FROM station ORDER BY long Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "gold_parse": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "query": "SELECT T1.title , T1.phone , T1.hire_date FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.first_name = value AND T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "List all info about all people.",
        "gold_parse": "SELECT * FROM people",
        "query": "SELECT * FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "query": "SELECT T2.start_date FROM status AS T1 JOIN trip AS T2 WHERE T2.zip_code = value AND T1.time ! = value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show company name and main industry without a gas station.",
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "query": "SELECT Company , Main_Industry FROM company EXCEPT SELECT Company , Main_Industry FROM company",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List every album whose title starts with A in alphabetical order.",
        "gold_parse": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title",
        "query": "SELECT title FROM albums ORDER BY title Asc",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has the highest rate? List the room's full name, rate, check in and check out date.",
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1",
        "query": "SELECT T1.roomName , T2.LastName , T2.CheckIn FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
        "gold_parse": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "query": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Avg ( T2.bikes_available ) > value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What is the total number of students?",
        "gold_parse": "SELECT count(*) FROM Student",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT name FROM station WHERE long < value AND city = value UNION SELECT name FROM station WHERE long > value AND city = value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show minimum, maximum, and average market value for all companies.",
        "gold_parse": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "query": "SELECT Min ( Company ) , Max ( Market_Value ) , Avg ( Market_Value ) FROM company",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the start station's name and id for the one that had the most start trips in August?",
        "gold_parse": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.name , T2.start_station_id FROM station AS T1 JOIN trip AS T2 WHERE T2.start_date = value GROUP BY T2.start_station_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'",
        "query": "SELECT roomName FROM Rooms WHERE basePrice < value INTERSECT SELECT roomName FROM Rooms WHERE basePrice > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "query": "SELECT name FROM tracks EXCEPT SELECT name FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many invoices were billed from Chicago, IL?",
        "gold_parse": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "query": "SELECT Count ( * ) FROM invoices WHERE billing_city = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the names of the customers who have an deputy policy.",
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T3.Claim_Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the first and last names of all the employees and how many people report to them?",
        "gold_parse": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1",
        "query": "SELECT first_name , last_name FROM employees",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Which allergy has most number of students affected?",
        "gold_parse": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Sex FROM Student GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_sea_level_pressure_inches ) < value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students have each different allergy?",
        "gold_parse": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "query": "SELECT Sex , Count ( * ) FROM Student GROUP BY Sex",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.",
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "query": "SELECT start_date , duration FROM trip ORDER BY duration Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the id of the bike that traveled the most in 94002?",
        "gold_parse": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT bike_id FROM trip GROUP BY bike_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many albums has Billy Cobam released?",
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"",
        "query": "SELECT Count ( * ) FROM sqlite_sequence WHERE seq = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids for students over 20 years old?",
        "gold_parse": "SELECT StuID FROM Student WHERE age  >  20",
        "query": "SELECT Major FROM Student WHERE Age > value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What is the average and minimum age of all artists from United States.",
        "gold_parse": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
        "query": "SELECT Avg ( Age ) , Max ( Age ) FROM artist WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "query": "SELECT DISTINCT Fname , city_code FROM Student WHERE Sex = value OR Sex = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with a higher checking balance than savings balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "correctness": 0
    },
    {
        "db_id": "company_1",
        "question": "find all dependent names who have a spouse relation with some employee.",
        "gold_parse": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'",
        "query": "SELECT Dependent_name FROM dependent",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What student id corresponds to the oldest student?",
        "gold_parse": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "query": "SELECT Major FROM Student ORDER BY Age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the names of candidates who have a lower support rate than oppose rate?",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "query": "SELECT T2.Name FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Unsure_rate < value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.",
        "gold_parse": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\"",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.roomName = value AND T2.LastName = value AND T2.LastName = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "gold_parse": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.name , T2.start_station_id FROM station AS T1 JOIN trip AS T2 WHERE T2.start_date = value GROUP BY T2.start_station_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "query": "SELECT T3.Fname , T3.Sex FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.Allergy = value AND T1.AllergyType = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "query": "SELECT custid , name FROM ACCOUNTS WHERE name < value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List Aerosmith's albums.",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"",
        "query": "SELECT title FROM albums",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the number of checking accounts for each account name.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query": "SELECT Count ( * ) FROM ACCOUNTS",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "query": "SELECT Count ( * ) , zip_code FROM trip GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of times ROY SWEAZY has reserved a room.",
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE LastName = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "How many exhibitions has each artist had?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "query": "SELECT Name , Count ( * ) FROM artist GROUP BY Name",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "query": "SELECT start_date FROM trip ORDER BY duration Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "query": "SELECT T2.Name FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Unsure_rate < ( SELECT Max ( T1.Oppose_rate ) FROM candidate AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
        "gold_parse": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party",
        "query": "SELECT T2.Name , Count ( * ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID GROUP BY T1.Representative_ID",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students have cat allergies?",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "gold_parse": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "query": "SELECT Fname , LName FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "gold_parse": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100",
        "query": "SELECT T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T2.genre_id HAVING Sum ( T2.milliseconds ) > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_date FROM trip WHERE duration > value AND duration > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "gold_parse": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
        "query": "SELECT T1.name FROM station AS T1 EXCEPT SELECT T1.name FROM station AS T1 JOIN trip AS T2 WHERE T1.city = value AND T2.duration > value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?",
        "gold_parse": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "query": "SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance > value INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Oppose_rate > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is title of album which track Balls to the Wall belongs to?",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\"",
        "query": "SELECT T1.title FROM albums AS T1 JOIN media_types AS T2 JOIN tracks AS T3 ON T1.id = T3.album_id AND T3.media_type_id = T2.id WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "List the main industry with highest total market value and its number of companies.",
        "gold_parse": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "query": "SELECT Company , Sales_billion FROM company ORDER BY Sales_billion Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all student IDs who have at least two allergies.",
        "gold_parse": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "query": "SELECT Major FROM Student GROUP BY Major HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each city, what is the highest latitude for its stations?",
        "gold_parse": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "query": "SELECT city , Max ( long ) FROM station GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "query": "SELECT zip_code , Count ( * ) FROM weather GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.",
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\"",
        "query": "SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.CheckIn = value AND T2.LastName = value INTERSECT SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = value AND T2.LastName = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "query": "SELECT T1.roomName , T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.basePrice > value AND T2.Adults > value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
        "gold_parse": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "query": "SELECT T2.Location , T2.Representative_Name FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Market_Value Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "query": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "gold_parse": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "query": "SELECT Count ( * ) FROM trip WHERE start_date = value AND end_date = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the number of invoices from the US, grouped by state.",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state",
        "query": "SELECT billing_state , Count ( * ) FROM invoices GROUP BY billing_state",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all Rock tracks that are stored on MPEG audio files?",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the description of the claim status \"Open\"?",
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "query": "SELECT T2.Claim_Status_Description FROM Claim_Headers AS T1 JOIN Claims_Processing_Stages AS T2 WHERE T1.Claim_Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "gold_parse": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Claim_Outcome_Code FROM Claims_Processing GROUP BY Claim_Outcome_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?",
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "query": "SELECT T1.id FROM station AS T1 WHERE T1.long > value INTERSECT SELECT T2.station_id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.long < value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the students ids of students who have more than one allergy?",
        "gold_parse": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "query": "SELECT StuID FROM Student GROUP BY Major HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Eduardo Martins is a customer at which company?",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "query": "SELECT DISTINCT T1.first_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by food related allergies?",
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_dew_point_f FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, return the average mean temperature of August there.",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "query": "SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query": "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer is associated with the latest policy?",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.End_Date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT min_temperature_f FROM weather WHERE zip_code = value ORDER BY min_temperature_f Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "query": "SELECT roomName , decor FROM Rooms WHERE basePrice > value UNION SELECT roomName , decor FROM Rooms WHERE basePrice > value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the last name and age of the student who has allergy to both milk and cat.",
        "gold_parse": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "query": "SELECT LName , Age FROM Student WHERE Sex = value INTERSECT SELECT LName , Age FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Count the number of exhibitions that happened in or after 2005.",
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "query": "SELECT Count ( * ) FROM exhibition WHERE Year > value OR Year > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the full name of employee who supported the most number of customers.",
        "gold_parse": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT first_name , last_name FROM employees GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the names of people who have a height greater than 200 or less than 190?",
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "query": "SELECT Name FROM people WHERE Height > value OR Height > value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many king beds are there?",
        "gold_parse": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King'",
        "query": "SELECT Count ( * ) FROM Rooms",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has the largest number of reservations?",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room GROUP BY T2.Room ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "query": "SELECT T1.Fname , T1.Sex FROM Student AS T1 EXCEPT SELECT T1.Fname , T1.Sex FROM Allergy_Type AS T2 JOIN Has_Allergy AS T3 ON T2.Allergy = T3.Allergy JOIN Student AS T1 ON T3.StuID = T1.StuID WHERE T2.Allergy = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the station station and end station for the trips with the three smallest ids?",
        "gold_parse": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "query": "SELECT T1.name , T2.start_station_name FROM station AS T1 JOIN trip AS T2 GROUP BY T2.start_station_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all main industry for all companies.",
        "gold_parse": "SELECT DISTINCT main_industry FROM company",
        "query": "SELECT Company FROM company",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "What are all the distinct participant ids who attended any events?",
        "gold_parse": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "query": "SELECT DISTINCT Participant_ID FROM Participants_in_Events",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids of students who don't have any allergies?",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "query": "SELECT * FROM Allergy_Type AS T1 EXCEPT SELECT T2.StuID FROM Student AS T2",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all student ids who are older than 20.",
        "gold_parse": "SELECT StuID FROM Student WHERE age  >  20",
        "query": "SELECT Major FROM Student WHERE Age > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?",
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "query": "SELECT T2.title FROM sqlite_sequence AS T1 JOIN albums AS T2 WHERE T1.seq LIKE value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?",
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "query": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the id of the shortest trip?",
        "gold_parse": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "query": "SELECT start_station_id FROM trip ORDER BY duration Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are there?",
        "gold_parse": "SELECT count(*) FROM Student",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many tracks are in each genre?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM genres GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all allergies with number of students affected.",
        "gold_parse": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "query": "SELECT Sex , Count ( * ) FROM Student GROUP BY Sex",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "How many claim processing stages are there in total?",
        "gold_parse": "SELECT count(*) FROM claims_processing_stages",
        "query": "SELECT Count ( * ) FROM Claim_Headers WHERE Claim_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the state in the US with the most invoices.",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'",
        "query": "SELECT roomName FROM Rooms WHERE basePrice < value INTERSECT SELECT roomName FROM Rooms WHERE basePrice > value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T3.Claim_Status_Code = value OR T3.Claim_Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find number of tracks in each genre?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM genres GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Candidate_ID , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each station, return its longitude and the average duration of trips that started from the station.",
        "gold_parse": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
        "query": "SELECT T1.name , Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 GROUP BY T2.start_station_id",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many female students have milk or egg allergies?",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value OR T1.AllergyType = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "query": "SELECT date FROM weather ORDER BY min_humidity Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Who is the composer of track Fast As a Shark?",
        "gold_parse": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"",
        "query": "SELECT T1.seq FROM sqlite_sequence AS T1 JOIN tracks AS T2 WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many distinct allergies are there?",
        "gold_parse": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
        "query": "SELECT Count ( DISTINCT Sex ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query": "SELECT city , Count ( * ) FROM employees WHERE city = value GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "query": "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "gold_parse": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
        "query": "SELECT roomName , decor FROM Rooms ORDER BY basePrice Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the name, latitude, and city of the station that is located the furthest South?",
        "gold_parse": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "query": "SELECT name , city , long FROM station ORDER BY long Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the titles of all the Aerosmith albums?",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"",
        "query": "SELECT title FROM albums",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many employees who are IT staff are from each city?",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query": "SELECT city , Count ( * ) FROM employees GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE min_temperature_f > value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "gold_parse": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "query": "SELECT T2.Location , T2.Representative_Name FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Sales_billion Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "gold_parse": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
        "query": "SELECT T2.Location FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID WHERE T1.Sales_billion > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "gold_parse": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
        "query": "SELECT Sum ( duration ) , Sum ( duration ) FROM trip WHERE bike_id = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the different names for each station that has ever had 7 bikes available?",
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "query": "SELECT DISTINCT name FROM station EXCEPT SELECT DISTINCT name FROM station",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Return the unique name for stations that have ever had 7 bikes available.",
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "query": "SELECT DISTINCT name FROM station EXCEPT SELECT DISTINCT name FROM station",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "gold_parse": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005",
        "query": "SELECT Position FROM pilot WHERE Join_Year > value INTERSECT SELECT Position FROM pilot WHERE Join_Year < value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "query": "SELECT Count ( * ) FROM Student WHERE Age > value AND Sex = value EXCEPT SELECT Sex FROM Student WHERE Age > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of all playlist.",
        "gold_parse": "SELECT name FROM playlists",
        "query": "SELECT name FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the total number of king beds available.",
        "gold_parse": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King'",
        "query": "SELECT Count ( * ) FROM Rooms",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN trip AS T2 WHERE T2.duration > = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude in San Jose?",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer have the most policies? Give me the customer details.",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Customer_Details FROM Customers GROUP BY Customer_Details ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "What are the ids and details of events that have more than one participants?",
        "gold_parse": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
        "query": "SELECT Event_ID , Event_Details FROM Events GROUP BY Event_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many allergies have type animal?",
        "gold_parse": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the number of invoices and total money billed in them from CA?",
        "gold_parse": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\"",
        "query": "SELECT Sum ( total ) , Sum ( total ) FROM invoices",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_Details ORDER BY Sum ( T3.Amount_Claimed ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Which students are unaffected by allergies?",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Which allergy is the most common?",
        "gold_parse": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Sex FROM Student GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have an average sea level pressure between 30.3 and 31?",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "query": "SELECT start_date FROM trip WHERE duration BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many advisors are there?",
        "gold_parse": "SELECT count(DISTINCT advisor) FROM Student",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT name FROM station WHERE city = value UNION SELECT name FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many kids stay in the rooms reserved by ROY SWEAZY?",
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "query": "SELECT Sum ( Adults ) FROM Reservations WHERE FirstName = value AND LastName = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "query": "SELECT Avg ( duration ) , start_date FROM trip WHERE start_station_name = value GROUP BY start_date",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all headquarters without a company in banking industry.",
        "gold_parse": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "query": "SELECT Headquarters FROM company EXCEPT SELECT Headquarters FROM company WHERE Company = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "query": "SELECT name FROM tracks EXCEPT SELECT name FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "How many events had participants whose details had the substring 'Dr.'",
        "gold_parse": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
        "query": "SELECT Count ( * ) FROM Participants WHERE Participant_Details = value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "For each company id, what are the companies and how many gas stations does each one operate?",
        "gold_parse": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "query": "SELECT Company , Count ( * ) FROM company GROUP BY Company_ID",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the first and last names of the top 10 longest-serving employees?",
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
        "query": "SELECT first_name , last_name FROM employees GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "query": "SELECT Headquarters FROM company WHERE Main_Industry = value INTERSECT SELECT Headquarters FROM company WHERE Company = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the installation date for each ending station on all the trips?",
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "query": "SELECT start_date FROM trip",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many milliseconds long is Fast As a Shark?",
        "gold_parse": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"",
        "query": "SELECT Sum ( milliseconds ) FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?",
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "query": "SELECT Headquarters FROM company WHERE Company = value INTERSECT SELECT Headquarters FROM company WHERE Company = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "query": "SELECT T2.start_station_id , T1.name , T2.subscription_type FROM station AS T1 JOIN trip AS T2",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How much money did Lucas Mancini spend?",
        "gold_parse": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "query": "SELECT T1.hire_date FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are all the different food allergies?",
        "gold_parse": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
        "query": "SELECT DISTINCT AllergyType FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?",
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "query": "SELECT Rank , Company , Market_Value FROM company WHERE Main_Industry = value ORDER BY Sales_billion Asc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of all stations with a latitude smaller than 37.5?",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "query": "SELECT name FROM station WHERE long < value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the ids and names of the architects who built at least 3 bridges ?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
        "query": "SELECT id , name FROM architect GROUP BY id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the first and last name of artist who performed \"Le Pop\"?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "query": "SELECT Firstname , Lastname FROM Band WHERE Firstname = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many projects are there?",
        "gold_parse": "SELECT count(*) FROM Projects",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the name of the department htat has no students minoring in it?",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "query": "SELECT T1.DName FROM Department AS T1 WHERE T1.DNO NOT IN ( SELECT T2.Major FROM Student AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "query": "SELECT Famous_Title FROM artist WHERE Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the ids of the problems reported after 1978-06-26.",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date > value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "List the type of bed and name of all traditional rooms.",
        "gold_parse": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\"",
        "query": "SELECT bedType , roomName FROM Rooms",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.JOB_TITLE = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "gold_parse": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "query": "SELECT Document_Type_Name , Document_Type_Name , Document_Type_Description FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees EXCEPT SELECT FIRST_NAME , LAST_NAME FROM employees",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids",
        "query": "SELECT Max ( Adults ) , Sum ( Kids ) FROM Reservations",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "How many problems did the product called \"voluptatem\" have in record?",
        "gold_parse": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"",
        "query": "SELECT Count ( * ) FROM Product WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.date_problem_closed > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT T1.chargeable_amount FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T2.asset_details Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "gold_parse": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
        "query": "SELECT Project_ID FROM Projects GROUP BY Project_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.",
        "gold_parse": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
        "query": "SELECT T2.Name , T1.Name , T2.Hours FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T1.Name Asc",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of vocal types used in song \"Le Pop\"",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "query": "SELECT T1.City FROM city AS T1 JOIN match AS T2 JOIN hosting_city AS T3 ON T1.City_ID = T3.Host_City AND T3.Match_ID = T2.Match_ID WHERE T2.Competition = value AND T2.Competition = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of persons who are friends with Bob.",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "query": "SELECT name FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the number of customers in total.",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Products",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the max and min grade point for all letter grade.",
        "gold_parse": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "query": "SELECT gradepoint , gradepoint FROM Gradeconversion WHERE lettergrade LIKE value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the female friends of Alice.",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all the information for all employees without any department number.",
        "gold_parse": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "query": "SELECT * FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the names of females who are friends with Zach",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.",
        "gold_parse": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
        "query": "SELECT T1.log_entry_description FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.City_ID > value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many different jobs are listed?",
        "gold_parse": "SELECT count(DISTINCT job) FROM Person",
        "query": "SELECT Count ( DISTINCT city ) FROM Person",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of locations.",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the first and last name, department, city, and state province for each employee.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T2.STATE_PROVINCE FROM employees AS T1 JOIN locations AS T2",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of rooms with a king bed.",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the temperature of \"Shanghai\" city in January?",
        "gold_parse": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.City = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many people are older than every engineer?",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "query": "SELECT Count ( * ) FROM Person WHERE age > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instruments did the musician with the last name \"Heilo\" play in \"Badlands\"?",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have regional population above 8000000 or below 5000000?",
        "gold_parse": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "query": "SELECT City FROM city WHERE Regional_Population > value OR Regional_Population < value",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Return the low and high estimates for all film markets.",
        "gold_parse": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "query": "SELECT Type , High_Estimate FROM film_market_estimation",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query": "SELECT DEPARTMENT_ID FROM departments GROUP BY DEPARTMENT_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the number of students that have at least one grade \"B\".",
        "gold_parse": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the first and last names of the instructors who teach the top 3 number of courses?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT Fname , Lname FROM Faculty ORDER BY Rank Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with expenses.",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "HOw many engineers are older than 30?",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
        "query": "SELECT Count ( * ) FROM Person WHERE age > value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "How many companies operates airlines in each airport?",
        "gold_parse": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
        "query": "SELECT name , Count ( * ) FROM airport GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the first name and job id for all employees in the Finance department.",
        "gold_parse": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "query": "SELECT T2.FIRST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MIN_SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the average grade point of student whose last name is Smith.",
        "gold_parse": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "query": "SELECT Avg ( T2.Grade ) FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
        "query": "SELECT T2.EMPLOYEE_ID , T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value UNION SELECT T2.EMPLOYEE_ID , T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
        "query": "SELECT T1.Firstname , T1.Lastname FROM Band AS T1 JOIN Performance AS T2 ON T1.Id = T2.Bandmate WHERE T2.StagePosition = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the asset id, details, make and model for every asset.",
        "gold_parse": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "query": "SELECT asset_id , asset_details , other_asset_details FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all of Alice's friends of friends?",
        "gold_parse": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?",
        "gold_parse": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
        "query": "SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_last_name = value AND T2.staff_first_name = value INTERSECT SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of rooms with king bed for each decor type.",
        "gold_parse": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "query": "SELECT Count ( * ) , bedType FROM Rooms GROUP BY bedType",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the famous titles of the artist called \"Triumfall\".",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "query": "SELECT T2.Employee_Name , T1.Document_Name FROM All_Documents AS T1 JOIN Employees AS T2 JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID AND T3.Destroyed_by_Employee_ID = T2.Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
        "gold_parse": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "query": "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name ! = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.HIRE_DATE FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees who are managers?",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "gold_parse": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2",
        "query": "SELECT Date_of_ceremony FROM music_festival GROUP BY Music_Festival HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "List the clubs having \"Davis Steven\" as a member.",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "query": "SELECT T2.ClubName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T1.Fname = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of the employees who don't authorize destruction for any document.",
        "gold_parse": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T1.Employee_ID FROM Employees AS T1 EXCEPT SELECT T2.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed AS T2",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees ORDER BY SALARY Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of all males in order of their age.",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "query": "SELECT name , age FROM Person ORDER BY gender Asc",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all friends who are from New York?",
        "gold_parse": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "query": "SELECT name FROM Person WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the full names of faculties who are members of department with department number 520.",
        "gold_parse": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "query": "SELECT T1.Fname , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of the 3 instructors who teach the most courses?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT Fname , Lname FROM Faculty GROUP BY Rank , Lname ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the song in the volume that has spent the most weeks on top?",
        "gold_parse": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "query": "SELECT T2.Volume FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume ORDER BY T1.Weeks_on_Top Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many members of \"Bootup Baltimore\" are older than 18?",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND Age > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician that have produced the most songs?",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of the person who has no student friends.",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "query": "SELECT name FROM Person EXCEPT SELECT name FROM Person",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and cities of employees who have the letter Z in their first names?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE FIRST_NAME LIKE value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the number of clubs where \"Tracy Kim\" is a member.",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.SALARY FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "How many distinct artists have volumes?",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "query": "SELECT Count ( DISTINCT Artist ) FROM artist",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "when is the hire date for those employees whose first name does not containing the letter M?",
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT HIRE_DATE FROM employees WHERE FIRST_NAME ! = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the names of departments that have at least one employee.",
        "gold_parse": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "query": "SELECT DEPARTMENT_NAME FROM departments GROUP BY DEPARTMENT_NAME HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "gold_parse": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
        "query": "SELECT T1.log_entry_description FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many documents have document type code CV or BK?",
        "gold_parse": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
        "query": "SELECT Count ( * ) FROM All_Documents WHERE Document_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the rooms of faculties with rank professor who live in building NEB.",
        "gold_parse": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.Room FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Rank = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?",
        "gold_parse": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
        "query": "SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = value AND T2.staff_first_name = value INTERSECT SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "what is the GDP of the city with the largest population.",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "gold_parse": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "query": "SELECT Industry FROM Companies ORDER BY Industry Desc",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the ids for documents that have the budget description 'Government'.",
        "gold_parse": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "gold_parse": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "query": "SELECT maintenance_contract_company_id , Count ( * ) FROM Maintenance_Contracts GROUP BY maintenance_contract_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
        "gold_parse": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
        "query": "SELECT EMAIL FROM employees WHERE SALARY > = value AND SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me the temperature of Shanghai in January.",
        "gold_parse": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.City = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value INTERSECT SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > value GROUP BY T2.friend HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the artist who sang the most songs?",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the song with the most vocals?",
        "gold_parse": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Title FROM Songs GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are all the employee ids and the names of the countries in which they work?",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT COUNTRY_ID , COUNTRY_NAME FROM countries",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show the authors of submissions and the acceptance results of their submissions.",
        "gold_parse": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",
        "query": "SELECT Author , Scores FROM submission",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the document ids for the budget type code 'SF'?",
        "gold_parse": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "gold_parse": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_end_date Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE LAST_NAME LIKE value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show ids for all documents with budget types described as 'Government'.",
        "gold_parse": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "query": "SELECT Venue FROM match WHERE Competition = value AND Score = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many courses have more than 2 credits?",
        "gold_parse": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Please list the countries and years of film market estimations.",
        "gold_parse": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
        "query": "SELECT T2.Country , T3.Year FROM film AS T1 JOIN market AS T2 JOIN film_market_estimation AS T3 ON T1.Film_ID = T3.Film_ID AND T3.Market_ID = T2.Market_ID AND T1.Film_ID = T3.Film_ID WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
        "gold_parse": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"",
        "query": "SELECT T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code WHERE T1.Location_Name = value AND T1.Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different songs have shared vocals?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "query": "SELECT Count ( DISTINCT Title ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "How many distinct artists do the volumes associate to?",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "query": "SELECT Count ( DISTINCT Artist ) FROM artist",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "List venues of all matches in the order of their dates starting from the most recent one.",
        "gold_parse": "SELECT venue FROM MATCH ORDER BY date DESC",
        "query": "SELECT Host_City FROM hosting_city ORDER BY Year Desc",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "query": "SELECT Project_ID , Project_Details FROM Projects GROUP BY Project_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value AND T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "gold_parse": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
        "query": "SELECT first_name , last_name FROM Maintenance_Engineers EXCEPT SELECT first_name , last_name FROM Maintenance_Engineers",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "gold_parse": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "query": "SELECT name , Count ( * ) FROM Companies GROUP BY Industry",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the first and last names of people who payed more than the rooms' base prices.",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the number of employees we have.",
        "gold_parse": "SELECT count(*) FROM Employees",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many people are under 40 for each gender?",
        "gold_parse": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
        "query": "SELECT gender , Count ( * ) FROM Person GROUP BY gender",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the id, name and nationality of the architect who built most mills?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , nationality FROM architect GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first name of students not enrolled in any course.",
        "gold_parse": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "query": "SELECT Fname FROM Student EXCEPT SELECT Fname FROM Student",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the day Number and date of all the documents?",
        "gold_parse": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "query": "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Show the name of the building that has the most company offices.",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT name FROM buildings GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids for jobs done more than once for a period of more than 300 days?",
        "gold_parse": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "query": "SELECT MIN_SALARY FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the department ids, full names, and salaries for employees who make the most in their departments?",
        "gold_parse": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "query": "SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME FROM employees GROUP BY EMPLOYEE_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "gold_parse": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80",
        "query": "SELECT DISTINCT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T2.length_feet > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the names of the songs without a lead vocal?",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Count the number of submissions.",
        "gold_parse": "SELECT count(*) FROM submission",
        "query": "SELECT Count ( * ) FROM workshop",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the name of the room that can accommodate the most people?",
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1",
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Adults Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the total number of rooms available in this inn?",
        "gold_parse": "SELECT count(*) FROM Rooms",
        "query": "SELECT Sum ( Kids ) FROM Reservations",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "what are the employee ids and job titles for employees in department 80?",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "query": "SELECT T3.EMPLOYEE_ID , T2.JOB_TITLE FROM departments AS T1 JOIN jobs AS T2 JOIN employees AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID AND T3.JOB_ID = T2.JOB_ID AND T1.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the songs that do not have a back vocal.",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the GDP of the city with the largest regional population.",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different instruments are used in the song \"Badlands\"?",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "gold_parse": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' )",
        "query": "SELECT Count ( * ) FROM flight WHERE Pilot ! = value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the names of scientists who are not working on the project with the highest hours.",
        "gold_parse": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "query": "SELECT T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MIN_SALARY ) FROM jobs AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
        "query": "SELECT T2.problem_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = value AND T2.date_problem_closed > value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is id of the city that hosted events in the most recent year?",
        "gold_parse": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City ORDER BY T2.Year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many members does the club \"Tennis Club\" has?",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value UNION SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Give me the name and description of the document type code RV.",
        "gold_parse": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"",
        "query": "SELECT Document_Type_Name , Document_Type_Description FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which city has hosted the most events?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID GROUP BY T2.City_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show each author and the number of workshops they submitted to.",
        "gold_parse": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
        "query": "SELECT Author , Count ( * ) FROM submission GROUP BY Author",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
        "query": "SELECT DISTINCT T1.name , T1.nationality FROM architect AS T1 WHERE T1.id NOT IN ( SELECT T2.architect_id FROM mill AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value AND T1.LAST_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes with at least 3 documents.",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have a shared vocal?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "query": "SELECT Count ( * ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
        "query": "SELECT T2.problem_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value AND T1.staff_last_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "List all statement ids and statement details.",
        "gold_parse": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
        "query": "SELECT Document_ID , Document_Description FROM Documents",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of artists who do not have any volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the first and last names of people who payed more than the rooms' base prices?",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What are all the distinct asset models?",
        "gold_parse": "SELECT DISTINCT asset_model FROM Assets",
        "query": "SELECT DISTINCT company_type FROM Third_Party_Companies",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the location code with the most documents?",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Location_Code FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the code of the document type that is most common.",
        "gold_parse": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Document_Type_Code FROM Ref_Document_Types GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the name of songs that does not have a back vocal.",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the albums in 2012.",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2012",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Count the total number of roles listed.",
        "gold_parse": "SELECT count(*) FROM ROLES",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year < = value UNION SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.Regional_Population > value OR T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job ID for those jobs that were done by two or more for more than 300 days.",
        "gold_parse": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "query": "SELECT JOB_ID FROM jobs GROUP BY MIN_SALARY HAVING Count ( * ) > = value UNION SELECT JOB_TITLE FROM jobs GROUP BY JOB_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "query": "SELECT T1.Document_Type_Name , T1.Document_Type_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
        "gold_parse": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
        "query": "SELECT Max ( T2.length_feet ) FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of every person who has a friend over 40 and under 30?",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > value INTERSECT SELECT T1.name FROM Person AS T1 WHERE T1.age < value",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores ASC",
        "query": "SELECT Author , Scores FROM submission ORDER BY Scores Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees hired before June 21, 2002?",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
        "query": "SELECT * FROM employees WHERE HIRE_DATE BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the issue date of the volume that has spent the fewest weeks on top.",
        "gold_parse": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
        "query": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Hom many musicians performed in the song \"Flash\"?",
        "gold_parse": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "query": "SELECT Venue FROM match WHERE Score = value AND Competition = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the job ID for those jobs which average salary is above 8000.",
        "gold_parse": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "gold_parse": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Rank = value AND Building = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the department names and how many employees work in each of them?",
        "gold_parse": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
        "query": "SELECT T1.DEPARTMENT_NAME , Count ( * ) FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the code of each location and the number of documents in that location?",
        "gold_parse": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "query": "SELECT Location_Code , Count ( * ) FROM Ref_Locations GROUP BY Location_Code",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted the most events.",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID GROUP BY T2.City_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many people in total can stay in the modern rooms of this inn?",
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.bedType = value",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show the authors who have submissions to more than one workshop.",
        "gold_parse": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
        "query": "SELECT Author FROM submission GROUP BY Author HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the phones for departments in room 268.",
        "gold_parse": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "query": "SELECT DName FROM Department WHERE Building = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted some events in the most recent year. What is the id of this city?",
        "gold_parse": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City ORDER BY T2.Year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "query": "SELECT MAX_SALARY , MIN_SALARY FROM jobs",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show ids for all documents in type CV without expense budgets.",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "query": "SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T3.Document_ID FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T1.Document_ID = T3.Document_ID WHERE T2.Document_Type_Name = value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What is the school color of the school with the largest enrollment?",
        "gold_parse": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
        "query": "SELECT T2.Colors FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID ORDER BY T1.Enrollment Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
        "gold_parse": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'",
        "query": "SELECT T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.name = value INTERSECT SELECT T3.name FROM airport AS T1 JOIN operate_company AS T3 JOIN flight AS T2 ON T1.id = T2.airport_id AND T2.company_id = T3.id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Which team has the oldest player?",
        "gold_parse": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
        "query": "SELECT Team FROM player ORDER BY Age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
        "query": "SELECT T3.problem_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id JOIN Problems AS T3 ON T1.problem_id = T3.problem_id WHERE T2.staff_first_name = value AND T1.log_entry_date > value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the building that the instructor who teaches the greatest number of courses lives in.",
        "gold_parse": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Building FROM Faculty GROUP BY Building ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "query": "SELECT Denomination FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of statements.",
        "gold_parse": "SELECT count(*) FROM Statements",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many employees do we have?",
        "gold_parse": "SELECT count(*) FROM Employees",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "How many problems are there for product voluptatem?",
        "gold_parse": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"",
        "query": "SELECT Count ( * ) FROM Product WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Which schools have more than 1 player? Give me the school locations.",
        "gold_parse": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "query": "SELECT Location FROM school GROUP BY Location HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "What are the names of the clubs that have \"Davis Steven\" as a member?",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "query": "SELECT T2.ClubName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T1.Fname = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes and the number of documents in each location.",
        "gold_parse": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "query": "SELECT T1.Location_Code , Count ( * ) FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T2.Location_Code",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names and ages of every person who is a friend of both Dan and Alice?",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "query": "SELECT name , age FROM Person WHERE job = value INTERSECT SELECT name , age FROM Person WHERE job = value",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "List the name and assets of each company in ascending order of company name.",
        "gold_parse": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "query": "SELECT name , Industry FROM Companies ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.",
        "gold_parse": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"",
        "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Title = value",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "List the name of film studio that have the most number of films.",
        "gold_parse": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Title FROM film GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the locations of schools that have more than 1 player.",
        "gold_parse": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "query": "SELECT Location FROM school GROUP BY Location HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Show the names of the buildings that have more than one company offices.",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "query": "SELECT name FROM buildings GROUP BY name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who performed the song named \"Badlands\"? Show the first name and the last name.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find Alice's friends of friends.",
        "gold_parse": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "query": "SELECT friend FROM PersonFriend",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return the full names and salaries for employees with first names that end with the letter m.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value AND T1.Regional_Population < value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the SSN and name of scientists who are assigned to the project with the longest hours.",
        "gold_parse": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "query": "SELECT T1.Name , T2.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "gold_parse": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
        "query": "SELECT DISTINCT staff_first_name , staff_last_name FROM Staff WHERE staff_id = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and salaries for any employees earning less than 6000?",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "query": "SELECT name FROM Person WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value OR T1.GDP < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "gold_parse": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "query": "SELECT EMPLOYEE_ID , HIRE_DATE FROM employees WHERE SALARY = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Count the number of all the calendar items.",
        "gold_parse": "SELECT count(*) FROM Ref_calendar",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "query": "SELECT EMPLOYEE_ID , LAST_NAME FROM employees WHERE FIRST_NAME LIKE value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location name and code with the least documents.",
        "gold_parse": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT Location_Name , Location_Code FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the different instruments listed in the database?",
        "gold_parse": "SELECT DISTINCT instrument FROM Instruments",
        "query": "SELECT DISTINCT Type FROM Vocals",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have lower temperature in March than in July and have been once host cities?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who performed the song named \"Le Pop\"?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "query": "SELECT Lastname FROM Band WHERE Firstname = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?",
        "gold_parse": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT name , age , city FROM Person ORDER BY age Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many type of jobs do they have?",
        "gold_parse": "SELECT count(DISTINCT job) FROM Person",
        "query": "SELECT Count ( * ) FROM Person",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.",
        "gold_parse": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
        "query": "SELECT T1.Document_Date FROM Documents AS T1 WHERE T1.Document_Type_Code = value INTERSECT SELECT T2.Document_Details FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "query": "SELECT City , Hanyu_Pinyin FROM city ORDER BY GDP Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location code, the starting date and ending data in that location for all the documents.",
        "gold_parse": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
        "query": "SELECT T2.Location_Code , T2.Date_in_Location_From , T3.Actual_Destruction_Date FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T2.Document_ID = T1.Document_ID JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the name of the department with the most students minoring in it?",
        "gold_parse": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO GROUP BY T1.Major ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents have expenses?",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Artist = value OR Artist = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find employee with ID and name of the country presently where (s)he is working.",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Which song has the most vocals?",
        "gold_parse": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Title FROM Songs GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What are the GDP and population of the city that already served as a host more than once?",
        "gold_parse": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "query": "SELECT GDP , Regional_Population FROM city GROUP BY City HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID AND T1.StuID = T3.StuID WHERE T2.ClubName = value AND T3.Position = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "query": "SELECT T3.Statement_ID , T1.Document_Description , T3.Account_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What the full names, ids of each employee and the name of the country they are in?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?",
        "gold_parse": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
        "query": "SELECT Document_Name , Document_Date FROM Documents WHERE Document_Description = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the least popular kind of decor?",
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1",
        "query": "SELECT bedType FROM Rooms GROUP BY bedType ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "gold_parse": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "query": "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many budget types do we have?",
        "gold_parse": "SELECT count(*) FROM Ref_budget_codes",
        "query": "SELECT Count ( DISTINCT Budget_Type_Code ) FROM Documents_with_Expenses",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "list the name, job title of all people ordered by their names.",
        "gold_parse": "SELECT name ,  job FROM Person ORDER BY name",
        "query": "SELECT name , job , city FROM Person ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many people have membership in the club \"Pen and Paper Gaming\"?",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value AND ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "query": "SELECT T2.Employee_Name , T1.Document_Name FROM All_Documents AS T1 JOIN Employees AS T2 JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID AND T3.Destroyed_by_Employee_ID = T2.Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the name and code of the location with the smallest number of documents?",
        "gold_parse": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.Location_Name , T1.Location_Description FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T2.Location_Code ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT T2.FIRST_NAME , T2.HIRE_DATE , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE ! = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the total number of people who have no friends living in Austin?",
        "gold_parse": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
        "query": "SELECT Count ( * ) FROM Person WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the songs in volumes associated with the artist aged 32 or older?",
        "gold_parse": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
        "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age = value OR T1.Age = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "gold_parse": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.part_fault_id , T1.skill_description , T2.part_id FROM Skills AS T1 JOIN Part_Faults AS T2 JOIN Skills_Required_To_Fix AS T3 ON T1.skill_id = T3.skill_id AND T3.part_fault_id = T2.part_fault_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Which person whose friends have the oldest average age?",
        "gold_parse": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
        "query": "SELECT name FROM Person ORDER BY age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "query": "SELECT Count ( * ) , Project_ID FROM Documents WHERE Document_Type_Code = value GROUP BY Document_ID",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What is the name of teh studio that created the most films?",
        "gold_parse": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Title FROM film GROUP BY Studio ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Please show different denominations and the corresponding number of schools.",
        "gold_parse": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination",
        "query": "SELECT Boys_or_Girls , Count ( * ) FROM school GROUP BY School_ID",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "For how many clubs is \"Tracy Kim\" a member?",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the account details with the greatest value, as well as those that include the character 5.",
        "gold_parse": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "query": "SELECT Account_Details , Account_ID FROM Accounts GROUP BY Account_Details ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT Account_Details FROM Accounts GROUP BY Account_Details ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many students have had at least one \"B\" grade?",
        "gold_parse": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs does \"Linda Smith\" belong to?",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the employee ids and the number of documents destroyed by each employee.",
        "gold_parse": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "query": "SELECT Destruction_Authorised_by_Employee_ID , Count ( DISTINCT Document_ID ) FROM Documents_to_be_Destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "gold_parse": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "query": "SELECT name FROM buildings WHERE Status = value ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the log id and entry description of each problem?",
        "gold_parse": "SELECT problem_log_id ,  log_entry_description FROM problem_log",
        "query": "SELECT T1.problem_log_id , T2.problem_description FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "gold_parse": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "query": "SELECT Music_Festival FROM music_festival WHERE Category = value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "gold_parse": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200",
        "query": "SELECT DISTINCT T1.Type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id WHERE T2.Velocity < = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "gold_parse": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "query": "SELECT T2.Document_Description , T2.Document_Name FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID WHERE T1.Project_Details = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many bands are there?",
        "gold_parse": "SELECT count(*) FROM Band",
        "query": "SELECT Count ( * ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Give the maximum and minimum weeks on top across all volumes.",
        "gold_parse": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",
        "query": "SELECT Max ( Age ) , Min ( Age ) FROM artist",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY basePrice",
        "query": "SELECT roomName FROM Rooms ORDER BY basePrice Desc",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many instruments does the song \"Le Pop\" use?",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many instrument does the musician with last name \"Heilo\" use?",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
        "query": "SELECT Count ( * ) FROM Band WHERE Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "gold_parse": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year < value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List all every engineer's first name, last name, details and coresponding skill description.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "query": "SELECT T2.first_name , T2.last_name , T1.skill_description FROM Skills AS T1 JOIN Maintenance_Engineers AS T2 JOIN Engineer_Skills AS T3 ON T1.skill_id = T3.skill_id AND T3.engineer_id = T2.engineer_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
        "gold_parse": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
        "query": "SELECT T1.problem_log_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value OR T2.staff_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the three products that have the most problems?s",
        "gold_parse": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs does \"Linda Smith\" have membership for?",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are department ids for departments with managers managing more than 3 employees?",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query": "SELECT DEPARTMENT_ID FROM employees GROUP BY DEPARTMENT_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the name of courses that have at least five enrollments?",
        "gold_parse": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "query": "SELECT CName FROM Course GROUP BY CID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the average salary of employees who have a commission percentage that is not null?",
        "gold_parse": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "query": "SELECT Avg ( T1.SALARY ) FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have a lead vocal?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names of employees who with in department 70 or 90?",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs does the student named \"Eric Tai\" belong to?",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee ID for each employee and the date on which he ended his previous job.",
        "gold_parse": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "query": "SELECT EMPLOYEE_ID , LAST_NAME FROM employees ORDER BY SALARY Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Count the number of distinct artists who have volumes.",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "query": "SELECT Count ( DISTINCT Artist ) FROM artist",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the name of the department that has no students minored in?",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "query": "SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T1.Major = value EXCEPT SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T1.Major = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What kind of decor has the least number of reservations?",
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1",
        "query": "SELECT decor FROM Rooms GROUP BY decor ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.HIRE_DATE FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY ! = value",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Which authors have submitted to more than one workshop?",
        "gold_parse": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
        "query": "SELECT Author FROM submission GROUP BY Author HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the names of the songs that do not have back vocals?",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
        "gold_parse": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "query": "SELECT Date , Venue FROM workshop ORDER BY Date Asc",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "gold_parse": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT product_details , product_name FROM Product GROUP BY product_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
        "query": "SELECT name , gender , gender FROM architect GROUP BY id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "gold_parse": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "query": "SELECT Studio FROM film WHERE Director = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of departments either in division AS, or in division EN and in building NEB?",
        "gold_parse": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "query": "SELECT DName FROM Department WHERE Division = value AND Building = value INTERSECT SELECT DName FROM Department WHERE Division = value AND Building = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query": "SELECT DISTINCT T1.DEPARTMENT_ID FROM departments AS T1 JOIN job_history AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( DISTINCT T2.EMPLOYEE_ID ) > = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "gold_parse": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "query": "SELECT City FROM city WHERE Regional_Population > value OR Regional_Population > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs appear in studio albums?",
        "gold_parse": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "query": "SELECT Count ( * ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
        "gold_parse": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'",
        "query": "SELECT T1.Role_Name , T2.Role_Code , T2.Date_of_Birth FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T2.Employee_Name = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Firstname = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id",
        "query": "SELECT staff_name , staff_id FROM Staff EXCEPT SELECT staff_name , staff_id FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MIN_SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?",
        "gold_parse": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "gold_parse": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "query": "SELECT JOB_ID FROM jobs GROUP BY JOB_ID HAVING Avg ( MIN_SALARY ) > value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs are there?",
        "gold_parse": "SELECT count(*) FROM club",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first names of students whose first names contain letter \"a\".",
        "gold_parse": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "query": "SELECT DISTINCT Fname FROM Student WHERE LName LIKE value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "gold_parse": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "query": "SELECT DISTINCT skill_description , skill_description FROM Skills",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee ID and job name for all those jobs in department 80.",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "query": "SELECT T2.EMPLOYEE_ID , T1.JOB_TITLE FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the decor of room Recluse and defiance?",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "query": "SELECT decor FROM Rooms WHERE decor = value INTERSECT SELECT decor FROM Rooms WHERE bedType = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the average gradepoint for students with the last name Smith?",
        "gold_parse": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "query": "SELECT Avg ( Age ) FROM Student WHERE LName = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of people whose age is greater than any engineer sorted by their age.",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "query": "SELECT name FROM Person WHERE age > value ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return the full names and salaries of employees with null commissions.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE COMMISSION_PCT = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?",
        "gold_parse": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2",
        "query": "SELECT T1.Famous_Title FROM artist AS T1 EXCEPT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the budget type code that is most common among documents with expenses.",
        "gold_parse": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the name of route that has the highest number of deliveries.",
        "gold_parse": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT route_name FROM Delivery_Routes GROUP BY route_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author who achieved the highest score in a submission.",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
        "query": "SELECT Author FROM submission ORDER BY Scores Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How old is the youngest person for each job?",
        "gold_parse": "SELECT min(age) ,  job FROM Person GROUP BY job",
        "query": "SELECT job FROM Person ORDER BY age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "query": "SELECT T1.Document_Type_Code , T1.Document_Type_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the type name, type description, and date of creation for each document.",
        "gold_parse": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "query": "SELECT T2.Document_Name , T1.Document_Type_Description , T2.Document_Date FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different instruments are used in the song \"Le Pop\"?",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the different names of all songs without back vocals?",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "query": "SELECT DISTINCT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT DISTINCT T2.SongId FROM Tracklists AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all females who are friends with Zach?",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT Employee_ID FROM Employees",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and department ids for the lowest paid employees across all departments.",
        "gold_parse": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees ORDER BY SALARY Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the maximum and minimum gradepoints for students living in NYC?",
        "gold_parse": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "query": "SELECT Max ( Age ) , Min ( Age ) FROM Student WHERE city_code = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
        "gold_parse": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2",
        "query": "SELECT Famous_Title FROM artist GROUP BY Famous_Title HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the age of the doctor named Zach?",
        "gold_parse": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
        "query": "SELECT age FROM Person WHERE name = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many fault status codes are recorded in the fault log parts table?",
        "gold_parse": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
        "query": "SELECT Count ( * ) FROM Engineer_Visits WHERE fault_status = value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "query": "SELECT Count ( * ) FROM Scientists",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has friends that are older than the average age? Print their friends and their ages as well",
        "gold_parse": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
        "query": "SELECT name , age FROM Person WHERE age > ( SELECT Avg ( age ) FROM Person )",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids",
        "query": "SELECT Max ( Adults ) , Sum ( Kids ) FROM Reservations",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How old is the doctor named Zach?",
        "gold_parse": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
        "query": "SELECT name FROM Person WHERE job = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the songs in volumes that have resulted in a nomination at music festivals?",
        "gold_parse": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"",
        "query": "SELECT T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume WHERE T2.Category = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the number of members of club \"Pen and Paper Gaming\".",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value AND ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many document types are there?",
        "gold_parse": "SELECT count(*) FROM Ref_document_types",
        "query": "SELECT Count ( DISTINCT Document_Type_Code ) FROM All_Documents",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of students minoring in department 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the SSN and names of scientists working on the project with the most hours?",
        "gold_parse": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "query": "SELECT T1.Name , T2.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE JOB_ID = value AND SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "List the state names and the number of customers living in each state.",
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "query": "SELECT state_province_county , Count ( * ) FROM Addresses GROUP BY state_province_county",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name and age of every male? Order the results by age.",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "query": "SELECT name , age FROM Person ORDER BY age Asc",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "gold_parse": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "query": "SELECT EMPLOYEE_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the project id and detail for the project with at least two documents?",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "query": "SELECT Project_ID , Project_Details FROM Projects GROUP BY Project_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?",
        "gold_parse": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID JOIN Gradeconversion AS T3 ON T2.Grade = T3.lettergrade WHERE T1.Major = value OR T3.gradepoint > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the number of followers for each user.",
        "gold_parse": "SELECT count(*) FROM follows GROUP BY f1",
        "query": "SELECT Sum ( followers ) , name FROM user_profiles GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id of the department with the least number of staff?",
        "gold_parse": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "query": "SELECT DISTINCT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T1.Name Asc",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show all flight number from Los Angeles.",
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "query": "SELECT Count ( * ) FROM flight WHERE destination = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of the shortest flights?",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "query": "SELECT distance FROM flight ORDER BY distance Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "How many distinct governors are there?",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "query": "SELECT Count ( DISTINCT Comptroller ) FROM party",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the distinct position of players from college UCLA or Duke.",
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "query": "SELECT DISTINCT T2.Position FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team WHERE T1.Name = value OR T1.Name = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many stores are there?",
        "gold_parse": "SELECT count(*) FROM store",
        "query": "SELECT Count ( * ) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of patients who are not using the medication of Procrastin-X.",
        "gold_parse": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "query": "SELECT Name FROM Patient EXCEPT SELECT Name FROM Patient",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "gold_parse": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY product_id HAVING Avg ( total_value_purchased ) > value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "query": "SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value INTERSECT SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which countries have at least 3 cities?",
        "gold_parse": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "query": "SELECT country FROM country GROUP BY country HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "How many leagues are there in England?",
        "gold_parse": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
        "query": "SELECT Count ( * ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of the two department store chains with the largest number of department stores?",
        "gold_parse": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "query": "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the census rankings of cities that do not have the status \"Village\"?",
        "gold_parse": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
        "query": "SELECT Population FROM city WHERE Status ! = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the id and name of the employee with maximum salary.",
        "gold_parse": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
        "query": "SELECT eid , name FROM employee",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
        "gold_parse": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "How many department stores does the store chain South have?",
        "gold_parse": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "gold_parse": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "query": "SELECT order_id , customer_id , customer_id FROM Customer_Orders WHERE order_status_code = value ORDER BY order_date Asc",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the number of users who posted some tweets.",
        "gold_parse": "SELECT count(DISTINCT UID) FROM tweets",
        "query": "SELECT Count ( * ) FROM follows",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Return the name of each physician and the number of patients he or she treats.",
        "gold_parse": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "query": "SELECT Name , Count ( * ) FROM Physician GROUP BY Name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Position = value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Return the names of wrestlers with fewer than 100 days held.",
        "gold_parse": "SELECT Name FROM wrestler WHERE Days_held  <  100",
        "query": "SELECT Name FROM wrestler WHERE Days_held = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Tell me the distinct block codes where some rooms are available.",
        "gold_parse": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "query": "SELECT DISTINCT BlockCode FROM Room",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which channels are not owned by CCTV? Give me the channel names.",
        "gold_parse": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
        "query": "SELECT Name FROM channel EXCEPT SELECT Name FROM channel",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which nurses are in charge of patients undergoing treatments?",
        "gold_parse": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T1.Name = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "gold_parse": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
        "query": "SELECT product_id , product_name FROM Products WHERE product_price BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "gold_parse": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "query": "SELECT Avg ( Num_Employees ) FROM department WHERE Ranking < value OR Ranking < value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "gold_parse": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "query": "SELECT name FROM employee EXCEPT SELECT name FROM employee",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of items store 1 has in stock.",
        "gold_parse": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "query": "SELECT Count ( * ) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What are the id and name of the mountains that have at least 2 photos?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
        "query": "SELECT id , name FROM mountain GROUP BY id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "gold_parse": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "query": "SELECT Position FROM player WHERE Points > value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the name and gender of the staff who was assigned in 2016.",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "query": "SELECT staff_name , staff_gender FROM Staff WHERE staff_name = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Give the product id for the product that was ordered most frequently.",
        "gold_parse": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "gold_parse": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20",
        "query": "SELECT Name FROM building WHERE Height_feet BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Find the names of schools that have more than one donator with donation amount above 8.5.",
        "gold_parse": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1",
        "query": "SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id WHERE T2.amount > value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "How many distinct delegates are from counties with population larger than 50000?",
        "gold_parse": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "query": "SELECT Count ( DISTINCT T2.Committee ) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Return the maximum and minimum number of cows across all farms.",
        "gold_parse": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "query": "SELECT Max ( Sheep_and_Goats ) , Min ( Sheep_and_Goats ) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "gold_parse": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "query": "SELECT Max ( Silver ) , Min ( Gold ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Return the different statuses of cities, ascending by frequency.",
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "query": "SELECT DISTINCT Status FROM city ORDER BY Area_km_2 Asc",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the delegates and the names of the party they belong to.",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "query": "SELECT Governor , Party FROM party",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "gold_parse": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "query": "SELECT T1.Comptroller FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = value OR T2.Committee = value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Return the text of tweets about the topic 'intern'.",
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "query": "SELECT text FROM tweets WHERE text = value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?",
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "query": "SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value INTERSECT SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are names of patients who made an appointment?",
        "gold_parse": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "query": "SELECT DISTINCT Name FROM Physician",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the number of tweets in record.",
        "gold_parse": "SELECT count(*) FROM tweets",
        "query": "SELECT Count ( * ) FROM follows",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the delegate from district 1 in election.",
        "gold_parse": "SELECT Delegate FROM election WHERE District  =  1",
        "query": "SELECT Delegate FROM election WHERE Committee = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the most popular first name of the actors?",
        "gold_parse": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.first_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the full name of the customer who made the first rental.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "query": "SELECT first_name , last_name FROM customer ORDER BY first_name Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "what is the name and position of the head whose department has least number of employees?",
        "gold_parse": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T2.Name , T1.Position FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T1.Name = value INTERSECT SELECT T2.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T1.Name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircraft with at least two flights.",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "query": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average price for flights from LA to Honolulu?",
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT Avg ( price ) FROM flight WHERE destination = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = value OR T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "gold_parse": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "query": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the names of the physicians who prescribe medication Thesisin?",
        "gold_parse": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show institution names along with the number of proteins for each institution.",
        "gold_parse": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id",
        "query": "SELECT Institution , Count ( * ) FROM Institution GROUP BY Institution",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT catalog_name FROM Catalogs GROUP BY catalog_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each party, return the name of the party and the number of delegates from that party.",
        "gold_parse": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "query": "SELECT Party , Count ( * ) FROM party GROUP BY Party",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "How many distinct programs are broadcast at \"Night\" time?",
        "gold_parse": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
        "query": "SELECT Count ( * ) FROM channel WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each county, find the name of the county and the number of delegates from that county.",
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "query": "SELECT County_name , Count ( * ) FROM county GROUP BY County_name",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Please show the most common reigns of wrestlers.",
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.Event FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T2.Wrestler_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of cities in Australia.",
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "query": "SELECT Count ( * ) FROM country WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the names of all the clubs starting with the oldest?",
        "gold_parse": "SELECT name FROM club ORDER BY Start_year ASC",
        "query": "SELECT name FROM club ORDER BY Start_year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What is the time of elimination for the wrestler with the most days held?",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "query": "SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the name of staff who has been assigned multiple jobs.",
        "gold_parse": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "query": "SELECT staff_name FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What is the name of the wrestler with the fewest days held?",
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "query": "SELECT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T2.Wrestler_ID ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Who are the owners of the programs that broadcast both in the morning and at night?",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "query": "SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID WHERE T2.Time_of_day = value INTERSECT SELECT T3.Owner FROM channel AS T3 JOIN broadcast AS T2 ON T3.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Which destination has least number of flights?",
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "gold_parse": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "query": "SELECT attribute_name , attribute_id FROM Attribute_Definitions WHERE attribute_data_type = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Return all the information for each election record.",
        "gold_parse": "SELECT * FROM election",
        "query": "SELECT * FROM county",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physician was trained in the procedure that costs the most.",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "query": "SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team GROUP BY T2.College HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients stay in room 112?",
        "gold_parse": "SELECT count(patient) FROM stay WHERE room  =  112",
        "query": "SELECT Count ( * ) FROM Appointment WHERE ExaminationRoom = value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".",
        "gold_parse": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')",
        "query": "SELECT name FROM user_profiles WHERE followers > ( SELECT Max ( followers ) FROM user_profiles WHERE name = value )",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the genre name of the film HUNGER ROOF?",
        "gold_parse": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "query": "SELECT name FROM category",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
        "gold_parse": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
        "query": "SELECT T1.Name , T1.Phone FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient GROUP BY T2.Physician HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Count the number of distinct governors.",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "query": "SELECT Count ( DISTINCT Comptroller ) FROM party",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "query": "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of all the catalog entries.",
        "gold_parse": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "query": "SELECT catalog_name FROM Catalogs",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
        "gold_parse": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "query": "SELECT Party FROM party WHERE Comptroller = value OR Comptroller = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the names of catalog entries with level number 8?",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "gold_parse": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000",
        "query": "SELECT Type FROM Institution WHERE Enrollment > value INTERSECT SELECT Type FROM Institution WHERE Enrollment < value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the physicians' employee ids together with their primary affiliation departments' ids.",
        "gold_parse": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "query": "SELECT EmployeeID FROM Nurse",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the people that have been governor the most times.",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.Attorney_General FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party GROUP BY T2.District ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T1.uid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id of the product that was ordered the most often?",
        "gold_parse": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "gold_parse": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "query": "SELECT T1.Name , T2.born_state , T1.Num_Employees FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID ORDER BY T2.age Asc",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the name and primarily affiliated department name of each physician?",
        "gold_parse": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "query": "SELECT T2.Name , T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "query": "SELECT price , distance FROM flight ORDER BY price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Tell me the employee id of the head of the department with the least employees.",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Prescribes AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of stores.",
        "gold_parse": "SELECT count(*) FROM store",
        "query": "SELECT Count ( * ) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "query": "SELECT Avg ( Silver ) , Avg ( Gold ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the names of products that were bought by at least two distinct customers.",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "query": "SELECT supplier_name FROM Suppliers GROUP BY supplier_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses are not used in taking any photos?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "query": "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "performance_attendance",
        "question": "How many performances are there?",
        "gold_parse": "SELECT count(*) FROM performance",
        "query": "SELECT Count ( * ) FROM member",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT * FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "query": "SELECT DISTINCT T2.Season , T1.Name , T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "query": "SELECT aid , name FROM aircraft",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the most popular full name of the actors?",
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.first_name , T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of all flights coming from Los Angeles?",
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "query": "SELECT Count ( * ) FROM flight WHERE destination = value",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
        "gold_parse": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
        "query": "SELECT name , Count ( * ) FROM photos GROUP BY camera_lens_id ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
        "query": "SELECT T1.Party FROM party AS T1 WHERE T1.Comptroller = value INTERSECT SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > value OR length < value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients' prescriptions are made by physician John Dorian?",
        "gold_parse": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "query": "SELECT Count ( * ) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = value AND T1.Name = value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the maximum and total number of followers of all users.",
        "gold_parse": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
        "query": "SELECT Max ( followers ) , Avg ( followers ) FROM user_profiles",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which program was launched most recently? Return the program name.",
        "gold_parse": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "How many players are from each country?",
        "gold_parse": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "query": "SELECT Country_name , Count ( * ) FROM country GROUP BY Country_name",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the delegates who are from counties with population below 100000.",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official languages of the countries of players from Maryland or Duke college?",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the count of distinct employees with certificates?",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "List the camera lens names containing substring \"Digital\".",
        "gold_parse": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
        "query": "SELECT name FROM photos WHERE name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
        "query": "SELECT T1.Name , T1.Position FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the level name of the cheapest catalog (in USD)?",
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "query": "SELECT height FROM Catalog_Contents ORDER BY price_in_dollars Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are in charge of more than one patient? Give me their names.",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "How many users are there?",
        "gold_parse": "SELECT count(*) FROM user_profiles",
        "query": "SELECT Count ( * ) FROM follows",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physician who prescribed the highest dose?",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Registered Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "query": "SELECT Lieutenant_Governor FROM party WHERE Party = value AND Comptroller = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Give the ids and names of products with price lower than 600 or higher than 900.",
        "gold_parse": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
        "query": "SELECT product_id , product_name FROM Products WHERE product_price BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "gold_parse": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "query": "SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id HAVING Avg ( T1.product_price ) > value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "gold_parse": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "query": "SELECT donator_name FROM endowment WHERE amount < value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the highest rental rate? And what is the rate?",
        "gold_parse": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "query": "SELECT T1.rating , Max ( T1.rental_rate ) FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "Show codes and fates of missions, and names of ships involved.",
        "gold_parse": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "query": "SELECT T1.Code , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "query": "SELECT Governor FROM party WHERE Party = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Total_Horses > value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Where is store 1 located?",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "query": "SELECT district FROM address WHERE address = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "query": "SELECT Pigs , Sum ( Sheep_and_Goats ) FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all country and league names.",
        "gold_parse": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
        "query": "SELECT name , name FROM Country",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many items in inventory does store 1 have?",
        "gold_parse": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "query": "SELECT Count ( * ) FROM payment WHERE amount = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?",
        "gold_parse": "SELECT player FROM match_season ORDER BY College ASC",
        "query": "SELECT T3.Player FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team ORDER BY T2.Season Asc",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the names of counties that have at least two delegates.",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the dates on which more than one revisions were made.",
        "gold_parse": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "query": "SELECT date_of_publication FROM Catalogs GROUP BY date_of_publication HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the staff ids and genders for any staff with the title Department Manager.",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"",
        "query": "SELECT T1.staff_id , T1.staff_gender FROM Staff AS T1 JOIN Departments AS T2 JOIN Staff_Department_Assignments AS T3 ON T1.staff_id = T3.staff_id AND T3.department_id = T2.department_id WHERE T2.department_name = value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the total percentage share of all channels owned by CCTV.",
        "gold_parse": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'",
        "query": "SELECT Sum ( Share_in_percent ) FROM channel",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the names of all colleges that have two or more players?",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
        "query": "SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team GROUP BY T2.College HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show all the distinct districts for elections.",
        "gold_parse": "SELECT DISTINCT District FROM election",
        "query": "SELECT DISTINCT Committee FROM election",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "When did the first payment happen?",
        "gold_parse": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "query": "SELECT payment_date FROM payment",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the times of elimination for wrestlers with over 50 days held?",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
        "query": "SELECT Reign FROM wrestler WHERE Days_held > value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many rooms are located for each block code?",
        "gold_parse": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "query": "SELECT BlockCode , Count ( * ) FROM Room GROUP BY BlockCode",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = value",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What are the names of the cameras that have taken picture of the most mountains?",
        "gold_parse": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM photos GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of catalog entries with level number 8.",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "How many ships are there?",
        "gold_parse": "SELECT count(*) FROM ship",
        "query": "SELECT Count ( * ) FROM mission",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "gold_parse": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
        "query": "SELECT name FROM language WHERE name = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the patient who most recently stayed in room 111.",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "query": "SELECT Physician FROM Trained_In ORDER BY CertificationDate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show flight number for all flights with more than 2000 distance.",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "query": "SELECT Count ( * ) FROM aircraft WHERE distance > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average rating for right-footed players and left-footed players?",
        "gold_parse": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
        "query": "SELECT Avg ( overall_rating ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "gold_parse": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "query": "SELECT DISTINCT T1.customer_id FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_date < value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all physicians and their primary affiliated departments' names.",
        "gold_parse": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "query": "SELECT Name FROM Physician",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the name of each party and the corresponding number of delegates from that party.",
        "gold_parse": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "query": "SELECT Party , Count ( * ) FROM party GROUP BY Party",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
        "gold_parse": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "query": "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?",
        "gold_parse": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "query": "SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id WHERE T1.product_price > ( SELECT Avg ( T1.product_price ) FROM Products AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of different film ratings.",
        "gold_parse": "SELECT count(DISTINCT rating) FROM film",
        "query": "SELECT Count ( * ) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 JOIN Player AS T1 ON T2.player_fifa_api_id = T1.player_fifa_api_id WHERE T1.height < value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Count the number of patients who stayed in room 112.",
        "gold_parse": "SELECT count(patient) FROM stay WHERE room  =  112",
        "query": "SELECT Count ( * ) FROM Room WHERE RoomType = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Name = value OR T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "How many donors have endowment for school named \"Glenn\"?",
        "gold_parse": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"",
        "query": "SELECT Enrollment FROM School WHERE Mascot = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "query": "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the names of the heads who are born outside the California state?",
        "gold_parse": "SELECT name FROM head WHERE born_state != 'California'",
        "query": "SELECT T1.Name FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID WHERE T2.born_state ! = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "query": "SELECT T1.School_name , T2.total_budget_percent_budgeted , T2.Year FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "query": "SELECT Party FROM party WHERE Comptroller = value",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for a club?",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "query": "SELECT Avg ( Gold ) , Max ( Gold ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "query": "SELECT first_name , last_name , customer_id FROM customer GROUP BY customer_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?",
        "gold_parse": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "query": "SELECT * FROM Prescribes AS T1 WHERE T1.Physician = value EXCEPT SELECT T3.Name FROM Procedures AS T2 JOIN Nurse AS T3 JOIN Undergoes AS T4 ON T2.Code = T4.Procedures AND T4.AssistingNurse = T3.EmployeeID WHERE T2.Cost > value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Count the number of distinct delegates who are from counties with population above 50000.",
        "gold_parse": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "query": "SELECT Count ( DISTINCT T2.Committee ) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "gold_parse": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "query": "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the names of wrestlers and the elimination moves?",
        "gold_parse": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
        "query": "SELECT Name , Event FROM wrestler",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the maximum and minimum customer codes.",
        "gold_parse": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "query": "SELECT Max ( customer_phone ) , Min ( customer_phone ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which channels are broadcast in the morning? Give me the channel names.",
        "gold_parse": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "query": "SELECT Name FROM channel",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List the names and birthdays of the top five players in terms of potential.",
        "gold_parse": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
        "query": "SELECT player_name , birthday FROM Player GROUP BY birthday ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What are the names of players who have the best dribbling?",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)",
        "query": "SELECT player_name FROM Player ORDER BY height Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "gold_parse": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111",
        "query": "SELECT T1.Name FROM Patient AS T1 JOIN Room AS T2 JOIN Stay AS T3 ON T1.SSN = T3.Patient AND T3.Room = T2.RoomNumber WHERE T2.BlockFloor = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts do we have?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the ids of the two department store chains with the most department stores.",
        "gold_parse": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "query": "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "How many acting statuses are there?",
        "gold_parse": "SELECT count(DISTINCT temporary_acting) FROM management",
        "query": "SELECT Count ( * ) FROM department",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "gold_parse": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "query": "SELECT T1.first_name FROM customer AS T1 EXCEPT SELECT T1.first_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.return_date > value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the country names and the corresponding number of players.",
        "gold_parse": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "query": "SELECT Country_name , Count ( * ) FROM country GROUP BY Country_name",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"",
        "query": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct ages of the heads who are acting?",
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "query": "SELECT DISTINCT age FROM head",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of medication used on the patient who stays in room 111?",
        "gold_parse": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111",
        "query": "SELECT T1.Name FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient WHERE T2.ExaminationRoom = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average price for flights from Los Angeles to Honolulu.",
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT Avg ( price ) FROM flight WHERE destination = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "query": "SELECT DISTINCT Year FROM party WHERE Comptroller = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the unique block codes that have available rooms?",
        "gold_parse": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "query": "SELECT DISTINCT BlockCode FROM Room",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and genders of staff who were assigned in 2016?",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "query": "SELECT staff_name , staff_gender FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of products purchased by at least two different customers?",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "query": "SELECT DISTINCT product_name FROM Products",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the number of different programs that are broadcast during night time.",
        "gold_parse": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
        "query": "SELECT Count ( DISTINCT Program_ID ) FROM broadcast",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "List the names of editors that are not on any journal committee.",
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "query": "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = value )",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the names and ids of customers who have TN in their address.",
        "gold_parse": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "query": "SELECT customer_name , customer_id FROM Customers WHERE customer_address = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many medications are prescribed for each brand?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "query": "SELECT Count ( * ) , Brand FROM Medication GROUP BY Brand",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the full names of actors who had roles in more than 30 films?",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "query": "SELECT first_name , last_name FROM actor WHERE last_update > value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "gold_parse": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.title , T2.actor_id , T1.description FROM film AS T1 JOIN film_actor AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the names of programs whose origin is not in Beijing.",
        "gold_parse": "SELECT name FROM program WHERE origin != 'Beijing'",
        "query": "SELECT Name FROM channel WHERE Owner ! = value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List all program origins in the alphabetical order.",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "How many editors are there?",
        "gold_parse": "SELECT count(*) FROM editor",
        "query": "SELECT Count ( * ) FROM journal",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the patient who made the most recent appointment?",
        "gold_parse": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician ORDER BY T2.End Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
        "gold_parse": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Procedures AS T2 JOIN Trained_In AS T3 ON T1.EmployeeID = T3.Physician AND T3.Treatment = T2.Code WHERE T1.Name = value EXCEPT SELECT T2.Name FROM Procedures AS T2 WHERE T2.Cost > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_pounds > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the names of users who have more than one tweet.",
        "gold_parse": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "query": "SELECT name FROM user_profiles GROUP BY name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "gold_parse": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.first_name , T2.actor_id , T2.actor_id FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many employees do we have?",
        "gold_parse": "SELECT count(*) FROM Employee",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of departments that have primarily affiliated physicians.",
        "gold_parse": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "query": "SELECT DISTINCT Name FROM Department",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the number of employees?",
        "gold_parse": "SELECT count(*) FROM Employee",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "gold_parse": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
        "query": "SELECT Count ( DISTINCT T2.color ) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.Country = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of patients who have made appointments.",
        "gold_parse": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "query": "SELECT Name FROM Physician",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "How many farms are there?",
        "gold_parse": "SELECT count(*) FROM farm",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_pounds Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "gold_parse": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",
        "query": "SELECT T1.Name , T1.Height_feet FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id WHERE T2.Founded > value GROUP BY T2.Institution HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of nurses who are on call.",
        "gold_parse": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
        "query": "SELECT Name FROM Nurse",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the statuses and average populations of each city?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Find the names of channels that are not owned by CCTV.",
        "gold_parse": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
        "query": "SELECT T1.Name FROM channel AS T1 WHERE T1.Channel_ID NOT IN ( SELECT T2.Channel_ID FROM broadcast_share AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "query": "SELECT DISTINCT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.parent_entry_id > value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What place has the most flights coming from there?",
        "gold_parse": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?",
        "gold_parse": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "query": "SELECT supplier_name , supplier_phone FROM Suppliers ORDER BY supplier_name Asc",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the name of each county along with the corresponding number of delegates from that county.",
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "query": "SELECT County_name , Count ( * ) FROM county GROUP BY County_name",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "gold_parse": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "query": "SELECT T2.Time FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value OR T1.Name = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all distinct medications?",
        "gold_parse": "SELECT DISTINCT name FROM medication ORDER BY name",
        "query": "SELECT DISTINCT Name FROM Patient ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the name of the program that was launched most recently.",
        "gold_parse": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?",
        "gold_parse": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING Avg ( total_value_purchased ) > value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of patients who are not taking the medication of Procrastin-X.",
        "gold_parse": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "query": "SELECT Name FROM Patient EXCEPT SELECT Name FROM Patient",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the largest and smallest customer codes?",
        "gold_parse": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "query": "SELECT Max ( customer_phone ) , Min ( customer_phone ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the names of customers who have bought by at least three distinct products.",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "query": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the total number of clubs that have less than 10 medals in total?",
        "gold_parse": "SELECT count(*) FROM club_rank WHERE Total  <  10",
        "query": "SELECT Count ( * ) FROM club_rank WHERE Gold < value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and email for the users who have more than one follower.",
        "gold_parse": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
        "query": "SELECT name , email FROM user_profiles GROUP BY email HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are all the movies rated as R? List the titles.",
        "gold_parse": "SELECT title FROM film WHERE rating  =  'R'",
        "query": "SELECT title FROM film",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What is the list of program origins ordered alphabetically?",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the departure and arrival dates of all flights from LA to Honolulu?",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "How many different statuses do cities have?",
        "gold_parse": "SELECT count(DISTINCT Status) FROM city",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients are not using Procrastin-X as medication?",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "query": "SELECT Count ( * ) FROM Patient WHERE SSN NOT IN ( SELECT SSN FROM Patient WHERE Name = value )",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "query": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "what is the number of different channel owners?",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which patient is undergoing the most recent treatment?",
        "gold_parse": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "query": "SELECT Physician FROM Trained_In ORDER BY CertificationDate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.",
        "gold_parse": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "query": "SELECT first_name FROM customer WHERE create_date > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of all the products whose stock number starts with \"2\".",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "query": "SELECT catalog_name FROM Catalogs WHERE catalog_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "For each player, what are their name, season, and country that they belong to?",
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "query": "SELECT T2.Name , T3.Season , T1.Country_name FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id AND T1.Country_id = T3.Country",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of the nurse who has the largest number of appointments.",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "query": "SELECT Count ( * ) FROM mountain WHERE Height > value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "list all the names of programs, ordering by launch time.",
        "gold_parse": "SELECT name FROM program ORDER BY launch",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Asc",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "what are name and phone number of patients who had more than one appointment?",
        "gold_parse": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
        "query": "SELECT T1.Name , T1.Phone FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient GROUP BY T2.Physician HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Find the name of the program that is broadcast most frequently.",
        "gold_parse": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show all the information about election.",
        "gold_parse": "SELECT * FROM election",
        "query": "SELECT * FROM county",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Count the number of farms.",
        "gold_parse": "SELECT count(*) FROM farm",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "query": "SELECT T1.Owner FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = value INTERSECT SELECT T3.Owner FROM program AS T3 JOIN broadcast AS T2 ON T3.Program_ID = T2.Program_ID WHERE T2.Time_of_day = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "query": "SELECT height FROM Catalog_Contents ORDER BY price_in_pounds Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Which college have both players with position midfielder and players with position defender?",
        "gold_parse": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = value INTERSECT SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which program is broadcast most frequently? Give me the program name.",
        "gold_parse": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM channel GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List all the product names with the color description \"white\".",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the name of the customer that made the order with the largest quantity?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "query": "SELECT customer_name FROM Customers ORDER BY payment_method Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "query": "SELECT Name FROM Manufacturers EXCEPT SELECT Name FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the names and main services for train stations that have the top three total number of passengers.",
        "gold_parse": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
        "query": "SELECT Name , Main_Services FROM station GROUP BY Station_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
        "query": "SELECT DISTINCT Name FROM wine WHERE Price > ( SELECT Max ( Price ) FROM wine WHERE Winery = value )",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the number of customers who have at least one order with \"Cancelled\" status.",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the most common amenity in the dorms?",
        "gold_parse": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT amenity_name FROM Dorm_amenity GROUP BY amenity_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers have at least one order with status \"Cancelled\"?",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students participated in tryouts for each college by descennding count?",
        "gold_parse": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "query": "SELECT Sum ( T1.enr ) , T2.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName GROUP BY T2.cName",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?",
        "gold_parse": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "query": "SELECT Name , Revenue FROM Manufacturers GROUP BY Headquarter ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "gold_parse": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100",
        "query": "SELECT * FROM roller_coaster WHERE Height > value OR Height > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the color description that is most common across all products.",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code GROUP BY T2.characteristic_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name of customers who are living in Colorado?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"",
        "query": "SELECT T2.customer_name FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T1.city = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "gold_parse": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT cName , enr FROM College WHERE enr > value OR state = value",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the station name with at least two trains.",
        "gold_parse": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2",
        "query": "SELECT Name FROM station GROUP BY Station_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the county where produces the most number of wines with score higher than 90.",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?",
        "gold_parse": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "query": "SELECT Name FROM wine WHERE Year > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?",
        "gold_parse": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average prices of products for each manufacturer?",
        "gold_parse": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "query": "SELECT Avg ( Price ) , Manufacturer FROM Products GROUP BY Manufacturer",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of the tryout players who are from the college with largest size.",
        "gold_parse": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
        "query": "SELECT T2.pName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID ORDER BY T1.enr Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students whose are playing the role of goalie?",
        "gold_parse": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "query": "SELECT Count ( * ) FROM Player WHERE pName = value",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "Show the names of countries and the average speed of roller coasters from each country.",
        "gold_parse": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",
        "query": "SELECT T2.Name , Avg ( T1.Speed ) FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Country_ID",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Find the captain rank that has no captain in Third-rate ship of the line class.",
        "gold_parse": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
        "query": "SELECT Rank FROM captain EXCEPT SELECT Rank FROM captain",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the clients who do not have any booking?",
        "gold_parse": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT Customer_Name FROM Clients",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "List the names of roller coasters by ascending order of length.",
        "gold_parse": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
        "query": "SELECT Name FROM roller_coaster ORDER BY Height Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students got accepted after the tryout?",
        "gold_parse": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "query": "SELECT Count ( * ) FROM College WHERE enr > value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is all the product data, as well as  each product's manufacturer?",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "query": "SELECT Revenue , Revenue FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the payment method of the customer that has purchased the least quantity of items?",
        "gold_parse": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "List the branch name and city without any registered members.",
        "gold_parse": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "query": "SELECT Name , City FROM branch EXCEPT SELECT Name , City FROM branch",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.",
        "gold_parse": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "query": "SELECT Title , Director FROM movie WHERE Gross_worldwide > = value ORDER BY Gross_worldwide Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and training hours of players whose hours are below 1500.",
        "gold_parse": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
        "query": "SELECT T1.pName , T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS < value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of states that have some college students playing in goalie and mid positions.",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
        "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the number of distinct products Rodrick Heaney has bought so far.",
        "gold_parse": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the average hours for the students whose tryout decision is no.",
        "gold_parse": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "query": "SELECT Avg ( T1.HS ) FROM Player AS T1 WHERE T1.pID NOT IN ( SELECT T2.pID FROM Tryout AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the actual delivery dates of orders with quantity 1?",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID JOIN Invoice_Items AS T3 ON T2.Invoice_ID = T3.Invoice_ID WHERE T3.Order_Quantity = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What is the name and opening year for the branch that registered the most members in 2016?",
        "gold_parse": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.Open_year FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID GROUP BY T2.Branch_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and hours of the students whose tryout decision is yes.",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT pName , HS FROM Player",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average prices of products, grouped by manufacturer name?",
        "gold_parse": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "query": "SELECT Avg ( Price ) , Name FROM Products GROUP BY Name",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'",
        "query": "SELECT decision FROM Tryout WHERE pPos = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Where is the headquarter of the company founded by James?",
        "gold_parse": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'",
        "query": "SELECT T1.Headquarter FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the store names of drama workshop groups?",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query": "SELECT Store_Name FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are names of customers who never ordered product Latte.",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the average and maximum hours for the students whose tryout decision is yes.",
        "gold_parse": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT Avg ( HS ) , Max ( HS ) FROM Player",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the email addresses of the drama workshop groups with address in Alaska state?",
        "gold_parse": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"",
        "query": "SELECT T2.Customer_Email_Address FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many types of products have Rodrick Heaney bought in total?",
        "gold_parse": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of colors.",
        "gold_parse": "SELECT count(*) FROM ref_colors",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
        "gold_parse": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'",
        "query": "SELECT T1.Rank FROM captain AS T1 WHERE T1.Class = value INTERSECT SELECT T1.Rank FROM captain AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Type = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the first and last name of the students who are not in the largest major?",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT Fname , LName FROM Student EXCEPT SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What is the average price of wines produced in appelations in Sonoma County?",
        "gold_parse": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"",
        "query": "SELECT Avg ( T2.Price ) FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T1.State = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",
        "gold_parse": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "query": "SELECT Max ( T1.HS ) , T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID GROUP BY T2.pPos",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "List the object number of railways that do not have any trains.",
        "gold_parse": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
        "query": "SELECT Count ( * ) FROM railway AS T1 WHERE T1.Railway_ID NOT IN ( SELECT T2.Railway_ID FROM train AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "gold_parse": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "query": "SELECT T2.customer_name , T1.city , T1.state_province_county FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Address_History AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the members and branches at which they are registered sorted by year of registration?",
        "gold_parse": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
        "query": "SELECT Name , Name FROM member ORDER BY Card_Number Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Who made the latest order?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.",
        "gold_parse": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "query": "SELECT T2.channel_code , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of each manufacturer along with the name and price of its most expensive product.",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "query": "SELECT Name , Price FROM Products ORDER BY Price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "gold_parse": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
        "query": "SELECT T2.Year , T2.Title , T1.Publisher FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id ORDER BY T2.Year Desc",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?",
        "gold_parse": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
        "query": "SELECT Name , Appelation , Score FROM wine WHERE Score > value ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city.",
        "gold_parse": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
        "query": "SELECT T2.Customer_Name FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states where have the colleges whose enrollments are less than the largest size.",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "query": "SELECT state FROM College WHERE enr > ( SELECT Max ( enr ) FROM College )",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the member names and hometowns of those who registered at a branch in 2016?",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "gold_parse": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"",
        "query": "SELECT Avg ( Price ) , Avg ( Score ) FROM wine WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names and cities of the branches that do not have any registered members?",
        "gold_parse": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "query": "SELECT T1.Name , T1.City FROM branch AS T1 WHERE T1.Branch_ID NOT IN ( SELECT T2.Name FROM member AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the product name and total order quantity for each product.",
        "gold_parse": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
        "query": "SELECT product_name , Sum ( product_price ) FROM Products GROUP BY product_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of products with 'white' as their color description?",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of different colleges involved in the tryout in alphabetical order.",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "query": "SELECT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the name of the product with the color description 'yellow'?",
        "gold_parse": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'",
        "query": "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products with the 'hot' charactersitic.",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "query": "SELECT Count ( * ) FROM Products WHERE color_code = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the names of all distinct wines that are made of red color grape.",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "query": "SELECT DISTINCT Appelation FROM wine",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the city where the most customers live.",
        "gold_parse": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers are there?",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List the description of all the colors.",
        "gold_parse": "SELECT color_description FROM ref_colors",
        "query": "SELECT characteristic_type_description FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products have the color description 'red' and the characteristic name 'slow'?",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types WHERE characteristic_type_description = value",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Count the number of ships.",
        "gold_parse": "SELECT count(*) FROM ship",
        "query": "SELECT Count ( * ) FROM captain",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
        "gold_parse": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
        "query": "SELECT Card_Number , Name , Hometown FROM member ORDER BY Card_Number Desc",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number and average age of students living in each city.",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the dates when customers with ids between 10 and 20 became customers?",
        "gold_parse": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_id = value OR customer_id = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "gold_parse": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "query": "SELECT Count ( * ) FROM member WHERE Hometown LIKE value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names of the dorm that does not have a TV Lounge?",
        "gold_parse": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "query": "SELECT dorm_name FROM Dorm EXCEPT SELECT dorm_name FROM Dorm",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Which college has any student who is a goalie and succeeded in the tryout.",
        "gold_parse": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "query": "SELECT T1.cName FROM College AS T1 INTERSECT SELECT T2.cName FROM Tryout AS T2",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the white grape used to produce wines with scores above 90.",
        "gold_parse": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90",
        "query": "SELECT Winery FROM wine WHERE Score > value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the name of the swimmer who has at least 2 records.",
        "gold_parse": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
        "query": "SELECT name FROM swimmer GROUP BY name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "gold_parse": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Open_year FROM branch GROUP BY Open_year ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE Age BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the address content for the customer whose name is \"Maudie Kertzmann\".",
        "gold_parse": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"",
        "query": "SELECT T1.address_content FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T2.customer_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which city has the most customers living in?",
        "gold_parse": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "query": "SELECT T1.cName FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value )",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "gold_parse": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder",
        "query": "SELECT Built , Count ( * ) FROM railway GROUP BY Builder",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
        "gold_parse": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "query": "SELECT City_Town , Count ( * ) FROM Addresses GROUP BY City_Town",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the name, location, and number of platforms for all stations.",
        "gold_parse": "SELECT name ,  LOCATION ,  number_of_platforms FROM station",
        "query": "SELECT T1.Name , T1.Location , Count ( * ) FROM station AS T1 JOIN train_station AS T2 ON T1.Station_ID = T2.Station_ID GROUP BY T2.Station_ID",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the wines that have prices higher than 50 and made of Red color grapes?",
        "gold_parse": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
        "query": "SELECT T2.Winery FROM grapes AS T1 JOIN wine AS T2 ON T1.Grape = T2.Grape WHERE T2.Price > value AND T1.Color = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the numbers of different majors and cities.",
        "gold_parse": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "query": "SELECT Major , Count ( * ) FROM Student GROUP BY Major",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the total purchases for members rated at level 6?",
        "gold_parse": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "query": "SELECT Sum ( T2.Total_pounds ) FROM member AS T1 JOIN purchase AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Level = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the descriptions for each color?",
        "gold_parse": "SELECT color_description FROM ref_colors",
        "query": "SELECT characteristic_type_description FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities along with the number of drama workshop groups in each city.",
        "gold_parse": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "query": "SELECT City_Town , Count ( * ) FROM Addresses GROUP BY City_Town",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "query": "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = value ORDER BY T2.active_to_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the number of products with category \"Spices\" and typically sold above 1000.",
        "gold_parse": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000",
        "query": "SELECT Count ( * ) FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_category_code = value AND T1.product_category_description > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics of the product named 'laurel'.",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Which 3 wineries produce the most wines made from white grapes?",
        "gold_parse": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT Winery FROM wine WHERE Appelation = value GROUP BY Appelation ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "query": "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = value ORDER BY T1.date_became_customer Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many students live in each city and what are their average ages?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Return the average, maximum, and total revenues across all manufacturers.",
        "gold_parse": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",
        "query": "SELECT Avg ( Revenue ) , Min ( Revenue ) , Max ( Revenue ) FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the order details of the products with price higher than 2000?",
        "gold_parse": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "query": "SELECT Other_Product_Service_Details FROM Products WHERE Product_Price > value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "query": "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < value AND T1.State = value AND T1.County = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name and active date of the customer that use email as the contact channel.",
        "gold_parse": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "query": "SELECT customer_name , date_became_customer FROM Customers WHERE customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all the states with college students playing in the mid position but no goalies?",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
        "query": "SELECT T1.state FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value )",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
        "query": "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = value EXCEPT SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the total number of enrollment of schools that do not have any goalie player?",
        "gold_parse": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
        "query": "SELECT Sum ( T1.enr ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.yCard FROM Player AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the total number of students enrolled in schools without any goalies?",
        "gold_parse": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
        "query": "SELECT Sum ( T1.enr ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Compute the total order quantities of the product \"photo\".",
        "gold_parse": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
        "query": "SELECT Sum ( Product_Price ) FROM Products WHERE Product_Name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the list of cities that no customer is living in.",
        "gold_parse": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "query": "SELECT city FROM Addresses EXCEPT SELECT city FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the first names of all students who live in the dorm with the most amenities?",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT T1.Fname FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid ORDER BY T2.room_number Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of colors that are not used in any products.",
        "gold_parse": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "query": "SELECT Count ( * ) FROM Products AS T1 WHERE T1.product_id NOT IN ( SELECT T2.product_id FROM Product_Characteristics AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Which colleges do the tryout players whose name starts with letter D go to?",
        "gold_parse": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName LIKE value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the cities that do not have any branches with more than 100 members?",
        "gold_parse": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "query": "SELECT T1.City FROM branch AS T1 EXCEPT SELECT T1.City FROM branch AS T1 JOIN purchase AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T2.Total_pounds > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the colleges that are larger than at least one college in Florida?",
        "gold_parse": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > value GROUP BY T2.cName HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
        "gold_parse": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"",
        "query": "SELECT Avg ( Price ) FROM wine WHERE State = value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What is the name of the event that happened in the most recent year?",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "query": "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the station name with greatest number of trains.",
        "gold_parse": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM station ORDER BY Number_of_Platforms Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all students who successfully tried out for the position of striker?",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT cName FROM Tryout WHERE pPos = value",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the number of trains",
        "gold_parse": "SELECT count(*) FROM train",
        "query": "SELECT Count ( * ) FROM station",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Which marketing region has the most drama workshop groups? Give me the region code.",
        "gold_parse": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Marketing_Region_Name FROM Marketing_Regions GROUP BY Marketing_Region_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the resident details containing the substring 'Miss'?",
        "gold_parse": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
        "query": "SELECT customer_details FROM Customers WHERE customer_details LIKE value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many customers do we have?",
        "gold_parse": "SELECT count(*) FROM CUSTOMERS",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Compute the average active time span of contact channels.",
        "gold_parse": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "query": "SELECT Avg ( active_from_date ) FROM Customer_Contact_Channels",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the number of different products that are produced by companies at different headquarter cities.",
        "gold_parse": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",
        "query": "SELECT Count ( DISTINCT Headquarter ) FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "gold_parse": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
        "query": "SELECT name , Nationality FROM swimmer WHERE meter_100 > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many characteristics are there?",
        "gold_parse": "SELECT count(*) FROM CHARACTERISTICS",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
        "gold_parse": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "query": "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Headquarter = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of female students (with F sex) living in Smith Hall",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.Sex = value AND T2.gender = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?",
        "gold_parse": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
        "query": "SELECT LName FROM Student WHERE city_code = value OR Age < value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the average prices of all products from each manufacture, and list each company's name.",
        "gold_parse": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "query": "SELECT Avg ( T2.Price ) , T1.Founder FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T1.Founder",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the names of customers who never ordered product Latte.",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the total revenue of companies started by founder?",
        "gold_parse": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder",
        "query": "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Founder = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the states with colleges that have enrollments less than the some other college?",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "query": "SELECT state FROM College WHERE enr < ( SELECT Avg ( enr ) FROM College )",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "query": "SELECT address_content FROM Addresses WHERE country = value AND state_province_county = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products have their color described as 'white' or have a characteristic with the name 'hot'?",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = value OR characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Give me the name of the customer who ordered the most items in total.",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the id and builder of the railway that are associated with the most trains.",
        "gold_parse": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Railway_ID , Builder FROM railway GROUP BY Railway_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities where at least one customer lives in but no performer lives in.",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Clients AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T2.Address_ID HAVING Count ( * ) < = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the average price of all product clothes.",
        "gold_parse": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "query": "SELECT Avg ( product_price ) FROM Products",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "query": "SELECT Count ( DISTINCT T1.state ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of products produced by both Creative Labs and Sony?",
        "gold_parse": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
        "query": "SELECT Name FROM Manufacturers WHERE Founder = value INTERSECT SELECT Name FROM Manufacturers WHERE Founder = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names of characteristics that are in two or more products?",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "query": "SELECT characteristic_name FROM Characteristics GROUP BY characteristic_type_code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Count the total number of bookings made.",
        "gold_parse": "SELECT count(*) FROM BOOKINGS",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the planned delivery date and actual delivery date for each booking?",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show id and location of railways that are associated with more than one train.",
        "gold_parse": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1",
        "query": "SELECT Railway_ID , Location FROM railway GROUP BY Railway_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Product_Characteristics AS T2 ON T1.product_id = T2.product_id WHERE T2.product_characteristic_value = value EXCEPT SELECT T1.product_name FROM Characteristics AS T3 JOIN Products AS T1 JOIN Product_Characteristics AS T2 ON T3.characteristic_id = T2.characteristic_id AND T2.product_id = T1.product_id WHERE T3.characteristic_data_type = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the name of the players who received a card in descending order of the hours of training?",
        "gold_parse": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "query": "SELECT pName FROM Player ORDER BY HS Desc",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products are there?",
        "gold_parse": "SELECT count(*) FROM products",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "gold_parse": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
        "query": "SELECT LName FROM Student WHERE city_code = value OR Age < value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the average time span of contact channels in the database?",
        "gold_parse": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "query": "SELECT Avg ( active_to_date ) FROM Customer_Contact_Channels",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "What are the speeds of the longest roller coaster?",
        "gold_parse": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "query": "SELECT Speed FROM roller_coaster ORDER BY Height Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the distinct payment method codes with the number of orders made",
        "gold_parse": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",
        "query": "SELECT DISTINCT payment_method_code FROM Invoices",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "gold_parse": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
        "query": "SELECT T2.dorm_name FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.LName = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Year > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the total order quantities of photo products?",
        "gold_parse": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
        "query": "SELECT Sum ( Product_Price ) FROM Products",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states where have some college students in tryout and their decisions are yes.",
        "gold_parse": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.state FROM College AS T1 INTERSECT SELECT T2.decision FROM Tryout AS T2",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the unit of measuerment of the product category code \"Herbs\"?",
        "gold_parse": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_buying_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "How many appelations are in Napa Country?",
        "gold_parse": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "query": "SELECT Count ( * ) FROM appellations WHERE Appelation = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
        "gold_parse": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90",
        "query": "SELECT Name FROM wine WHERE Score > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the name of the characteristic that is most common across all products.",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name of the customer who made the order of the largest amount of goods.",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students received a yes from tryouts?",
        "gold_parse": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "query": "SELECT Count ( * ) FROM Player WHERE pName = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines made from red grapes?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "query": "SELECT Name FROM wine WHERE Grape = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_type_code = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T2.gender = value AND T1.Sex = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the average price of clothes?",
        "gold_parse": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "query": "SELECT Avg ( product_price ) FROM Products",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles of movies and books corresponding to companies incorporated in China?",
        "gold_parse": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "query": "SELECT T1.Title , T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Company_name = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show all distinct city where branches with at least 100 memberships are located.",
        "gold_parse": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "query": "SELECT DISTINCT City FROM branch GROUP BY City HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are names for top three branches with most number of membership?",
        "gold_parse": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "query": "SELECT Name FROM member GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "query": "SELECT address_content FROM Addresses WHERE country = value AND state_province_county = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the country of all appelations who have at most three wines.",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "query": "SELECT Appelation FROM wine GROUP BY Appelation HAVING Count ( * ) < = value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "How many stadiums are there?",
        "gold_parse": "SELECT count(*) FROM stadium",
        "query": "SELECT Count ( * ) FROM swimmer",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "gold_parse": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Order_ID FROM Invoices GROUP BY Product_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Compute the number of products with a price larger than or equal to $180.",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "query": "SELECT Count ( * ) FROM Products WHERE Price > value OR Price < value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product has been ordered most number of times?",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT product_id FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the station name and number of trains in each station.",
        "gold_parse": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id",
        "query": "SELECT Name , Count ( * ) FROM station GROUP BY Station_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the marketing region code that has the most drama workshop groups?",
        "gold_parse": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Marketing_Region_Code FROM Stores GROUP BY Marketing_Region_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2",
        "query": "SELECT customer_name FROM Customers WHERE payment_method_code = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method_code > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the phones and emails of workshop groups in which services are performed?",
        "gold_parse": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
        "query": "SELECT Store_Phone , Store_Email_Address FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students are enrolled in college?",
        "gold_parse": "SELECT sum(enr) FROM College",
        "query": "SELECT Count ( * ) FROM College",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and college of students whose decisions are yes in the tryout.",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the total number of distinct customers.",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "In which state is the college that Charles attends?",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
        "query": "SELECT state FROM College WHERE cName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "query": "SELECT cName FROM Tryout WHERE pPos = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the name of the most expensive hardware product.",
        "gold_parse": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "query": "SELECT product_name FROM Products ORDER BY product_price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "gold_parse": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many bookings do we have?",
        "gold_parse": "SELECT count(*) FROM BOOKINGS",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the schools with the top 3 largest class sizes?",
        "gold_parse": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID ORDER BY T2.HS Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What is the area for the appelation which produced the most wines prior to 2010?",
        "gold_parse": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Area FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Year < value GROUP BY T1.Area ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all details for each swimmer.",
        "gold_parse": "SELECT * FROM swimmer",
        "query": "SELECT name FROM swimmer",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the states or counties where the stores with marketing region code \"CA\" are located.",
        "gold_parse": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
        "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = value OR T2.Marketing_Region_Code = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many dorms are in the database?",
        "gold_parse": "SELECT count(*) FROM dorm",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many characteristics does the product named \"sesame\" have?",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the actual delivery date for all the orders with quantity 1",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID JOIN Invoice_Items AS T3 ON T2.Invoice_ID = T3.Invoice_ID WHERE T3.Order_Quantity = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Return the founder of Sony.",
        "gold_parse": "SELECT founder FROM manufacturers WHERE name  =  'Sony'",
        "query": "SELECT Founder FROM Manufacturers WHERE Founder = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "For which countries are there more than four distinct addresses listed?",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "query": "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines produced before any wine from the Brander winery?",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name and capacity of the dorm with least number of amenities.",
        "gold_parse": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "query": "SELECT dorm_name , student_capacity FROM Dorm ORDER BY dorm_name Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many characteristics does the product named \"laurel\" have?",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "How many different levels do members have?",
        "gold_parse": "SELECT count(DISTINCT LEVEL) FROM member",
        "query": "SELECT Count ( * ) FROM member",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of students whose age is older than the average age for each gender.",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "query": "SELECT Sex , Count ( * ) FROM Student WHERE Sex = value GROUP BY Sex",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the name and active date of the customers whose contact channel code is email?",
        "gold_parse": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T2.channel_code = value",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "gold_parse": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC",
        "query": "SELECT Name , Time FROM train ORDER BY Time Desc",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select all the data from the products and each product's manufacturer.",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "query": "SELECT T1.Revenue , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are all the company names that have a book published by Alyson?",
        "gold_parse": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
        "query": "SELECT DISTINCT Company_name FROM culture_company WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the name of the hardware product with the greatest price?",
        "gold_parse": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "query": "SELECT product_name FROM Products ORDER BY product_price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the number of students playing as a goalie?",
        "gold_parse": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "query": "SELECT Count ( * ) FROM College",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?",
        "gold_parse": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
        "query": "SELECT Rank FROM captain EXCEPT SELECT Rank FROM captain",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the customer name and date of the orders whose status is \"Delivered\".",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names for the 3 branches that have the most memberships?",
        "gold_parse": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "query": "SELECT Name FROM branch GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many schools have some students playing in goalie and mid positions.",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "query": "SELECT Count ( DISTINCT T2.cName ) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.pName = value AND T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total.",
        "gold_parse": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the name of each dorm that has a TV Lounge but no study rooms?",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 WHERE T1.dormid NOT IN ( SELECT T2.dormid FROM Has_amenity AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show the names of all the clients with no booking.",
        "gold_parse": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT Customer_Name FROM Clients",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
        "gold_parse": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
        "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = value OR T2.Marketing_Region_Code = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average, maximum and total revenues of all companies?",
        "gold_parse": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",
        "query": "SELECT Avg ( Revenue ) , Min ( Revenue ) , Max ( Revenue ) FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show the member name and hometown who registered a branch in 2016.",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "query": "SELECT DISTINCT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products are not made by Sony?",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "gold_parse": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "query": "SELECT Min ( Order_Quantity ) , Max ( Order_Quantity ) FROM Invoice_Items",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
        "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "gold_parse": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
        "query": "SELECT customer_id , customer_details FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many dorms are there?",
        "gold_parse": "SELECT count(*) FROM dorm",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products have prices of at least 180?",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "query": "SELECT Count ( * ) FROM Products WHERE Price < value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "query": "SELECT Customer_Event_ID , date_moved_in , date_moved_in FROM Customer_Events",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the different product names for products that have the 'warm' characteristic:?",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
        "query": "SELECT DISTINCT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type LIKE value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "When is the last day any resident moved in?",
        "gold_parse": "SELECT max(date_moved_in) FROM Residents",
        "query": "SELECT date_moved_in FROM Residents ORDER BY date_moved_out Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show all locations which don't have a train station with at least 15 platforms.",
        "gold_parse": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15",
        "query": "SELECT Location FROM station EXCEPT SELECT Location FROM station GROUP BY Location HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the grapes and appelations of each wine?",
        "gold_parse": "SELECT Grape ,  Appelation FROM WINE",
        "query": "SELECT Winery , Name FROM wine",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the id and color description of the products with at least 2 characteristics.",
        "gold_parse": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "query": "SELECT product_id , product_description FROM Products GROUP BY product_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "gold_parse": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "query": "SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = value EXCEPT SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
        "gold_parse": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_id = value OR customer_id = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "gold_parse": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name",
        "query": "SELECT amenity_name FROM Dorm_amenity ORDER BY amenity_name Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
        "gold_parse": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "query": "SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = value EXCEPT SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
        "gold_parse": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'",
        "query": "SELECT Name FROM member WHERE Hometown = value INTERSECT SELECT Name FROM member WHERE Hometown = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are characteristic names used at least twice across all products?",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics the product 'sesame' has.",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many orders have detail \"Second time\"?",
        "gold_parse": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE other_customer_details = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the average and maximum number of hours students who made the team practiced?",
        "gold_parse": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT Avg ( HS ) , Max ( HS ) FROM Player",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of product that is produced by both companies Creative Labs and Sony.",
        "gold_parse": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
        "query": "SELECT Name FROM Manufacturers WHERE Founder = value INTERSECT SELECT Name FROM Manufacturers WHERE Founder = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the name of the customer that has purchased the most items?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the names of trains and locations of railways they are in.",
        "gold_parse": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID",
        "query": "SELECT Built , Location FROM railway",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "gold_parse": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > value GROUP BY T2.cName ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Sort all captain names by their ages from old to young.",
        "gold_parse": "SELECT name FROM captain ORDER BY age DESC",
        "query": "SELECT Name FROM captain ORDER BY age Asc",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "gold_parse": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "query": "SELECT Title , Director FROM movie WHERE Gross_worldwide > = value ORDER BY Gross_worldwide Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the names and scores of wines made from white grapes.",
        "gold_parse": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"",
        "query": "SELECT Name , Score FROM wine WHERE Appelation = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different states that have students trying out?",
        "gold_parse": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "query": "SELECT DISTINCT state FROM College",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "gold_parse": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the name of the school with smallest enrollment size per state?",
        "gold_parse": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "query": "SELECT cName FROM College ORDER BY enr Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all the Store_Name of drama workshop groups.",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query": "SELECT Store_Name FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "For each branch id, what are the names of the branches that were registered after 2015?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "query": "SELECT T2.Name , T1.Name FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID AND T1.Member_ID = T3.Member_ID WHERE T3.Register_Year > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Which cities have at least one customer but no performer?",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "query": "SELECT City_Town FROM Addresses GROUP BY City_Town HAVING Count ( * ) < = value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "List all company names with a book published by Alyson.",
        "gold_parse": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
        "query": "SELECT Company_name FROM culture_company WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "gold_parse": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "query": "SELECT Name FROM wine WHERE Year > value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What is the total number of purchases for members with level 6?",
        "gold_parse": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "query": "SELECT Count ( * ) FROM member WHERE Level = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?",
        "gold_parse": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "query": "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Headquarter = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of the products with a price less than or equal to $200.",
        "gold_parse": "SELECT name FROM products WHERE price  <=  200",
        "query": "SELECT Name FROM Products WHERE Price > value OR Price < value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Show the movie titles and book titles for all companies in China.",
        "gold_parse": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "query": "SELECT T1.Title , T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Company_name = value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the name of the swimmer who has the most records.",
        "gold_parse": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM swimmer GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of companies that do not make DVD drives?",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "query": "SELECT Name FROM Manufacturers EXCEPT SELECT Name FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many different colleges are there?",
        "gold_parse": "SELECT count(*) FROM College",
        "query": "SELECT Count ( DISTINCT state ) FROM College",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the number of customers who live in the city called Lake Geovannyton.",
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
        "query": "SELECT Count ( * ) FROM Addresses WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the product names with average product price smaller than 1000000?",
        "gold_parse": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000",
        "query": "SELECT Product_Name FROM Products WHERE Product_Price < value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many colors are there?",
        "gold_parse": "SELECT count(*) FROM ref_colors",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "query": "SELECT T1.staff_name , T1.staff_gender FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code ! = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?",
        "gold_parse": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "query": "SELECT Grape , Winery , Year FROM wine WHERE Price > value ORDER BY Price Desc",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the names of customers who ordered both products Latte and Americano.",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
        "gold_parse": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
        "query": "SELECT Name , Headquarter FROM Manufacturers ORDER BY Revenue Asc",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "For each dorm, how many amenities does it have?",
        "gold_parse": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "query": "SELECT dorm_name , Count ( * ) FROM Dorm GROUP BY dorm_name",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names and buying prices of all the products?",
        "gold_parse": "SELECT product_name ,  typical_buying_price FROM products",
        "query": "SELECT product_name , typical_selling_price FROM Products",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "query": "SELECT T1.staff_name , T1.staff_gender FROM Staff AS T1 WHERE T1.staff_id NOT IN ( SELECT T2.staff_id FROM Staff_Department_Assignments AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Which workshop groups have bookings with status code \"stop\"? Give me the names.",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Count the number of customers recorded.",
        "gold_parse": "SELECT count(*) FROM CUSTOMERS",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What is the name of the stadium which held the most events?",
        "gold_parse": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the number of products for each manufacturer, showing the name of each company.",
        "gold_parse": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "query": "SELECT Count ( * ) , Founder FROM Manufacturers GROUP BY Founder",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of products with price at most 200?",
        "gold_parse": "SELECT name FROM products WHERE price  <=  200",
        "query": "SELECT Name FROM Products WHERE Price > value",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "gold_parse": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )",
        "query": "SELECT Count ( * ) FROM country AS T1 WHERE T1.Country_ID NOT IN ( SELECT T2.Country_ID FROM roller_coaster AS T2 WHERE T2.Height > value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the email addresses of the drama workshop groups located in Alaska state.",
        "gold_parse": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"",
        "query": "SELECT T2.Customer_Email_Address FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the name of the customer who has the most orders.",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different states that had students successfully try out?",
        "gold_parse": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "query": "SELECT DISTINCT state FROM College",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the drama workshop groups with address in Feliciaberg city?",
        "gold_parse": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
        "query": "SELECT T2.Customer_Name FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the average number of hours spent practicing for students who got rejected?",
        "gold_parse": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "query": "SELECT Avg ( T2.HS ) FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T1.state = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics of the 'flax' product.",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_data_type = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of manufacturers with revenue greater than the average of all revenues?",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name and revenue of the company that earns the highest revenue in each city.",
        "gold_parse": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "query": "SELECT T1.Name , T1.Revenue FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer ORDER BY T2.Price Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the order detail for the products with price above 2000.",
        "gold_parse": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "query": "SELECT Other_Product_Service_Details FROM Products WHERE Product_Price > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many schools have students playing in goalie and mid-field positions?",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "query": "SELECT Count ( DISTINCT T2.cName ) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.pName = value AND T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "How many movie directors are there?",
        "gold_parse": "SELECT COUNT (DISTINCT director) FROM movie",
        "query": "SELECT Count ( * ) FROM book_club",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many different products are produced in each headquarter city?",
        "gold_parse": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",
        "query": "SELECT Count ( * ) , Headquarter FROM Manufacturers GROUP BY Headquarter",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many colors are never used by any product?",
        "gold_parse": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "query": "SELECT Count ( * ) FROM Products AS T1 WHERE T1.product_id NOT IN ( SELECT T2.product_id FROM Product_Characteristics AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of players whose card is yes in the descending order of training hours.",
        "gold_parse": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "query": "SELECT pName FROM Player ORDER BY HS Desc",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "List the wheels and locations of the railways.",
        "gold_parse": "SELECT Wheels ,  LOCATION FROM railway",
        "query": "SELECT Built , Location FROM railway",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Show all book categories and the number of books in each category.",
        "gold_parse": "SELECT category ,  count(*) FROM book_club GROUP BY category",
        "query": "SELECT Type , Count ( * ) FROM culture_company GROUP BY Type",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products.",
        "gold_parse": "SELECT count(*) FROM products",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of dorms that have some amenity.",
        "gold_parse": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many female students live in Smith Hall?",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.Sex = value AND T2.gender = value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "List all the event names by year from the most recent to the oldest.",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC",
        "query": "SELECT Name FROM event ORDER BY Year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many girl students who are younger than 25?",
        "gold_parse": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "query": "SELECT Count ( * ) FROM Student WHERE Age < value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the different membership levels?",
        "gold_parse": "SELECT count(DISTINCT LEVEL) FROM member",
        "query": "SELECT DISTINCT membership_amount FROM branch",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.pName , T1.HS FROM Player AS T1 WHERE T1.pID IN ( SELECT T2.cName FROM Tryout AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?",
        "gold_parse": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"",
        "query": "SELECT Starting_Year FROM technician WHERE Team = value OR Team = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the document status description of the document with id 1?",
        "gold_parse": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1",
        "query": "SELECT T1.document_status_description FROM Ref_Document_Status AS T1 JOIN Documents AS T2 ON T1.document_status_code = T2.document_status_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the name of the shipping agent of the document with id 2?",
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2",
        "query": "SELECT T1.shipping_agent_name FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find distinct cities of addresses of people?",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "query": "SELECT DISTINCT city FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "List name, dates active, and number of deaths for all storms with at least 1 death.",
        "gold_parse": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "query": "SELECT Name , Dates_active , Number_Deaths FROM storm GROUP BY Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find id of the candidate who most recently accessed the course?",
        "gold_parse": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "query": "SELECT candidate_id FROM Candidate_Assessments GROUP BY candidate_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers have an account?",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "query": "SELECT Count ( * ) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
        "gold_parse": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "query": "SELECT name , dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of the department that offers the highest total credits?",
        "gold_parse": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of customers who hold an account.",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "query": "SELECT Count ( * ) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the different cities where people live?",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "query": "SELECT DISTINCT city FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the maximum and minimum millisecond lengths of pop tracks.",
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "query": "SELECT Max ( Milliseconds ) , Min ( Milliseconds ) FROM Track",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "gold_parse": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id",
        "query": "SELECT employee_id , Count ( * ) FROM Circulation_History GROUP BY employee_id",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY Team_Name Desc",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "gold_parse": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'",
        "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.first_name = value INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.first_name = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "query": "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "query": "SELECT country FROM circuits ORDER BY country Asc",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 EXCEPT SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the average millisecond length of Latin and Pop tracks.",
        "gold_parse": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "query": "SELECT Avg ( Milliseconds ) , Avg ( Milliseconds ) FROM Track",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for course 301?",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "query": "SELECT Name , Count ( * ) FROM actor GROUP BY Name",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "what are the first name and last name of all candidates?",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "query": "SELECT first_name , last_name FROM People",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the id and last name of the driver with the longest laptime?",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "query": "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the schools that were either founded before 1850 or are public?",
        "gold_parse": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "query": "SELECT School FROM university WHERE Founded = value OR Founded < value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the distinct names of all races held between 2014 and 2017?",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "query": "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "How many climbers are there?",
        "gold_parse": "SELECT count(*) FROM climber",
        "query": "SELECT Count ( * ) FROM mountain",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the different first names for customers from Brazil who have also had an invoice?",
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "query": "SELECT DISTINCT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "gold_parse": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "query": "SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Rent_Arrears AS T2",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the name of the heaviest entrepreneur.",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show names of actors and names of musicals they are in.",
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
        "query": "SELECT Character , Name FROM actor",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Count the number of different affected regions.",
        "gold_parse": "SELECT count(DISTINCT region_id) FROM affected_region",
        "query": "SELECT Count ( DISTINCT Region_code ) FROM region",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
        "gold_parse": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "query": "SELECT T2.building , T2.room_number , T2.year FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = value ORDER BY T1.title Asc",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "gold_parse": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "query": "SELECT Investor FROM entrepreneur ORDER BY Money_Requested Desc",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "gold_parse": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
        "query": "SELECT product_description FROM Products_for_Hire WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "gold_parse": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
        "query": "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?",
        "gold_parse": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "query": "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T2.time = value AND T1.country ! = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "query": "SELECT name , Location , Product FROM enzyme WHERE name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Show the enrollment and primary_conference of the oldest college.",
        "gold_parse": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
        "query": "SELECT Enrollment , School FROM university ORDER BY Enrollment Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "How many tracks belong to rock genre?",
        "gold_parse": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "query": "SELECT Count ( * ) FROM Genre WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who didn't teach?",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are all info of students who registered courses but not attended courses?",
        "gold_parse": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "query": "SELECT T1.student_details FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the numbers of races for each constructor id?",
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "query": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the unique names of all race held between 2014 and 2017?",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "For each nationality, how many different constructors are there?",
        "gold_parse": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "query": "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race that occurred most recently?",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "query": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "Which student visited restaurant most often? List student's first name and last name.",
        "gold_parse": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID GROUP BY T2.ResID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F'",
        "query": "SELECT Fname , LName FROM Student WHERE Sex = value AND Age > value",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "gold_parse": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'",
        "query": "SELECT T1.Competition , T1.stadium_id FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.Injury = value OR T2.Injury = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "query": "SELECT T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.name = value AND T1.Porphyria = value",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "gold_parse": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32",
        "query": "SELECT DISTINCT T1.Carrier FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find courses that ran in Fall 2009 and in Spring 2010.",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT course_id FROM takes WHERE year = value AND semester = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the role of the employee named Koby?",
        "gold_parse": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\"",
        "query": "SELECT role_code FROM Employees WHERE employee_name = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year = value INTERSECT SELECT T2.course_id FROM takes AS T2 WHERE T2.year = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers were in the Australian Grand Prix held in 2009?",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "query": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What is the storm name and max speed which affected the greatest number of regions?",
        "gold_parse": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Max_speed FROM storm GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "What is the party of the youngest people?",
        "gold_parse": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
        "query": "SELECT Party FROM people ORDER BY Age Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "gold_parse": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "query": "SELECT T1.Name FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > value ORDER BY T1.Name Desc",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
        "gold_parse": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"",
        "query": "SELECT Sponsor_name FROM player WHERE Residence = value OR Sponsor_name = value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "List the names of people that have not been on the affirmative side of debates.",
        "gold_parse": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
        "query": "SELECT Name FROM people EXCEPT SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Return the average transaction amount, as well as the total amount of all transactions.",
        "gold_parse": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "query": "SELECT Avg ( transaction_amount ) FROM Financial_Transactions",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "query": "SELECT name , Client FROM Web_client_accelerator WHERE Connection ! = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of department has the highest amount of students?",
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name ORDER BY Sum ( T1.budget ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "gold_parse": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC",
        "query": "SELECT T1.Connection , T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id ORDER BY T2.compatible_since_year Desc",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the different cities where students live?",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "query": "SELECT DISTINCT city FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers do not have an account?",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "query": "SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of students in each department.",
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "query": "SELECT Count ( * ) , budget FROM department GROUP BY building",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "query": "SELECT T1.Address FROM Customer AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Address FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of all races held in 2017.",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "List the name of browsers in descending order by market share.",
        "gold_parse": "SELECT name FROM browser ORDER BY market_share DESC",
        "query": "SELECT T1.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id ORDER BY T2.market_share Desc",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Company FROM entrepreneur WHERE Money_Requested < value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the name of the perpetrator with the biggest weight.",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
        "query": "SELECT Name FROM people ORDER BY Weight Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the ids and first names of customers who do not hold a credit card?",
        "gold_parse": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
        "query": "SELECT T1.customer_id , T1.customer_first_name FROM Customers AS T1 JOIN Customers_Cards AS T2 WHERE T2.card_number ! = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "query": "SELECT Name FROM actor WHERE Character = value INTERSECT SELECT Name FROM actor WHERE Character = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of instructors who didnt' teach?",
        "gold_parse": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "query": "SELECT ID FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "gold_parse": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "query": "SELECT title , credits , dept_name FROM course GROUP BY dept_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What is the weight of the shortest person?",
        "gold_parse": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "query": "SELECT Weight FROM people GROUP BY Weight ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the ids and full names of customers who hold two or more cards?",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "query": "SELECT customer_id , customer_first_name , customer_last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the title of the course offered in Chandler during the Fall of 2010.",
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "query": "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id JOIN takes AS T3 ON T2.year = T3.year WHERE T3.year = value AND T3.semester = value",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "How many technicians are there?",
        "gold_parse": "SELECT count(*) FROM technician",
        "query": "SELECT Count ( * ) FROM repair",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many students and instructors are in each department?",
        "gold_parse": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "query": "SELECT Count ( * ) , dept_name FROM instructor GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "question": "Which membership card has more than 5 members?",
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "query": "SELECT Membership_card FROM member WHERE Membership_card > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructors who are advising more than one student.",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "query": "SELECT name FROM instructor GROUP BY name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title, credit value, and department name for courses with more than one prerequisite?",
        "gold_parse": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "query": "SELECT title , credits , dept_name FROM course GROUP BY dept_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is draft detail of the document with id 7?",
        "gold_parse": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7",
        "query": "SELECT T1.address_details FROM Addresses AS T1 JOIN Documents_Mailed AS T2 ON T1.address_id = T2.mailed_to_address_id WHERE T2.document_id = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who took any class in the years of 2009 and 2010.",
        "gold_parse": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
        "query": "SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = value INTERSECT SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "query": "SELECT T1.cell_mobile_number FROM People AS T1 JOIN Candidates AS T2 ON T1.person_id = T2.candidate_id JOIN Candidate_Assessments AS T3 ON T2.candidate_id = T3.candidate_id WHERE T3.qualification = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who have been nominated more than two times?",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "query": "SELECT Award FROM musical GROUP BY Award HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the names of countains that no climber has climbed?",
        "gold_parse": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "query": "SELECT Name FROM mountain EXCEPT SELECT Name FROM mountain WHERE Prominence = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits",
        "query": "SELECT title , title , credits FROM course ORDER BY title Asc",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Count the number of actors.",
        "gold_parse": "SELECT count(*) FROM actor",
        "query": "SELECT Count ( * ) FROM musical",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "gold_parse": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "query": "SELECT T1.name , T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year = value ORDER BY T1.name Asc",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Count the number of tracks.",
        "gold_parse": "SELECT count(*) FROM track",
        "query": "SELECT Count ( * ) FROM race",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who took some course offered by Statistics department.",
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "query": "SELECT name FROM student",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the id of the candidate whose email is stanley.monahan@example.org?",
        "gold_parse": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "query": "SELECT candidate_id FROM Candidates WHERE candidate_details = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of instructors who didn't each any courses in any Spring semester.",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "query": "SELECT id , name , Porphyria FROM enzyme ORDER BY name Desc",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show the name and date for each race and its track name.",
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "query": "SELECT Name , Date FROM race",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who have taught C Programming courses?",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "query": "SELECT name FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show storm name with at least two regions and 10 cities affected.",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the characters of actors in descending order of age?",
        "gold_parse": "SELECT Character FROM actor ORDER BY age DESC",
        "query": "SELECT Name FROM actor ORDER BY age Desc",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "gold_parse": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "query": "SELECT Primary_conference FROM university ORDER BY Enrollment Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "query": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Return the primary conference of the school with the lowest acc percentage score.",
        "gold_parse": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "query": "SELECT Primary_conference FROM university ORDER BY Enrollment Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
        "gold_parse": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
        "query": "SELECT source_system_code , master_customer_id FROM CMI_Cross_References",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the first and last names of all the candidates?",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "query": "SELECT first_name , last_name FROM People",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "gold_parse": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "query": "SELECT candidate_id FROM Candidates WHERE candidate_details = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the full names of customers who have accounts?",
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query": "SELECT customer_first_name , customer_last_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the name of the lowest earning instructor in the Statistics department.",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
        "query": "SELECT name FROM instructor ORDER BY salary Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "query": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the prerequisite class of International Finance course?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
        "query": "SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = value INTERSECT SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
        "gold_parse": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "query": "SELECT Name , Dates_active , Number_Deaths FROM storm GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "How many students are attending English courses?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Hom many albums does the artist \"Metallica\" have?",
        "gold_parse": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "query": "SELECT Count ( * ) FROM Artist WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "How many different source system code for the cmi cross references are there?",
        "gold_parse": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
        "query": "SELECT Count ( DISTINCT source_system_code ) FROM CMI_Cross_References WHERE source_system_code = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Which year had the greatest number of courses?",
        "gold_parse": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT year FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines are offered by each trade name?",
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "query": "SELECT Count ( * ) , name FROM enzyme GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the semester and year which has the least number of student taking any class.",
        "gold_parse": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "query": "SELECT T2.semester , T1.year FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year GROUP BY T2.semester ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "query": "SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "gold_parse": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "query": "SELECT id , Score , Date FROM game GROUP BY stadium_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "query": "SELECT T1.Team_Name , T2.Founded FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many students have advisors?",
        "gold_parse": "SELECT count(DISTINCT s_id) FROM advisor",
        "query": "SELECT Count ( * ) FROM classroom",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find the id of courses which are registered or attended by student whose id is 121?",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "gold_parse": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "query": "SELECT name FROM medicine GROUP BY id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all the races that occurred in the year 2017?",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who advise more than one student?",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "query": "SELECT name FROM instructor GROUP BY name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Count the number of parties.",
        "gold_parse": "SELECT count(*) FROM party",
        "query": "SELECT Count ( DISTINCT Party_Theme ) FROM party",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "what is id of students who registered some courses but the least number of courses in these students?",
        "gold_parse": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "query": "SELECT FirstName , EmployeeId FROM Employee GROUP BY EmployeeId HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
        "gold_parse": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age",
        "query": "SELECT T1.Party_Theme , T1.Location FROM party AS T1 JOIN host AS T2 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID AND T3.Host_ID = T2.Host_ID ORDER BY T2.Age Asc",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "query": "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "which course has most number of registered students?",
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id JOIN Student_Course_Attendance AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "gold_parse": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "query": "SELECT account_id , customer_id , account_name , account_name FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "How many debates are there?",
        "gold_parse": "SELECT count(*) FROM debate",
        "query": "SELECT Count ( * ) FROM people",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "How many distinct kinds of injuries happened after season 2010?",
        "gold_parse": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010",
        "query": "SELECT Count ( * ) FROM game WHERE Season > value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
        "gold_parse": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
        "gold_parse": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
        "query": "SELECT Year_Opened FROM track WHERE Seating > value OR Seating > value",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "How many restaurant is the Sandwich type restaurant?",
        "gold_parse": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'",
        "query": "SELECT Count ( * ) FROM Type_Of_Restaurant WHERE ResTypeID = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "query": "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "For each constructor id, how many races are there?",
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "query": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name GROUP BY T2.name ORDER BY Sum ( T3.tot_cred ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year = value OR T2.semester = value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "query": "SELECT DISTINCT name , Location , Product FROM enzyme WHERE name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many cards does customer Art Turcotte have?",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
        "gold_parse": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "query": "SELECT Nickname FROM university WHERE Enrollment < ( SELECT Avg ( Enrollment ) FROM university )",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the sum of budgets of the Marketing and Finance departments?",
        "gold_parse": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
        "query": "SELECT Sum ( budget ) FROM department WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "When did Linda Smith visit Subway?",
        "gold_parse": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\"",
        "query": "SELECT T2.Time FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value AND T1.LName = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What is the average unit price of rock tracks?",
        "gold_parse": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "query": "SELECT Avg ( UnitPrice ) FROM Track",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "gold_parse": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "query": "SELECT id , name FROM medicine GROUP BY id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "How many actors have appeared in each musical?",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "query": "SELECT Count ( * ) , Name FROM actor GROUP BY Character",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the titles for courses with two prerequisites?",
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
        "query": "SELECT title FROM course",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "What are the names and dates of races, and the names of the tracks where they are held?",
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "query": "SELECT Name , Date , Date FROM race",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "gold_parse": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the id of students who registered courses or attended courses?",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "query": "SELECT T2.student_id FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name > = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customer cards are there?",
        "gold_parse": "SELECT count(*) FROM Customers_cards",
        "query": "SELECT Count ( * ) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who registered course statistics in the order of registration date.",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "query": "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Asc",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for course 301 most recently?",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "query": "SELECT T2.student_id FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.course_id = T2.course_id ORDER BY T1.registration_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name and date of the race that occurred most recently?",
        "gold_parse": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "query": "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "List all students' first names and last names who majored in 600.",
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Major  =  600",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID WHERE T2.Spent = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the codes of card types that have 5 or more cards?",
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
        "query": "SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the public schools and what are their locations?",
        "gold_parse": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "query": "SELECT Location , Location FROM university",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "gold_parse": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
        "query": "SELECT cmi_cross_ref_id , source_system_code FROM CMI_Cross_References GROUP BY cmi_cross_ref_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "gold_parse": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
        "query": "SELECT T1.booking_start_date , T1.booking_start_date FROM Bookings AS T1 JOIN Products_for_Hire AS T2 JOIN Products_Booked AS T3 ON T1.booking_id = T3.booking_id AND T3.product_id = T2.product_id WHERE T2.product_name = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT Chromosome FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the ids and locations of all circuits in France or Belgium?",
        "gold_parse": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "query": "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR number = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "query": "SELECT T2.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value AND T1.name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races held between 2009 and 2011?",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "query": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Max_speed ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who have taken the prerequisite for the course International Finance?",
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "query": "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name WHERE T2.dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines were not approved by the FDA?",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "query": "SELECT Count ( * ) FROM enzyme AS T1 WHERE T1.id NOT IN ( SELECT T2.id FROM medicine AS T2 WHERE T2.FDA_approved = value )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "gold_parse": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "query": "SELECT name FROM enzyme WHERE Porphyria LIKE value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "List the names of all distinct races in reversed  lexicographic order?",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "query": "SELECT country FROM circuits ORDER BY country Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who haven't taken any Biology courses?",
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "query": "SELECT T1.name FROM student AS T1 WHERE T1.ID NOT IN ( SELECT T2.ID FROM takes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "For each course id, how many students are registered and what are the course names?",
        "gold_parse": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
        "query": "SELECT T1.course_id , T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of all the different drivers in alphabetical order?",
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "query": "SELECT name FROM races ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "gold_parse": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "query": "SELECT Nationality FROM host WHERE Age < value INTERSECT SELECT Nationality FROM host WHERE Age > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "List the names and buildings of all departments sorted by the budget from large to small.",
        "gold_parse": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "query": "SELECT dept_name , building FROM department ORDER BY budget Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers do we have?",
        "gold_parse": "SELECT count(*) FROM Customers",
        "query": "SELECT Count ( * ) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "query": "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id AND T1.course_id = T2.course_id JOIN takes AS T3 ON T2.year = T3.year WHERE T3.year = value AND T2.building = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "gold_parse": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Company = value OR T1.Company = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers did not participate in the races held in 2009?",
        "gold_parse": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "query": "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "gold_parse": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
        "query": "SELECT T2.Season FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
        "query": "SELECT T1.Name , Count ( * ) FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Affirmative GROUP BY T2.Affirmative",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "query": "SELECT Company FROM entrepreneur WHERE Investor ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the id of students who registered course 301?",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "query": "SELECT student_id FROM Students",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the duration of the longest and shortest pop tracks in milliseconds?",
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "query": "SELECT Milliseconds , Milliseconds FROM Track ORDER BY Milliseconds Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "How many actors are there?",
        "gold_parse": "SELECT count(*) FROM actor",
        "query": "SELECT Count ( * ) FROM musical",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
        "query": "SELECT document_id FROM Documents WHERE document_type_code = value EXCEPT SELECT document_id FROM Documents WHERE document_type_code = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "query": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show distinct first and last names for all customers with an account.",
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query": "SELECT DISTINCT customer_first_name , customer_last_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find all the customer information in state NY.",
        "gold_parse": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "query": "SELECT Email FROM Customer WHERE City = value",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "query": "SELECT T1.Name , Count ( * ) FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id GROUP BY T2.technician_id",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "query": "SELECT FirstName , ReportsTo FROM Employee GROUP BY EmployeeId HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "query": "SELECT Milliseconds , TrackId FROM Track ORDER BY Milliseconds Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the names of entrepreneurs?",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Company FROM entrepreneur",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "How many tracks do we have?",
        "gold_parse": "SELECT count(*) FROM track",
        "query": "SELECT Count ( * ) FROM race",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the last names of customers without invoice totals exceeding 20?",
        "gold_parse": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "query": "SELECT T1.LastName FROM Customer AS T1 WHERE T1.CustomerId NOT IN ( SELECT T2.CustomerId FROM Invoice AS T2 WHERE T2.Total < value )",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "How many customers are there?",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank",
        "query": "SELECT Count ( * ) FROM bank",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructors who didn't teach any courses?",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who have taken Statistics courses?",
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "query": "SELECT name FROM student",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Return the name and max speed of the storm that affected the most regions.",
        "gold_parse": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Max_speed FROM storm ORDER BY Max_speed Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "gold_parse": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
        "query": "SELECT T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id AND T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T2.Away_team = value AND T3.Player = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race held most recently?",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "query": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "gold_parse": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "query": "SELECT candidate_id FROM Candidate_Assessments WHERE qualification = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the different card types, and how many transactions have been made with each?",
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "query": "SELECT transaction_type , Count ( * ) FROM Financial_Transactions GROUP BY transaction_type",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the id of the courses that do not have any prerequisite?",
        "gold_parse": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "query": "SELECT T1.sec_id FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show all storm names except for those with at least two affected regions.",
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many students are in each department?",
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "query": "SELECT Count ( * ) , T1.budget FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
        "gold_parse": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "query": "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE title = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "query": "SELECT Name , ArtistId FROM Artist GROUP BY ArtistId HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names and trade names of the medcines that are FDA approved?",
        "gold_parse": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "query": "SELECT T2.name , T1.Trade_Name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T1.FDA_approved = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "gold_parse": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested Desc",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What is the starting year of the oldest technicians?",
        "gold_parse": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "query": "SELECT Starting_Year FROM technician ORDER BY Age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many regions are affected?",
        "gold_parse": "SELECT count(DISTINCT region_id) FROM affected_region",
        "query": "SELECT Count ( * ) FROM storm",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "gold_parse": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
        "query": "SELECT employee_name FROM Employees EXCEPT SELECT employee_name FROM Employees",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show the name for regions and the number of storms for each region.",
        "gold_parse": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "query": "SELECT Region_code , Count ( * ) FROM region GROUP BY Region_code",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the names of artists that do not have any albums.",
        "gold_parse": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "query": "SELECT T1.Name FROM Artist AS T1 WHERE T1.ArtistId NOT IN ( SELECT T2.ArtistId FROM Album AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the shipping agent code of shipping agent UPS?",
        "gold_parse": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\"",
        "query": "SELECT shipping_agent_code FROM Documents WHERE receipt_number = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the forename and surname of the driver who has the smallest laptime?",
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "query": "SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "What are the names and locations of tracks that have had exactly 1 race?",
        "gold_parse": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "query": "SELECT T2.Name , T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Class = value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "List the name and residence for players whose occupation is not \"Researcher\".",
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "query": "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = value",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM stadium GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many storms occured in each region?",
        "gold_parse": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "query": "SELECT Region_code , Count ( * ) FROM region GROUP BY Region_code",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "gold_parse": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",
        "query": "SELECT T3.council_tax_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Parking_Fines AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details = value EXCEPT SELECT T3.council_tax_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Parking_Fines AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the founded year of the newest non public school.",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "query": "SELECT Founded FROM university ORDER BY Enrollment Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "gold_parse": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
        "query": "SELECT T1.role_description , T2.employee_id , Count ( * ) FROM Roles AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the location of the perpetrator with the largest kills.",
        "gold_parse": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
        "query": "SELECT Location FROM perpetrator ORDER BY Injured Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of students who have advisors.",
        "gold_parse": "SELECT count(DISTINCT s_id) FROM advisor",
        "query": "SELECT Count ( * ) FROM classroom",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?",
        "gold_parse": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "query": "SELECT title FROM course WHERE dept_name = value AND dept_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give id of the instructor who advises students in the History department.",
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "query": "SELECT T2.i_ID FROM instructor AS T1 JOIN advisor AS T2 ON T1.ID = T2.i_ID WHERE T1.dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show names for all regions except for Denmark.",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "query": "SELECT Region_name FROM region WHERE Region_code ! = value",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Which parties have more than 20 hosts? Give me the host names for these parties.",
        "gold_parse": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
        "query": "SELECT T1.Party_Theme FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "List all public schools and their locations.",
        "gold_parse": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "query": "SELECT School , Location FROM university",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "Advisor 1121 has how many students?",
        "gold_parse": "SELECT count(*) FROM Student WHERE Advisor =  1121",
        "query": "SELECT Count ( DISTINCT Advisor ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "gold_parse": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
        "query": "SELECT T2.Height FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Killed Desc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of courses without prerequisites?",
        "gold_parse": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "query": "SELECT T1.sec_id FROM section AS T1 EXCEPT SELECT T2.course_id FROM takes AS T2",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "How many universities have a location that contains NY?",
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "query": "SELECT Count ( * ) FROM university WHERE Location = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query": "SELECT name FROM instructor WHERE dept_name = value ORDER BY salary Asc",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "How many times has the student Linda Smith visited Subway?",
        "gold_parse": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "query": "SELECT card_type_code , Count ( * ) FROM Customers_Cards GROUP BY card_type_code",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What is the customer id, first and last name with least number of accounts.",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 GROUP BY T1.customer_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = value OR T1.Location = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held after 2000 in Spain?",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef > value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Return the characters for actors, ordered by age descending.",
        "gold_parse": "SELECT Character FROM actor ORDER BY age DESC",
        "query": "SELECT Name FROM actor ORDER BY age Desc",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals who have no actors?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor EXCEPT SELECT Name FROM actor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "query": "SELECT Count ( * ) FROM classroom AS T1 JOIN time_slot AS T2 WHERE T2.end_hr > value AND T1.building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who didn't teach courses in the Spring?",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "gold_parse": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
        "query": "SELECT T1.Product , T1.Chromosome , T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.Location = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors who are not 20 years old?",
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20",
        "query": "SELECT Name FROM actor WHERE age < = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the course that is a prerequisite for Mobile Computing?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY Team_Name Desc",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of customer cards.",
        "gold_parse": "SELECT count(*) FROM Customers_cards",
        "query": "SELECT Count ( * ) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "query": "SELECT student_id , Count ( * ) FROM Student_Course_Attendance GROUP BY student_id",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of the storms that affected Denmark?",
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "query": "SELECT Name FROM storm WHERE Dates_active = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "query": "SELECT country FROM circuits WHERE lat > value OR lat < value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "gold_parse": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
        "query": "SELECT source_system_code , cmi_cross_ref_id FROM CMI_Cross_References ORDER BY source_system_code Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Return the code of the card type that is most common.",
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many draft copies does the document with id 2 have?",
        "gold_parse": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2",
        "query": "SELECT Count ( * ) FROM Documents_Mailed WHERE document_id = value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "gold_parse": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'",
        "query": "SELECT T2.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id WHERE T1.Connection = value AND T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of rooms in Lamberton with capacity lower than 50.",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND capacity < value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find courses that ran in Fall 2009 or in Spring 2010.",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT course_id FROM takes WHERE year = value OR year = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many courses are provided in each semester and year?",
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "query": "SELECT Count ( * ) , year FROM takes GROUP BY year",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "gold_parse": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
        "query": "SELECT Name FROM musical WHERE Award = value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "query": "SELECT id , name FROM Web_client_accelerator GROUP BY id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "query": "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "query": "SELECT T2.Region_name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T1.Number_Deaths < value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM enzyme GROUP BY id , name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show the name and location of track with 1 race.",
        "gold_parse": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "query": "SELECT T2.Name , T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Race_ID = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "query": "SELECT name FROM instructor WHERE salary > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Which semeseter and year had the fewest students?",
        "gold_parse": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "query": "SELECT year , year FROM section GROUP BY year ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the times used by climbers who climbed mountains in the country of Uganda?",
        "gold_parse": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
        "query": "SELECT Time FROM climber WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many employees do we have?",
        "gold_parse": "SELECT count(*) FROM Employees",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "query": "SELECT T2.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value AND T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "How many different kinds of clients are supported by the web clients accelerators?",
        "gold_parse": "SELECT count(DISTINCT client) FROM web_client_accelerator",
        "query": "SELECT Count ( * ) FROM Web_client_accelerator WHERE Connection = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the average unit price of jazz tracks.",
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "query": "SELECT Avg ( UnitPrice ) FROM Track",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the title of the prerequisite to the course International Finance.",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "List the forenames of all distinct drivers in alphabetical order?",
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "query": "SELECT DISTINCT name FROM races ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of all instructors in the Comp. Sci. department?",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "query": "SELECT name FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "query": "SELECT Award FROM musical WHERE Name = value OR Name = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "gold_parse": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",
        "query": "SELECT council_tax_id , council_tax_id FROM Parking_Fines WHERE council_tax_id = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "query": "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name WHERE T2.dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Which parties have hosts of age above 50? Give me the party locations.",
        "gold_parse": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50",
        "query": "SELECT T1.Party_Theme FROM party AS T1 JOIN host AS T2 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID AND T3.Host_ID = T2.Host_ID WHERE T2.Age > value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "For every student who is registered for some course, how many courses are they registered for?",
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What is the duration of the oldest actor?",
        "gold_parse": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "query": "SELECT Duration FROM actor ORDER BY age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T1.Award = value OR T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "gold_parse": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
        "query": "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "query": "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "query": "SELECT customer_id , card_id , card_number , other_card_details FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "query": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the card type codes and the number of transactions.",
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "query": "SELECT transaction_type , Count ( * ) FROM Financial_Transactions GROUP BY transaction_type",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "query": "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < value GROUP BY Affiliation",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of students who have taken any course in the fall semester of year 2003.",
        "gold_parse": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.year = value",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "How many games are free of injury accidents?",
        "gold_parse": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "query": "SELECT Count ( * ) FROM stadium",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "How many council taxes are collected for renting arrears ?",
        "gold_parse": "SELECT count(*) FROM rent_arrears",
        "query": "SELECT Count ( * ) FROM Customer_Master_Index",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "Show the date of the tallest perpetrator.",
        "gold_parse": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of students and total number of instructors for each department.",
        "gold_parse": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "query": "SELECT Count ( * ) , T1.budget FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "List the number of people injured by perpetrators in ascending order.",
        "gold_parse": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Killed Asc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "gold_parse": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "query": "SELECT * , Player , Source FROM injury_accident WHERE Injury ! = value",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "gold_parse": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "query": "SELECT Nationality FROM host WHERE Age < value INTERSECT SELECT Nationality FROM host WHERE Age > value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "gold_parse": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'",
        "query": "SELECT DISTINCT T2.source_system_code FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = value AND T1.cmi_details = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the schools that were either founded after 1850 or public.",
        "gold_parse": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "query": "SELECT School FROM university WHERE Founded > value OR Founded < value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "gold_parse": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "query": "SELECT Company , Investor FROM entrepreneur ORDER BY Money_Requested Desc",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people who have been on the negative side of debates at least twice.",
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "query": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "gold_parse": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "query": "SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value INTERSECT SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "query": "SELECT card_type_code , Count ( * ) FROM Customers_Cards GROUP BY card_type_code",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
        "query": "SELECT name FROM instructor ORDER BY salary Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "gold_parse": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "query": "SELECT T2.name , T2.Porphyria FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T1.FDA_approved = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the total count of enzymes?",
        "gold_parse": "SELECT count(*) FROM enzyme",
        "query": "SELECT Count ( * ) FROM medicine",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the cities corresponding to employees who help customers with the postal code 70174.",
        "gold_parse": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "query": "SELECT City FROM Customer WHERE PostalCode = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the id and surname of the driver who participated the most number of races?",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "query": "SELECT name FROM instructor WHERE salary = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals who have at 3 or more actors?",
        "gold_parse": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "query": "SELECT Name FROM actor GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many kinds of enzymes are there?",
        "gold_parse": "SELECT count(*) FROM enzyme",
        "query": "SELECT Count ( * ) FROM medicine",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
        "query": "SELECT student_id FROM Student_Course_Attendance ORDER BY date_of_attendance Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
        "gold_parse": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT Count ( * ) FROM takes WHERE year = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the forename and surname of the driver with the shortest laptime?",
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "query": "SELECT name , name FROM races ORDER BY url Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show names of musicals which have at least three actors.",
        "gold_parse": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "query": "SELECT Name FROM actor GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
        "gold_parse": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "query": "SELECT DISTINCT name FROM instructor WHERE salary < ( SELECT Max ( salary ) FROM instructor )",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs.",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Company FROM entrepreneur",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "query": "SELECT T1.Team_Name , T2.School FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show ids, customer ids, names for all accounts.",
        "gold_parse": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "query": "SELECT account_id , customer_id , account_name , other_account_details FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the founded year of the non public school that was founded most recently?",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "query": "SELECT Founded FROM university ORDER BY Founded Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "List the dates of games by the home team name in descending order.",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "query": "SELECT T1.Name , Count ( * ) FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id GROUP BY T2.technician_id",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM enzyme WHERE Chromosome LIKE value GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the weight of the shortest person.",
        "gold_parse": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "query": "SELECT Weight FROM people GROUP BY Weight ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many credit cards does customer Blanche Huels have?",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "gold_parse": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name",
        "query": "SELECT first_name , last_name , gender_mf FROM Customers ORDER BY last_name Asc",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "How many accelerators are not compatible with the browsers listed ?",
        "gold_parse": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser )",
        "query": "SELECT Count ( * ) FROM Web_client_accelerator WHERE id NOT IN ( SELECT Connection FROM Web_client_accelerator WHERE Connection = value )",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered course statistics by order of registration date?",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "query": "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Asc",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "query": "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of the races held after 2017 in Spain?",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the mail date of the document with id 7?",
        "gold_parse": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7",
        "query": "SELECT T1.receipt_date FROM Documents AS T1 JOIN Documents_Mailed AS T2 ON T1.document_id = T2.document_id WHERE T2.document_id = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "gold_parse": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "query": "SELECT Company , Company FROM entrepreneur ORDER BY Money_Requested Desc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the name of the deparment with the highest enrollment?",
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "gold_parse": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = value INTERSECT SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What is the average amount due for all the payments?",
        "gold_parse": "SELECT avg(amount_due) FROM payments",
        "query": "SELECT Avg ( amount_paid ) FROM Payments",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "List the venues of debates in ascending order of the number of audience.",
        "gold_parse": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "query": "SELECT Venue FROM debate ORDER BY Venue Asc",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Show the names of players coached by the rank 1 coach.",
        "gold_parse": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1",
        "query": "SELECT T1.Player_name FROM player AS T1 JOIN coach AS T2 JOIN player_coach AS T3 ON T1.Player_ID = T3.Player_ID AND T3.Coach_ID = T2.Coach_ID WHERE T2.Rank = value AND T1.Rank = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the addresses of customers living in Germany who have had an invoice?",
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "query": "SELECT Address FROM Customer WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "What are the memories and carriers of phones?",
        "gold_parse": "SELECT Memory_in_G ,  Carrier FROM phone",
        "query": "SELECT Name , Carrier FROM phone",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and salaries of instructors who advises students in the History department?",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "gold_parse": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
        "query": "SELECT T1.Name FROM people AS T1 JOIN debate AS T2 JOIN debate_people AS T3 ON T1.People_ID = T3.Affirmative AND T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience > value INTERSECT SELECT T1.Name FROM people AS T1 JOIN debate AS T2 JOIN debate_people AS T3 ON T1.People_ID = T3.Affirmative AND T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience > value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who attended some courses?",
        "gold_parse": "SELECT student_id FROM student_course_attendance",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the last names of employees who serve at most 20 customers?",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( * ) < = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Return the names of all regions other than Denmark.",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "Are the customers holding coupons with amount 500 bad or good?",
        "gold_parse": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
        "query": "SELECT * FROM Discount_Coupons WHERE coupon_amount > value OR coupon_amount < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many documents were shipped by USPS?",
        "gold_parse": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the year and semester when offers the largest number of courses.",
        "gold_parse": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT year , year FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the average number of people injured by all perpetrators?",
        "gold_parse": "SELECT avg(Injured) FROM perpetrator",
        "query": "SELECT Avg ( Killed ) FROM perpetrator",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Count the number of regions.",
        "gold_parse": "SELECT count(*) FROM region",
        "query": "SELECT Count ( * ) FROM storm",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What is the starting year for the oldest technician?",
        "gold_parse": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "query": "SELECT Starting_Year FROM technician ORDER BY Age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of storms that did not affect two or more regions?",
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "How many tracks are in the AAC audio file media type?",
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "query": "SELECT Count ( * ) FROM MediaType WHERE Name = value AND Name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are all details of the students who registered but did not attend any course?",
        "gold_parse": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "query": "SELECT T1.student_details FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Company FROM entrepreneur WHERE Money_Requested < value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of distinct instructors who have taught a course.",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Return the characters and durations for each actor.",
        "gold_parse": "SELECT Character ,  Duration FROM actor",
        "query": "SELECT Name , Duration FROM actor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who took a course in the Fall of 2003?",
        "gold_parse": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.year = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "query": "SELECT T2.Date , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id ORDER BY T2.Competition Desc",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the id of the order made most recently.",
        "gold_parse": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "query": "SELECT T2.order_id FROM Orders AS T1 JOIN Order_Items AS T2 ON T2.order_id = T1.order_id JOIN Shipments AS T3 ON T1.order_id = T3.order_id ORDER BY T3.shipment_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "List the cities which have more than 2 airports sorted by the number of airports.",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "query": "SELECT city FROM airports GROUP BY city ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What country is the artist who made the fewest songs from?",
        "gold_parse": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.country ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What is the id of the most recent order?",
        "gold_parse": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "query": "SELECT T2.customer_id FROM Invoices AS T1 JOIN Orders AS T2 JOIN Shipments AS T3 ON T1.invoice_number = T3.invoice_number AND T3.order_id = T2.order_id ORDER BY T1.invoice_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the phone number of all the customers and staff.",
        "gold_parse": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "query": "SELECT T1.phone_number FROM Customers AS T1 INTERSECT SELECT T2.phone_number FROM Staff AS T2",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the party emails associated with parties that used the party form that is the most common?",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id GROUP BY T2.party_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Which products has been complained by the customer who has filed least amount of complaints?",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "gold_parse": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "query": "SELECT document_name , Count ( * ) FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customer who has the highest amount of loans.",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query": "SELECT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are ids of the all distinct orders, sorted by placement date?",
        "gold_parse": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "query": "SELECT T1.order_id FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id ORDER BY T2.shipment_date Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"",
        "query": "SELECT Count ( * ) FROM teachers WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of students taught by TARRING LEIA.",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"",
        "query": "SELECT Count ( * ) FROM teachers WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total amount of money loaned by banks in New York state?",
        "gold_parse": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "query": "SELECT Sum ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.city = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Who served as an advisor for students who have treasurer votes in the spring election cycle?",
        "gold_parse": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct number of president votes.",
        "gold_parse": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of bank branches that provided some loans.",
        "gold_parse": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "query": "SELECT bname FROM bank",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct majors of students who have treasurer votes.",
        "gold_parse": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "query": "SELECT DISTINCT Major FROM Student",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and credit score of the customers who have some loans.",
        "gold_parse": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "query": "SELECT cust_name , credit_score FROM customer",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the number of customers in the banks at New York City.",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "query": "SELECT Count ( * ) FROM bank WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "query": "SELECT T1.FacID FROM Faculty AS T1 UNION SELECT T2.Advisor FROM Student AS T2",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the name and gender for all artists who released songs in March.",
        "gold_parse": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "query": "SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name WHERE T2.formats = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "List all the username and passwords of users with the most popular role.",
        "gold_parse": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT user_name , user_name FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "gold_parse": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "query": "SELECT Address , Count ( * ) FROM Locations GROUP BY Address",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find all the locations whose names contain the word \"film\".",
        "gold_parse": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"",
        "query": "SELECT Address FROM Locations WHERE Location_Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the total number of airlines?",
        "gold_parse": "SELECT count(*) FROM airlines",
        "query": "SELECT Count ( * ) FROM routes",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What are the total number of the audiences who visited any of the festivals?",
        "gold_parse": "SELECT sum(Num_of_Audience) FROM festival_detail",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty members participate in an activity?",
        "gold_parse": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "query": "SELECT Count ( * ) FROM Activity",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the busiest source airport that runs most number of routes in China.",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.country FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value GROUP BY T1.src_apid ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT T3.Market_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value OR T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the three artists who have produced the most songs, and how many works did they produce?",
        "gold_parse": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT artist_name , Count ( * ) FROM song GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the list of documents that are both in the most three popular type and have the most three popular structure.",
        "gold_parse": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of teachers who teach the student called MADLOCK RAY.",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details and star ratings of the three hotels with the lowest price ranges?",
        "gold_parse": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "query": "SELECT T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.languages = value OR T1.g_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the names of all songs that have 4 minute duration or are in English.",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Tell me the ages of the oldest and youngest students studying major 600.",
        "gold_parse": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
        "query": "SELECT Age , Age FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What is the average age of the female students with secretary votes in the spring election cycle?",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the ranks and the number of male and female faculty for each rank.",
        "gold_parse": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "query": "SELECT Count ( * ) , Rank FROM Faculty WHERE Sex = value GROUP BY Rank",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "query": "SELECT f_id FROM song WHERE rating < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are ordered by their resolution numbers?",
        "gold_parse": "SELECT song_name FROM song ORDER BY resolution",
        "query": "SELECT artist_name FROM files ORDER BY artist_name Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "query": "SELECT T2.f_id , T1.preferred_genre , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating Asc",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the first names of professors who are not playing Canoeing or Kayaking.",
        "gold_parse": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "query": "SELECT Fname FROM Faculty EXCEPT SELECT Fname FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find the number of trains for each station, as well as the station network name and services.",
        "gold_parse": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
        "query": "SELECT T1.network_name , Count ( * ) FROM station AS T1 JOIN route AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of banks in the state of New York?",
        "gold_parse": "SELECT bname FROM bank WHERE state  =  'New York'",
        "query": "SELECT bname FROM bank WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the total number of courses offered.",
        "gold_parse": "SELECT count(*) FROM COURSES",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have class president votes?",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For the airline ids with the top 10 most routes operated, what are their names?",
        "gold_parse": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.alid ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the last names of students with major 50.",
        "gold_parse": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "query": "SELECT LName FROM Student WHERE Major > value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the total amount of loans offered by each bank branch.",
        "gold_parse": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "query": "SELECT Sum ( T2.amount ) , T2.branch_ID FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.branch_ID",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the last name of the staff who has handled the first ever complaint?",
        "gold_parse": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "query": "SELECT T1.last_name FROM Staff AS T1 JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the login names and family names of course author and tutors?",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "query": "SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "gold_parse": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = value AND T2.song_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the top 3 artists with the largest number of songs in the language Bangla?",
        "gold_parse": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT T2.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.languages = value GROUP BY T1.artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.Location_Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What is the placement date of the order whose invoice number is 10?",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "query": "SELECT invoice_date FROM Invoices WHERE invoice_number = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which students are advised by Michael Goodrich? Give me their first and last names.",
        "gold_parse": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "gold_parse": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
        "query": "SELECT T1.id , T1.local_authority FROM station AS T1 JOIN weekly_weather AS T2 ON T1.id = T2.station_id WHERE T2.precipitation > value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "For each product, show its name and the number of times it was ordered.",
        "gold_parse": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration < value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "query": "SELECT address_line_2 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "gold_parse": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "query": "SELECT T1.phone_number FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "query": "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = value OR T2.rating > value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of students taught by the teacher KAWA GORDON.",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes go from the United States to Canada?",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What document types do have more than 10000 total access number.",
        "gold_parse": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000",
        "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT Avg ( Age ) FROM Student WHERE city_code = value AND Major = value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'",
        "query": "SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "How many different services are provided by all stations?",
        "gold_parse": "SELECT count(DISTINCT services) FROM station",
        "query": "SELECT Count ( * ) FROM train",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "query": "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = value OR T2.resolution > value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of students in one classroom.",
        "gold_parse": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM teachers GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are all the different product names, and how many complains has each received?",
        "gold_parse": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "How many users are logged in?",
        "gold_parse": "SELECT count(*) FROM users WHERE user_login  =  1",
        "query": "SELECT Count ( * ) FROM Roles",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the names of the activities Mark Giuliano is involved in",
        "gold_parse": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid JOIN Faculty AS T3 ON T2.FacID = T3.FacID WHERE T3.Lname = value AND T3.Lname = value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Which is the email of the party that has used the services the most number of times?",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT party_email FROM Parties GROUP BY party_phone ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the dates of orders which belong to the customer named \"Jeramie\".",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.access_count , Avg ( T1.access_count ) FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code GROUP BY T2.section_title ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the number of distinct students enrolled in courses.",
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the activity names and the number of faculty involved in each activity.",
        "gold_parse": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "query": "SELECT activity_name , Count ( * ) FROM Activity GROUP BY activity_name",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "query": "SELECT DISTINCT cust_name FROM customer ORDER BY acc_bal Asc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes whose destination airports are in Canada.",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT T1.email_address FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the types of schools that have two schools.",
        "gold_parse": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2",
        "query": "SELECT Type FROM school GROUP BY Type HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the file sizes and formats for all songs with a resolution lower than 800?",
        "gold_parse": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "query": "SELECT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the different names for all songs that have a higher resolution than English songs?",
        "gold_parse": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "query": "SELECT DISTINCT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution > value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "On which day was the order placed whose shipment tracking number is 3452?",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "query": "SELECT T1.invoice_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.shipment_tracking_number = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes from the United States to Canada.",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 GROUP BY T1.Classroom ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many airports are there per city in the US ordered from most to least?",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the dates of enrollment and completion of students.",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_latest_logon , T3.test_result FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
        "gold_parse": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
        "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the ids of the students who participate in Canoeing and Kayaking.",
        "gold_parse": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "query": "SELECT stuid FROM Participates_in",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes end in a Canadian airport?",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students does KAWA GORDON teaches?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details and ways to get to tourist attractions related to royal family?",
        "gold_parse": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "query": "SELECT T3.Market_Details , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
        "gold_parse": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "query": "SELECT LastName FROM list WHERE FirstName = value EXCEPT SELECT LastName FROM list WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the number of audience in year 2008 or 2010.",
        "gold_parse": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
        "query": "SELECT Count ( * ) FROM festival_detail WHERE Year = value OR Year = value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Individuals AS T2 WHERE T2.individual_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the names of the three most recent festivals.",
        "gold_parse": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
        "query": "SELECT Chair_Name FROM festival_detail ORDER BY Year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the dates of the tests taken with result \"Pass\".",
        "gold_parse": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
        "query": "SELECT T1.date_of_registration FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the country with the most number of home airlines?",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT country FROM airports GROUP BY country ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
        "gold_parse": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query": "SELECT invoice_number FROM Invoices WHERE invoice_date > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "In how many cities are there airports in the country of Greenland?",
        "gold_parse": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
        "gold_parse": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T2.course_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "gold_parse": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "query": "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
        "gold_parse": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
        "query": "SELECT duration , duration , formats FROM files ORDER BY duration Asc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "query": "SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of routes whose destinations are Italian airports?",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "gold_parse": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"",
        "query": "SELECT Max ( low_temperature ) , Avg ( low_temperature ) FROM weekly_weather",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many female Professors do we have?",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Sort the information about course authors and tutors in alphabetical order of the personal name.",
        "gold_parse": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query": "SELECT T2.course_description , T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id ORDER BY T1.personal_name Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Give me a list of the names of all songs ordered by their resolution.",
        "gold_parse": "SELECT song_name FROM song ORDER BY resolution",
        "query": "SELECT artist_name FROM files ORDER BY artist_name Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "gold_parse": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
        "query": "SELECT Name , Description FROM Tourist_Attractions WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the name of the youngest organization.",
        "gold_parse": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "query": "SELECT organization_name FROM Organizations ORDER BY date_formed Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who have more than one loan.",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "query": "SELECT cust_name FROM customer GROUP BY cust_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "List all the activities we have.",
        "gold_parse": "SELECT activity_name FROM Activity",
        "query": "SELECT Room FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it.",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id = T2.individual_id ORDER BY T2.date_contact_to Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the structure of the document with the least number of accesses?",
        "gold_parse": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT section_code FROM Document_Sections GROUP BY section_code ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances of customers with the letter a in their names?",
        "gold_parse": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "query": "SELECT cust_name , credit_score FROM customer WHERE cust_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes that have destination John F Kennedy International Airport.",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the enrollment date for all the tests that have \"Pass\" result.",
        "gold_parse": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
        "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the price ranges of five star hotels?",
        "gold_parse": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"",
        "query": "SELECT price_range FROM Hotels",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "gold_parse": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"",
        "query": "SELECT Name FROM artwork WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Return the structure description of the document that has been accessed the fewest number of times.",
        "gold_parse": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.section_title FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code GROUP BY T1.document_name ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?",
        "gold_parse": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'",
        "query": "SELECT Year FROM festival_detail WHERE Location = value INTERSECT SELECT Year FROM festival_detail WHERE Location = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "List all the distinct president votes and the vice president votes.",
        "gold_parse": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "query": "SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value AND T1.Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "How many products are there?",
        "gold_parse": "SELECT count(*) FROM Products",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who have loans of both Mortgages and Auto.",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
        "query": "SELECT cust_name FROM customer INTERSECT SELECT cust_name FROM customer",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
        "gold_parse": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
        "query": "SELECT T2.Name , T2.Opening_Hours FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Location_Name = value OR T1.Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the distinct buildings that have faculty rooms.",
        "gold_parse": "SELECT DISTINCT building FROM Faculty",
        "query": "SELECT DISTINCT Building FROM Faculty WHERE Room = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the average number of bank customers?",
        "gold_parse": "SELECT avg(no_of_customers) FROM bank",
        "query": "SELECT Avg ( credit_score ) FROM customer",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the id of the routes whose source and destination airports are in the United States?",
        "gold_parse": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT T1.rid , T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "List the ids of all distinct orders ordered by placed date.",
        "gold_parse": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "query": "SELECT DISTINCT T1.order_id FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id ORDER BY T2.shipment_date Asc",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "gold_parse": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query": "SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date > = value",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "Show the names of employees that work for companies with sales bigger than 200.",
        "gold_parse": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
        "query": "SELECT Name FROM company WHERE Sales_in_Billion > value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "query": "SELECT T2.f_id , T1.g_name , T2.artist_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is ORDER BY T2.rating Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
        "gold_parse": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "query": "SELECT T1.Address , Count ( * ) FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query": "SELECT T2.cust_name , T2.credit_score FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.amount > value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "How many distinct complaint type codes are there in the database?",
        "gold_parse": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "query": "SELECT Count ( DISTINCT product_category_code ) FROM Products",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of different different airports that are destinations for American Airlines?",
        "gold_parse": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "query": "SELECT Count ( DISTINCT T1.rid ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "gold_parse": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
        "query": "SELECT T1.customer_name , T1.payment_method FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value INTERSECT SELECT T1.customer_name , T1.payment_method FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the average elevation of all airports for each country.",
        "gold_parse": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
        "query": "SELECT country , Avg ( y ) FROM airports GROUP BY country",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.",
        "gold_parse": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "query": "SELECT T2.Fname , T2.Lname FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all singers that are from the UK and released a song in English?",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products that are in at least two events.",
        "gold_parse": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2",
        "query": "SELECT Product_Name FROM Products GROUP BY Product_Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 5?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Grade Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value INTERSECT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
        "gold_parse": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
        "query": "SELECT Name , Description FROM Tourist_Attractions WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Which state has the greatest total number of bank customers?",
        "gold_parse": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "query": "SELECT T1.state FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Which orders have shipment after 2000-01-01? Give me the order ids.",
        "gold_parse": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "query": "SELECT T2.order_id FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T1.invoice_date > value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
        "gold_parse": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "query": "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = value OR T1.Feature_Details = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find name of the services that has never been used.",
        "gold_parse": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "query": "SELECT service_name FROM Services EXCEPT SELECT service_name FROM Services",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the login names and family names of course author and tutors.",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "query": "SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many activities does Mark Giuliano participate in?",
        "gold_parse": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "gold_parse": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value GROUP BY T2.customer_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Return the completion date for all the tests that have \"Fail\" result.",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T2.course_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the personal names used both by some course authors and some students?",
        "gold_parse": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
        "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the first name and last name for all the instructors.",
        "gold_parse": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "query": "SELECT Fname , Lname FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Return the party email that has used party services the greatest number of times.",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Services AS T2 ON T1.party_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the cities which have exactly two airports.",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the student IDs and middle names of the students enrolled in at most two courses?",
        "gold_parse": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
        "query": "SELECT T2.student_id , T1.middle_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the id of all the files in mp3 format?",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "query": "SELECT f_id FROM song WHERE song_name = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "query": "SELECT DISTINCT LName FROM Student EXCEPT SELECT LName FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Sex = value AND T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each classroom, report the classroom number and the number of grades using it.",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the name of the customer who has greatest total loan amount?",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query": "SELECT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID GROUP BY T2.cust_name ORDER BY Sum ( T3.amount ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What buildings have faculty offices?",
        "gold_parse": "SELECT DISTINCT building FROM Faculty",
        "query": "SELECT Building FROM Faculty WHERE Building = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many male and female assistant professors do we have?",
        "gold_parse": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value AND Rank = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Count the number of Professors who have office in building NEB.",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Building = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "gold_parse": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "query": "SELECT acc_bal , credit_score FROM customer WHERE cust_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "gold_parse": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "query": "SELECT DISTINCT product_id FROM Order_Items WHERE order_id BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What is the name of each course and the corresponding number of student enrollment?",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "query": "SELECT T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the name of the bank branch with the greatest number of customers?",
        "gold_parse": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.branch_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of students studying in room 111.",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Return the cities with more than 3 airports in the United States.",
        "gold_parse": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the transportation method most people choose to get to tourist attractions.",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of all the teachers that teach GELL TAMI.",
        "gold_parse": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "query": "SELECT LastName FROM teachers WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attraction is associated with the photo \"game1\"? Return its name.",
        "gold_parse": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What is the most common major among female (sex is F) students?",
        "gold_parse": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Sex FROM Student WHERE Sex = value GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each country and airline name, how many routes are there?",
        "gold_parse": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "query": "SELECT country , Count ( * ) FROM airports GROUP BY country",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "List all the image name and URLs in the order of their names.",
        "gold_parse": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
        "query": "SELECT document_name , access_count FROM Documents ORDER BY document_name Asc",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "query": "SELECT DISTINCT LName FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "query": "SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the order id and customer id associated with the oldest order.",
        "gold_parse": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "query": "SELECT order_id , customer_id FROM Orders ORDER BY customer_id Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T2.price_range FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which students have professors as their advisors? Find their student ids.",
        "gold_parse": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"",
        "query": "SELECT StuID FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "gold_parse": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2",
        "query": "SELECT T1.Artwork_ID , T1.Name FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID GROUP BY T2.Festival_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct majors that students with treasurer votes are studying?",
        "gold_parse": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "query": "SELECT DISTINCT Major FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are all the dates of enrollment and completion in record?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
        "gold_parse": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "query": "SELECT Count ( * ) , Grade FROM list GROUP BY Grade",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "List the name and count of each product in all orders.",
        "gold_parse": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes does American Airlines operate?",
        "gold_parse": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "query": "SELECT Count ( * ) FROM routes",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "gold_parse": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME",
        "query": "SELECT train_number , time FROM train ORDER BY time Asc",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the average number of customers cross all banks.",
        "gold_parse": "SELECT avg(no_of_customers) FROM bank",
        "query": "SELECT Avg ( credit_score ) FROM customer",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 4?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the detail of the location UK Gallery?",
        "gold_parse": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "query": "SELECT Address FROM Locations WHERE Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "gold_parse": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "query": "SELECT acc_type , Avg ( no_of_loans ) FROM customer WHERE credit_score < value GROUP BY acc_type",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "gold_parse": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the first and last name of the faculty who has the most students?",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Fname , Lname FROM Faculty GROUP BY FacID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the name of airline which runs the most number of routes.",
        "gold_parse": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.airline ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Count the number of distinct names associated with the photos.",
        "gold_parse": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "query": "SELECT Count ( DISTINCT Name ) FROM Tourist_Attractions",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names and ids of the tourist attractions that are visited at most once?",
        "gold_parse": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "query": "SELECT email_address , phone_number FROM Customers ORDER BY email_address Asc",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "How many trains have 'Express' in their names?",
        "gold_parse": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
        "query": "SELECT Count ( * ) FROM train WHERE name = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT Avg ( Age ) FROM Student WHERE city_code = value AND Major = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
        "gold_parse": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "query": "SELECT T2.Fname FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "How many courses are there in total?",
        "gold_parse": "SELECT count(*) FROM COURSES",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "gold_parse": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > value EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many airlines are there?",
        "gold_parse": "SELECT count(*) FROM airlines",
        "query": "SELECT Count ( * ) FROM routes",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "query": "SELECT email_address , phone_number FROM Customers ORDER BY email_address Asc",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"",
        "query": "SELECT T1.date_of_latest_logon , T2.course_name FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T1.personal_name = value AND T2.course_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total number of customers who use banks in New York City?",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "query": "SELECT Count ( * ) FROM bank WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "query": "SELECT T1.FacID FROM Faculty AS T1 UNION SELECT T2.Advisor FROM Student AS T2",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students does one classroom have?",
        "gold_parse": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) FROM list",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who do not have an saving account.",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the information about course authors and tutors in alphabetical order of the personal name.",
        "gold_parse": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query": "SELECT T2.course_description , T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id ORDER BY T1.personal_name Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT T1.email_address FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Count the number of tourists who did not visit any place.",
        "gold_parse": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "query": "SELECT Count ( * ) FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the song that was released most recently?",
        "gold_parse": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.f_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?",
        "gold_parse": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT artist_name FROM song WHERE resolution > value GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
        "gold_parse": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "query": "SELECT DISTINCT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products and the number of events they are in.",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "List the name of all products along with the number of complaints that they have received.",
        "gold_parse": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "query": "SELECT T1.product_name , Count ( * ) FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the visit date and details of the tourist whose detail is 'Vincent'",
        "gold_parse": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
        "query": "SELECT T3.Visit_Date , T3.Visit_Details FROM Tourist_Attractions AS T1 JOIN Shops AS T2 ON T2.Shop_ID = T1.Tourist_Attraction_ID JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID WHERE T2.Shop_Details = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the last names of students in room 111?",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average rating of songs for each language?",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "query": "SELECT T1.rating , Avg ( T2.rating ) FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T2.languages",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.",
        "gold_parse": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Attraction_Type_Description , Attraction_Type_Code FROM Ref_Attraction_Types GROUP BY Attraction_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Count the number of male students who had class senator votes in the fall election cycle.",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Give me the number of faculty members who participate in an activity",
        "gold_parse": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "query": "SELECT Count ( * ) FROM Activity",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the airline with the most routes?",
        "gold_parse": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.rid ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the last names of individuals who have been contact individuals for an organization?",
        "gold_parse": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "query": "SELECT individual_last_name FROM Individuals",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names and number of works of the three artists who have produced the most songs.",
        "gold_parse": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "How many available hotels are there in total?",
        "gold_parse": "SELECT count(*) FROM HOTELS",
        "query": "SELECT Count ( * ) FROM Ref_Hotel_Star_Ratings",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What is the total number of faculty members?",
        "gold_parse": "SELECT count(*) FROM Faculty",
        "query": "SELECT Count ( * ) FROM Activity",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the common login name of course authors and students.",
        "gold_parse": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
        "query": "SELECT DISTINCT T2.course_name , T1.login_name FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each grade 0 classroom, return the classroom number and the count of students.",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct last names of the students who have class president votes.",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "what are the order id and customer id of the oldest order?",
        "gold_parse": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "query": "SELECT order_id , customer_id FROM Orders ORDER BY customer_id Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "query": "SELECT T2.product_id , T1.customer_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code = value OR T1.order_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the average price range of hotels that have 5 star ratings and allow pets.",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "query": "SELECT Avg ( T2.price_range ) FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.star_rating_description = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "How many voting records do we have?",
        "gold_parse": "SELECT count(*) FROM VOTING_RECORD",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the dates of the orders made by the customer named \"Jeramie\"?",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?",
        "gold_parse": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "query": "SELECT Fname FROM Faculty EXCEPT SELECT Fname FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of the different banks that have provided loans?",
        "gold_parse": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "query": "SELECT DISTINCT bname FROM bank",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
        "gold_parse": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT artist_name FROM song WHERE languages = value GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
        "gold_parse": "SELECT document_name ,  access_count FROM documents ORDER BY document_name",
        "query": "SELECT document_name FROM Documents ORDER BY access_count Asc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of different airports which are the destinations of the American Airlines.",
        "gold_parse": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "query": "SELECT Count ( DISTINCT rid ) FROM routes WHERE airline = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the total account balances for each customer from Utah or Texas?",
        "gold_parse": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "query": "SELECT Sum ( credit_score ) FROM customer WHERE state = value OR state = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name, city, country, and elevation for every airport in the city of New York?",
        "gold_parse": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "query": "SELECT name , country , elevation FROM airports WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the maximum elevation of all airports in the country of Iceland?",
        "gold_parse": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'",
        "query": "SELECT Max ( y ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that can be accessed by bus?",
        "gold_parse": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
        "query": "SELECT Name FROM Tourist_Attractions",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "gold_parse": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "query": "SELECT state , Sum ( no_of_loans ) FROM customer WHERE credit_score > value GROUP BY state",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many Bangladeshi artists are listed?",
        "gold_parse": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "query": "SELECT Count ( * ) FROM genre",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T2.date_of_enrolment , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the first name and last name of all the instructors?",
        "gold_parse": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "query": "SELECT Fname , Lname FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "query": "SELECT DISTINCT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID ORDER BY T3.amount Asc",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Count the number of services.",
        "gold_parse": "SELECT count(*) FROM services",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
        "gold_parse": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "query": "SELECT Fname FROM Faculty UNION SELECT Fname FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT Count ( * ) FROM Student WHERE city_code = value AND Major = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "query": "SELECT f_id FROM song WHERE resolution > value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many teachers does the student named MADLOCK RAY have?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find all the order items whose product id is 11. What are the order item ids?",
        "gold_parse": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "query": "SELECT order_id FROM Order_Items WHERE product_id = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "gold_parse": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid JOIN Faculty AS T3 ON T2.FacID = T3.FacID WHERE T3.Lname = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who have taken out more than one loan?",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "query": "SELECT cust_name FROM customer GROUP BY cust_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the description of the most popular role among the users that have logged in.",
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT T1.role_description FROM Roles AS T1 JOIN Users AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the average number of customers in all banks of Utah state.",
        "gold_parse": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "query": "SELECT Avg ( T2.credit_score ) FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.state = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "query": "SELECT DISTINCT LName FROM Student WHERE Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "what are the last names of the teachers who teach grade 5?",
        "gold_parse": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
        "query": "SELECT LastName FROM list WHERE Grade = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Report the distinct president vote and the vice president vote.",
        "gold_parse": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "query": "SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value AND T1.Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of the teachers that teach fifth grade.",
        "gold_parse": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
        "query": "SELECT LastName FROM list ORDER BY Grade Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the city and name of bank branches that provide business loans.",
        "gold_parse": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "query": "SELECT T1.city , T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What is the date of enrollment of the course named \"Spanish\"?",
        "gold_parse": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"",
        "query": "SELECT T3.date_of_enrolment FROM Subjects AS T1 JOIN Courses AS T2 ON T1.subject_id = T2.subject_id JOIN Student_Course_Enrolment AS T3 ON T2.course_id = T3.course_id WHERE T1.subject_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the first names of the teachers that teach first grade.",
        "gold_parse": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
        "query": "SELECT DISTINCT FirstName FROM list WHERE Grade = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the names of the customers who have made two or less orders?",
        "gold_parse": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT T3.Market_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T3.Market_Details = value OR T1.Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the average price of hotels for different pet policy.",
        "gold_parse": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "query": "SELECT T2.price_range , Avg ( T2.price_range ) FROM Ref_Attraction_Types AS T1 JOIN Hotels AS T2 GROUP BY T1.Attraction_Type_Code",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers who have the most mailshots.",
        "gold_parse": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the usernames and passwords of users that have the most common role?",
        "gold_parse": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT user_id , user_id FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
        "gold_parse": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
        "query": "SELECT Name FROM Tourist_Attractions",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total number of customers across banks?",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank",
        "query": "SELECT Count ( * ) FROM bank",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the ids of all the order items whose product id is 11.",
        "gold_parse": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "query": "SELECT order_id FROM Order_Items WHERE product_id = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the name of the teacher who teaches the largest number of students.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT FirstName FROM list GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the detail of each visitor?",
        "gold_parse": "SELECT Tourist_Details FROM VISITORS",
        "query": "SELECT Address FROM Locations",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct secretary votes in the fall election cycle?",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the faculty ranks and the number of students advised by each rank.",
        "gold_parse": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What is the name of the organization that was formed most recently?",
        "gold_parse": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "query": "SELECT T1.organization_name FROM Organizations AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T2.organization_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "gold_parse": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.credit_score < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
        "gold_parse": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "query": "SELECT song_name FROM song WHERE rating < ( SELECT Min ( rating ) FROM song )",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the branch names of banks in the New York state.",
        "gold_parse": "SELECT bname FROM bank WHERE state  =  'New York'",
        "query": "SELECT bname FROM bank WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "gold_parse": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"",
        "query": "SELECT T1.name , T2.network_name FROM train AS T1 JOIN station AS T2 JOIN route AS T3 ON T1.id = T3.train_id AND T3.station_id = T2.id WHERE T2.network_name = value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the prices of products that have never gotten a complaint?",
        "gold_parse": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "query": "SELECT product_price FROM Products EXCEPT SELECT product_price FROM Products",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T2.course_name = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many songs have 4 minute duration?",
        "gold_parse": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "query": "SELECT Count ( * ) FROM genre",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of routes that end at John F Kennedy International Airport?",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "query": "SELECT Count ( * ) FROM routes WHERE src_ap = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the shops that can be accessed by walk?",
        "gold_parse": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
        "query": "SELECT Shop_Details FROM Shops",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct ages of students who have secretary votes in the fall election cycle?",
        "gold_parse": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "query": "SELECT DISTINCT Age FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct ages of students who have secretary votes in the fall election cycle.",
        "gold_parse": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "query": "SELECT DISTINCT Age FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What are the names and locations of festivals?",
        "gold_parse": "SELECT Festival_Name ,  LOCATION FROM festival_detail",
        "query": "SELECT Chair_Name , Location FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What is the name of the party form that is most common?",
        "gold_parse": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id GROUP BY T2.party_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of the shops that can be reached by walk.",
        "gold_parse": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
        "query": "SELECT Shop_Details FROM Shops",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show first name and last name for all the students advised by Michael Goodrich.",
        "gold_parse": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the airport with the most number of routes that start in China?",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM airports WHERE country = value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the number of voting records in total.",
        "gold_parse": "SELECT count(*) FROM VOTING_RECORD",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the names and ids of tourist attractions that are visited at least two times.",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the first names and last names of the students who are 18 years old and have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Election_Cycle = value AND T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Count the number of users that are logged in.",
        "gold_parse": "SELECT count(*) FROM users WHERE user_login  =  1",
        "query": "SELECT Count ( * ) FROM Roles",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
        "gold_parse": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "query": "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = value AND T2.rating < value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the subject names.",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "query": "SELECT login_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the songs that are modern or sung in English?",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T1.g_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the average credit score for customers who have taken a loan?",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "query": "SELECT Avg ( T2.credit_score ) FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the number of activities Mark Giuliano is involved in.",
        "gold_parse": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
        "gold_parse": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
        "query": "SELECT T2.course_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.login_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the name of the most popular party form.",
        "gold_parse": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT party_phone FROM Parties GROUP BY party_phone ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the name and the number of enrolled student for each course.",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "query": "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query": "SELECT T2.cust_name , T2.acc_bal FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.amount > value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What are the cities with exactly two airports?",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and cities of bank branches that offer loans for business?",
        "gold_parse": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "query": "SELECT T2.cust_name , T1.city FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
        "gold_parse": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "query": "SELECT StuID FROM Student WHERE Age BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "gold_parse": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "query": "SELECT DISTINCT product_id FROM Order_Items WHERE order_item_id BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Visit_Details = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the faculty id and the number of students each faculty has?",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY FacID",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct first names of the students who have class president votes?",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students does LORIA ONDERSMA teaches?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value AND LastName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the id and star rating of each hotel and sort them in increasing order of price.",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Count the number of female Professors we have.",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the average prices of hotels grouped by their pet policy.",
        "gold_parse": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "query": "SELECT Avg ( T2.price_range ) , T1.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Hotels AS T2 GROUP BY T1.Attraction_Type_Code",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the emails of parties with the most popular party form.",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT party_email FROM Parties GROUP BY party_email ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty do we have?",
        "gold_parse": "SELECT count(*) FROM Faculty",
        "query": "SELECT Count ( * ) FROM Activity",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each grade 0 classroom, report the total number of students.",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Grade FROM list GROUP BY Grade",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the average credit score of the customers who have some loan.",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "query": "SELECT Avg ( credit_score ) FROM customer",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the number of male and female assistant professors.",
        "gold_parse": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value AND Rank = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id of the longest song?",
        "gold_parse": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "query": "SELECT f_id FROM song ORDER BY releasedate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the prices of products which has never received a single complaint.",
        "gold_parse": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "query": "SELECT product_price FROM Products EXCEPT SELECT product_price FROM Products",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "query": "SELECT artist_name , country FROM song ORDER BY rating Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each country, what is the average elevation of that country's airports?",
        "gold_parse": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
        "query": "SELECT country , Avg ( y ) FROM airports GROUP BY country",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "gold_parse": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "query": "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = value",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "List names for drivers from Hartford city and younger than 40.",
        "gold_parse": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40",
        "query": "SELECT Name FROM driver WHERE Home_city = value AND Age < value INTERSECT SELECT Name FROM driver WHERE Age > value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many songs, on average, are sung by a female artist?",
        "gold_parse": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "query": "SELECT Avg ( * ) FROM artist WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organizations AS T2 JOIN Organization_Contact_Individuals AS T3 ON T1.individual_id = T3.individual_id AND T3.organization_id = T2.organization_id ORDER BY T2.uk_vat_number Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the artist who produced the shortest song?",
        "gold_parse": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "query": "SELECT artist_name FROM song ORDER BY rating Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
        "gold_parse": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T2.course_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes with destination airports in Italy.",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Return the codes of the document types that do not have a total access count of over 10000.",
        "gold_parse": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000",
        "query": "SELECT document_code FROM Documents EXCEPT SELECT document_type_code FROM Documents WHERE access_count > value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
        "gold_parse": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "query": "SELECT activity_name , Count ( * ) FROM Activity GROUP BY activity_name",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "query": "SELECT f_id FROM song WHERE resolution > ( SELECT Avg ( resolution ) FROM song )",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct first names of the students who have class senator votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average rating and resolution of all bangla songs?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
        "gold_parse": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
        "query": "SELECT Fname FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
        "gold_parse": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "query": "SELECT LastName FROM teachers WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the count of the songs that last approximately 4 minutes?",
        "gold_parse": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "query": "SELECT Count ( * ) FROM files WHERE duration < value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
        "gold_parse": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "query": "SELECT name , country , elevation FROM airports WHERE city = value OR city = value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the last name of the individuals that have been contact individuals of an organization.",
        "gold_parse": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "query": "SELECT DISTINCT individual_last_name FROM Individuals",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the names of the courses that have just one student enrollment.",
        "gold_parse": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "gold_parse": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query": "SELECT invoice_number FROM Invoices WHERE invoice_date > = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Count the number of students the teacher LORIA ONDERSMA teaches.",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , credit_score FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "gold_parse": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
        "query": "SELECT T2.Name , T2.Opening_Hours FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Location_Name = value OR T1.Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the id, name of each festival and the number of artworks it has nominated.",
        "gold_parse": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID",
        "query": "SELECT T1.Artwork_ID , T1.Name , Count ( * ) FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID GROUP BY T2.Festival_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "How many tourists did not make any visit?",
        "gold_parse": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "query": "SELECT Count ( * ) FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "How many distinct types of accounts are there?",
        "gold_parse": "SELECT count(DISTINCT acc_type) FROM customer",
        "query": "SELECT Count ( DISTINCT loan_type ) FROM loan",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "gold_parse": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "query": "SELECT T1.artist_name FROM artist AS T1 EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.rating > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "How many customers are there?",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the faculty ids of all the male faculty members?",
        "gold_parse": "SELECT FacID FROM Faculty WHERE Sex  =  'M'",
        "query": "SELECT FacID FROM Faculty WHERE Sex = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
        "gold_parse": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "query": "SELECT LastName FROM list WHERE FirstName = value EXCEPT SELECT LastName FROM list WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the file size and format for all songs that have resolution lower than 800.",
        "gold_parse": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "query": "SELECT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many artists are male and how many are female?",
        "gold_parse": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "query": "SELECT Count ( * ) FROM artist WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "gold_parse": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name",
        "query": "SELECT Product_Name FROM Products GROUP BY Product_Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the names and ids of tourist attractions that are visited at most once.",
        "gold_parse": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who do not have saving accounts?",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query": "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many Professors are in building NEB?",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Building = value",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find the number and time of the train that goes from Chennai to Guruvayur.",
        "gold_parse": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'",
        "query": "SELECT train_number , time FROM train WHERE destination = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "gold_parse": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "query": "SELECT DISTINCT artist_name FROM song EXCEPT SELECT artist_name FROM song WHERE rating > value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes operated by American Airlines.",
        "gold_parse": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "query": "SELECT Count ( * ) FROM routes WHERE airline = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of singers who are from UK and released an English song.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the first names of the teachers who teach grade 1?",
        "gold_parse": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
        "query": "SELECT DISTINCT FirstName FROM list WHERE Grade = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the total amount of loans provided by bank branches in the state of New York.",
        "gold_parse": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "query": "SELECT Sum ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.city = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "On what day was the order with invoice number 10 placed?",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "query": "SELECT invoice_date FROM Invoices WHERE invoice_number < value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty members do we have for each rank and gender?",
        "gold_parse": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "query": "SELECT Count ( * ) , Sex FROM Faculty GROUP BY Rank",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct president votes on 08/30/2015?",
        "gold_parse": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
        "query": "SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Which course author teaches the \"advanced database\" course? Give me his or her login name.",
        "gold_parse": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"",
        "query": "SELECT T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "gold_parse": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category",
        "query": "SELECT product_category , Count ( * ) FROM Products GROUP BY product_category",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Count the number of customers.",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Return all the distinct secretary votes made in the fall election cycle.",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total account balance for customers with a credit score of above 100 for the different states?",
        "gold_parse": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "query": "SELECT state , Sum ( no_of_loans ) FROM customer WHERE credit_score > value GROUP BY state",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which are the first and last names of the students taught by MARROTTE KIRK?",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value AND LastName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each airport name, how many routes start at that airport?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the first and last names of all the female students who have president votes?",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Sex = value AND T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names and genders of all artists who released songs in the month of March?",
        "gold_parse": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "query": "SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name WHERE T2.formats LIKE value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the names of the services that have never been used?",
        "gold_parse": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "query": "SELECT service_name FROM Services EXCEPT SELECT service_name FROM Services",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "How many artworks are there?",
        "gold_parse": "SELECT count(*) FROM artwork",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "How many services are there?",
        "gold_parse": "SELECT count(*) FROM services",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the details and star ratings of the 3 least expensive hotels.",
        "gold_parse": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "query": "SELECT T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the names of documents that have both one of the three most common types and one of three most common structures?",
        "gold_parse": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "gold_parse": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
        "query": "SELECT T3.Visit_Date , T3.Visit_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Visits AS T3 ON T2.Tourist_Attraction_ID = T3.Tourist_Attraction_ID WHERE T1.Other_Details = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.",
        "gold_parse": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "query": "SELECT stuid FROM Participates_in WHERE actid = value INTERSECT SELECT stuid FROM Participates_in WHERE actid = value",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "Show the names of companies and the number of employees they have",
        "gold_parse": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
        "query": "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the party with drivers from Hartford and drivers older than 40.",
        "gold_parse": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40",
        "query": "SELECT Party FROM driver WHERE Home_city = value AND Age > value INTERSECT SELECT Party FROM driver WHERE Age > value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "query": "SELECT email_address , phone_number FROM Staff EXCEPT SELECT email_address , phone_number FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the ids of the faculty members who do not advise any student.",
        "gold_parse": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "query": "SELECT T1.FacID FROM Faculty AS T1 EXCEPT SELECT T2.FacID FROM Faculty_Participates_in AS T2",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the address of the location named \"UK Gallery\".",
        "gold_parse": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "query": "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the average price range of five star hotels that allow pets?",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "query": "SELECT Avg ( price_range ) FROM Hotels",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the average credit score for customers who have never taken a loan?",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "query": "SELECT Avg ( T1.credit_score ) FROM customer AS T1 WHERE T1.cust_name NOT IN ( SELECT T2.cust_ID FROM loan AS T2 WHERE T2.loan_type = value )",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What are the cities that have more than 2 airports sorted by number of airports?",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.Secretary_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all male British artists?",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "query": "SELECT artist_name FROM artist WHERE gender = value AND gender = value",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "What is the average high temperature for each day of week?",
        "gold_parse": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",
        "query": "SELECT day_of_week , Avg ( low_temperature ) FROM weekly_weather GROUP BY day_of_week",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
        "gold_parse": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "query": "SELECT T2.Fname , T2.Lname , Count ( * ) FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organizations AS T2 JOIN Organization_Contact_Individuals AS T3 ON T1.individual_id = T3.individual_id AND T3.organization_id = T2.organization_id WHERE T2.organization_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the name and phone of the customer without any mailshot.",
        "gold_parse": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "query": "SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Customer_Orders AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the names and urls of images, sorted alphabetically?",
        "gold_parse": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
        "query": "SELECT document_name , access_count FROM Documents ORDER BY document_name Asc",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "query": "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the last names of students studying major 50?",
        "gold_parse": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "query": "SELECT LName FROM Student WHERE Major > value",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the type of school and the number of buses for each type.",
        "gold_parse": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type",
        "query": "SELECT Type , Count ( * ) FROM school GROUP BY Type",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of all English songs.",
        "gold_parse": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT song_name FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the song that was released in the most recent year?",
        "gold_parse": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id ORDER BY T2.releasedate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the name of the customer with the worst credit score?",
        "gold_parse": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , credit_score FROM customer",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "query": "SELECT shipment_date FROM Shipments WHERE shipment_tracking_number = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"",
        "query": "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Shops AS T3 ON T2.Tourist_Attraction_ID = T3.Shop_ID WHERE T3.Shop_Details = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query": "SELECT T1.artist_name , T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What is the location of the festival with the largest number of audience?",
        "gold_parse": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
        "query": "SELECT Location FROM festival_detail GROUP BY Location ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the names of the drivers without a school bus.",
        "gold_parse": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
        "query": "SELECT Name FROM driver EXCEPT SELECT Name FROM driver",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "query": "SELECT artist_name FROM song WHERE song_name = value AND rating < value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the different names and credit scores of customers who have taken a loan?",
        "gold_parse": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "query": "SELECT DISTINCT T2.cust_name , T2.credit_score FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes for each source airport and the airport name.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists who sang the shortest song?",
        "gold_parse": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "query": "SELECT artist_name FROM song ORDER BY rating Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the total number of available hotels.",
        "gold_parse": "SELECT count(*) FROM HOTELS",
        "query": "SELECT Count ( * ) FROM Ref_Hotel_Star_Ratings",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the state which has the most number of customers.",
        "gold_parse": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "query": "SELECT state FROM customer GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "How many distinct names are associated with all the photos?",
        "gold_parse": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "query": "SELECT Count ( DISTINCT Name ) FROM Tourist_Attractions",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
        "gold_parse": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
        "query": "SELECT T1.Name , T2.Visit_Date FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = value OR T1.Name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the description and code of the attraction type most tourist attractions belong to.",
        "gold_parse": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Attraction_Type_Description , Attraction_Type_Code FROM Ref_Attraction_Types GROUP BY Attraction_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value AND LastName = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "query": "SELECT T1.gender , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.song_name Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the average credit score of the customers who do not have any loan.",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "query": "SELECT Avg ( T1.credit_score ) FROM customer AS T1 WHERE T1.cust_name NOT IN ( SELECT T2.cust_ID FROM loan AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.",
        "gold_parse": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.",
        "gold_parse": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "query": "SELECT T3.Market_Details , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "gold_parse": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.credit_score < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "For each file format, return the number of artists who released songs in that format.",
        "gold_parse": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "query": "SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the airport that is the destination of the most number of routes that start in China?",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value GROUP BY T1.dst_ap ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the buildings that have at least 10 professors.",
        "gold_parse": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
        "query": "SELECT Building FROM Faculty WHERE Rank > = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the total account balance of each customer from Utah or Texas.",
        "gold_parse": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "query": "SELECT Sum ( credit_score ) FROM customer WHERE state = value OR state = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the id of routes whose source and destination airports are in the United States.",
        "gold_parse": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT T1.rid , T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "How many male (sex is M) students have class senator votes in the fall election cycle?",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value AND Major = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the song in the volume with the maximum weeks on top?",
        "gold_parse": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "query": "SELECT T2.Volume FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume ORDER BY T1.Weeks_on_Top Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_wind_Speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query": "SELECT cust_name , acc_bal FROM customer WHERE no_of_loans > value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names and ages of every friend of either Dan or alice?",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "query": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend ! = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Player FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT problem_log_id , log_entry_date FROM Problem_Log WHERE problem_log_id = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Store_Name = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration LIKE value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_dollars ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Music_Festival FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.address , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT Market_Details FROM Street_Markets",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = value OR T1.preferred_genre = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Name FROM Tourist_Attractions GROUP BY Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "gold_parse": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "query": "SELECT Max ( Gold ) , Min ( Silver ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Issue_Date , Song FROM volume",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to > = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = value AND T2.Treasurer_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "gold_parse": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"",
        "query": "SELECT T2.Date_in_Locaton_To FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "gold_parse": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "query": "SELECT Min ( Order_Quantity ) , Sum ( Order_Quantity ) FROM Invoice_Items",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Date_of_ceremony , Date_of_ceremony FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the average order quantity per order.",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( other_customer_details ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.total_budget_percent_invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.shipping_method_code = value INTERSECT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "query": "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "gold_parse": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "query": "SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Business_Rates AS T2",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE min_temperature_f > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = value AND T1.MAX_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all students who tried out in alphabetical order?",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "query": "SELECT pName FROM Player ORDER BY pName Asc",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T1.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR rental_rate < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_dollars ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "query": "SELECT T2.protein_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT Porphyria FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT Fname , Age FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Age > = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities served as a host city after 2010?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010",
        "query": "SELECT City FROM city WHERE Regional_Population > value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = value OR T1.Age = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "query": "SELECT Boys_or_Girls FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "get the details of employees who manage a department.",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT EMPLOYEE_ID FROM employees",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of each manufacturer along with the name and price of its most expensive product.",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "query": "SELECT Name , Name FROM Products ORDER BY Price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE wind_dir_degrees > value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( date_assigned_from ) FROM Staff_Department_Assignments )",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Cows > value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Nominee FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT pName , HS FROM Player WHERE yCard = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Total_Horses ) FROM farm WHERE Sheep_and_Goats > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "query": "SELECT height FROM Catalog_Contents ORDER BY price_in_dollars Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Award FROM musical GROUP BY Nominee ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT access_count , Avg ( access_count ) FROM Documents GROUP BY document_type_code ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_visibility_miles ) > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE zip_code = value )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "gold_parse": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC",
        "query": "SELECT T2.Name , T2.Price FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > = value ORDER BY T2.Price Desc",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods WHERE payment_method_description = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type codes and descriptions of each budget type?",
        "gold_parse": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
        "query": "SELECT Document_Type_Code , Document_Type_Description FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query": "SELECT customer_name FROM Customers WHERE customer_details BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "query": "SELECT Avg ( min_sea_level_pressure_inches ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Count the number of storms in which at least 1 person died.",
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "query": "SELECT Count ( * ) FROM storm WHERE Name > = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics WHERE characteristic_name = value EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "query": "SELECT catalog_name FROM Catalogs WHERE catalog_id > value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T2.genre_is = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT catalog_entry_name , price_in_euros FROM Catalog_Contents WHERE price_in_pounds > value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "gold_parse": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
        "query": "SELECT name FROM bridge ORDER BY length_meters Desc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "query": "SELECT cName FROM College WHERE enr > value OR state = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.problem_id > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "query": "SELECT CName FROM Course WHERE Credits = value UNION SELECT CName FROM Course WHERE Days = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the project id and detail for the project with at least two documents?",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "query": "SELECT T2.Project_ID , T1.Project_Details FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID GROUP BY T1.Project_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees EXCEPT SELECT FIRST_NAME , LAST_NAME FROM employees WHERE COMMISSION_PCT = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )",
        "query": "SELECT problem_id FROM Problems",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "gold_parse": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "query": "SELECT order_id , customer_id , order_date FROM Customer_Orders WHERE order_status_code = value ORDER BY order_date Asc",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , characteristic_name , other_characteristic_details FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song rating for each language?",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "query": "SELECT Avg ( T2.rating ) , T2.languages FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T1.g_name",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of patients who have made appointments.",
        "gold_parse": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "query": "SELECT Name FROM Patient",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "query": "SELECT address_line_2 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "How many appelations are in Napa Country?",
        "gold_parse": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "query": "SELECT Count ( * ) FROM wine WHERE Winery = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MIN_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Draft_Class LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Player FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "query": "SELECT roomName , decor FROM Rooms WHERE basePrice > value AND basePrice > value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Unsure_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Consider_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_gust_speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average rating of songs for each language?",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "query": "SELECT Avg ( T2.rating ) , T2.languages FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T1.g_name",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT T1.start_station_id FROM trip AS T1 JOIN weather AS T2 WHERE T1.duration > value AND T2.events = value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "query": "SELECT name , Client FROM Web_client_accelerator WHERE Connection = value AND Connection ! = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song rating for each language?",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "query": "SELECT Avg ( rating ) , languages FROM song GROUP BY genre_is",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM employees WHERE SALARY < = value ORDER BY SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Service_Type_Description = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T2.Building = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = value AND Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Give the number of students living in either HKG or CHI.",
        "gold_parse": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value OR city_code = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Date_of_ceremony FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY > = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "query": "SELECT Total_Horses , Sum ( Sheep_and_Goats ) FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_temperature_f < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MAX_SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Sheep_and_Goats > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.AppointmentID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "query": "SELECT f_id , song_name , artist_name FROM song ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of students minoring in department 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "query": "SELECT Name FROM Physician ORDER BY Name Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T2.access_count , Avg ( T2.access_count ) FROM Document_Structures AS T1 JOIN Documents AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Parent_Service_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE precipitation_inches > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_buying_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MAX_SALARY ) FROM jobs AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "query": "SELECT DISTINCT rank FROM results",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT song_name FROM song WHERE languages = value OR languages = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE max_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT T1.other_asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id JOIN Engineer_Visits AS T3 ON T2.fault_log_entry_id = T3.fault_log_entry_id ORDER BY T3.visit_start_datetime Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "List all the username and passwords of users with the most popular role.",
        "gold_parse": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT user_name , user_id FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.Budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each delegate, find the names of the party they are part of.",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "query": "SELECT Governor , Party FROM party",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
        "gold_parse": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
        "query": "SELECT Name , Headquarter , Founder FROM Manufacturers ORDER BY Revenue Desc",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.height > value INTERSECT SELECT T1.player_api_id FROM Player_Attributes AS T1 WHERE T1.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT T2.Sex , T1.Consider_rate , T1.Oppose_rate FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM Physician GROUP BY Position ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "query": "SELECT customer_name , customer_address FROM Customers INTERSECT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Count the number of male students who had class senator votes in the fall election cycle.",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT other_asset_details FROM Assets ORDER BY other_asset_details Asc",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Player FROM player WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "query": "SELECT date FROM weather ORDER BY max_sea_level_pressure_inches Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = value OR characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the city the store named \"FJA Filming\" is in.",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID JOIN Services AS T3 ON T2.Workshop_Group_ID = T3.Workshop_Group_ID WHERE T3.Product_Name = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the founded year of the newest non public school.",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "query": "SELECT Founded FROM university ORDER BY Founded Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "query": "SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = value INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Who is the advisor of Linda Smith? Give me the first name and last name.",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Fname = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "query": "SELECT T2.SALARY , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT T2.other_asset_details FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T1.chargeable_amount Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information about the department Marketing.",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "gold_parse": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
        "query": "SELECT Name , Seating FROM track WHERE Year_Opened > value ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "gold_parse": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "query": "SELECT meter_600 , meter_200 FROM swimmer WHERE Nationality = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the decor of room Recluse and defiance?",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "query": "SELECT decor FROM Rooms WHERE bedType = value INTERSECT SELECT decor FROM Rooms WHERE bedType = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What document type codes do we have?",
        "gold_parse": "SELECT document_type_code FROM Ref_Document_Types",
        "query": "SELECT document_type_code FROM Documents",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme AS T1 WHERE T1.id NOT IN ( SELECT * FROM medicine AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND end_station_name = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_type_code FROM Characteristics AS T1 WHERE T1.characteristic_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "query": "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price > value AND T1.County = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND start_date = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "query": "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Avg ( T1.salary ) FROM employee AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "query": "SELECT city FROM station ORDER BY long Desc",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "How many actors have appeared in each musical?",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "query": "SELECT Count ( * ) FROM musical",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.EmployeeId NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the distinct wineries which produce wines costing between 50 and 100?",
        "gold_parse": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Score BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "query": "SELECT city FROM station GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Store_Name = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "query": "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Consider_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Draft_Class FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Candidate_ID , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Candidate_ID , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T2.Music_Festival , T1.Issue_Date FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the first names of all the teachers that teach in classroom 110.",
        "gold_parse": "SELECT firstname FROM teachers WHERE classroom  =  110",
        "query": "SELECT T2.FirstName FROM list AS T1 JOIN teachers AS T2 WHERE T1.Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "gold_parse": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "query": "SELECT Music_Festival FROM music_festival WHERE Category = value AND Result = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "query": "SELECT customer_name , customer_email FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.total_budget_percent_invested , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE Age > = value AND Age < = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < = value ORDER BY T2.SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Famous_Release_date > = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value OR T1.MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT * FROM Assets ORDER BY asset_details Asc",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of the products with a price less than or equal to $200.",
        "gold_parse": "SELECT name FROM products WHERE price  <=  200",
        "query": "SELECT T1.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Price > value OR T2.Price < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T2.languages = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "query": "SELECT T1.Name FROM Manufacturers AS T1 EXCEPT SELECT T2.Name FROM Products AS T2",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , IATA FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM team WHERE Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM player WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , name FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Famous_Release_date , T3.Date_of_ceremony FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "query": "SELECT Avg ( length_meters ) FROM bridge WHERE name = value",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores ASC",
        "query": "SELECT Author , Author FROM submission ORDER BY Scores Asc",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Oppose_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT FIRST_NAME , LAST_NAME , MANAGER_ID , SALARY FROM employees",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T2.Date_of_ceremony , T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_humidity > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "List the votes of elections in descending order.",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM Nurse GROUP BY Position ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the name of the customer who has greatest total loan amount?",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query": "SELECT cust_name FROM customer GROUP BY cust_name ORDER BY Sum ( credit_score ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "query": "SELECT Avg ( length_meters ) FROM bridge WHERE location = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Consider_rate , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which people severed as governor most frequently?",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Lieutenant_Governor FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY All_Games_Percent Desc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE min_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "gold_parse": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "query": "SELECT Fname , LName FROM Student WHERE Sex = value AND Age = value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by more than one school.",
        "gold_parse": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "query": "SELECT Boys_or_Girls FROM school GROUP BY School_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , MANAGER_ID FROM employees",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes that have destination John F Kennedy International Airport.",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "query": "SELECT Count ( * ) FROM airlines WHERE active = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "How many tests have result \"Fail\"?",
        "gold_parse": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM employees AS T1 WHERE T1.SALARY > value INTERSECT SELECT T2.JOB_TITLE FROM jobs AS T2 WHERE T2.MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "query": "SELECT Count ( * ) FROM camera_lens WHERE max_aperture > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT Name FROM Tourist_Attractions",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of products purchased by at least two different customers?",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "query": "SELECT DISTINCT supplier_name FROM Suppliers",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , mean_wind_speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Treasurer_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the name of the department htat has no students minoring in it?",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "query": "SELECT DName FROM Department EXCEPT SELECT DName FROM Department",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "query": "SELECT T2.product_id , T1.customer_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code = value OR T2.order_item_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T1.thing_id , T1.service_type_code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = value OR T2.Date_and_Date < value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT name FROM PersonFriend WHERE year = ( SELECT Min ( year ) FROM PersonFriend )",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each delegate, find the names of the party they are part of.",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "query": "SELECT Attorney_General , Party FROM party",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "gold_parse": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998",
        "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id WHERE T2.compatible_since_year > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MIN_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = value AND T1.MIN_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Age = value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "gold_parse": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",
        "query": "SELECT name , nationality , id FROM architect ORDER BY gender Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show student ids for all male students.",
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "query": "SELECT Major FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY LIKE value AND T1.MAX_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "query": "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T1.g_name = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the address of store 1.",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "query": "SELECT address FROM address",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "query": "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.date_moved_in FROM Residents AS T1 JOIN Customer_Events AS T2 ON T1.date_moved_in = T2.date_moved_in",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.artist_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.genre_is = value OR T1.g_name = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "when is the hire date for those employees whose first name does not containing the letter M?",
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT HIRE_DATE FROM employees WHERE FIRST_NAME LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "gold_parse": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "query": "SELECT T1.JOB_TITLE , Avg ( T1.MIN_SALARY ) FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "get the details of employees who manage a department.",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT EMAIL FROM employees",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the login names and family names of course author and tutors.",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "query": "SELECT T1.login_name , T1.personal_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = value AND T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T2.Vehicle_Flight_number FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "gold_parse": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.product_details , T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "query": "SELECT T2.student_id FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value OR T1.course_name = value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT FirstName , LastName FROM list GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.address_id , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE min_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Award FROM musical GROUP BY Nominee ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T2.date_of_enrolment , T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What is the minimum, mean, and maximum age across all students?",
        "gold_parse": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
        "query": "SELECT Min ( Age ) , Max ( Age ) , Min ( Age ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM musical",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "query": "SELECT * FROM Procedures WHERE Cost > value AND Cost > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( T1.CustomerId ) > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value OR MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
        "gold_parse": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "query": "SELECT T2.PHONE_NUMBER FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "gold_parse": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "query": "SELECT Poll_Source FROM candidate WHERE Oppose_rate = ( SELECT Max ( Oppose_rate ) FROM candidate )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "query": "SELECT start_date FROM trip ORDER BY bike_id Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who do not have saving accounts?",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "query": "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_humidity ) < value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "query": "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > value",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "gold_parse": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "query": "SELECT Max ( low_temperature ) , Max ( wind_speed_mph ) FROM weekly_weather",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T1.SALARY > value OR T2.DEPARTMENT_ID = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "query": "SELECT Nickname FROM school_details EXCEPT SELECT Nickname FROM school_details WHERE Division = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query": "SELECT DISTINCT T2.DEPARTMENT_ID FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID GROUP BY T1.DEPARTMENT_ID HAVING Count ( DISTINCT T2.EMPLOYEE_ID ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T2.Vehicle_Flight_number FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Award FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "query": "SELECT DISTINCT cust_name FROM customer ORDER BY credit_score Asc",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Music_Festival FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_dollars ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "query": "SELECT date FROM weather ORDER BY min_sea_level_pressure_inches Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T1.organization_id , T1.Type_of_Thing_Code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = value OR T2.Date_and_Date < value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination of the school that has the most players.",
        "gold_parse": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Denomination FROM school GROUP BY Denomination ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "query": "SELECT T3.Customer_Event_ID , T3.date_moved_in , T2.date_moved_in FROM Residents AS T1 JOIN Residents_Services AS T2 ON T2.date_moved_in = T1.date_moved_in JOIN Customer_Events AS T3 ON T1.date_moved_in = T3.date_moved_in",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products with the 'hot' charactersitic.",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT catalog_entry_name , price_in_dollars FROM Catalog_Contents WHERE price_in_pounds > value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What are the names of customers who do not have any policies?",
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "query": "SELECT Customer_ID FROM Customers EXCEPT SELECT Customer_Details FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Total_Cattle ) FROM farm WHERE Sheep_and_Goats > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_gust_speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "gold_parse": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "query": "SELECT T1.phone_number FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT Market_Details FROM Street_Markets WHERE Market_Details = value OR Market_Details = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM employees WHERE SALARY > value OR DEPARTMENT_ID = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Famous_Release_date , T3.Result FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.precipitation_inches > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "query": "SELECT Avg ( Gold ) , Max ( Gold ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of all English songs.",
        "gold_parse": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM files",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show the average age for male and female students.",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "gold_parse": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "query": "SELECT Max ( low_temperature ) , Max ( high_temperature ) FROM weekly_weather",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the oldest log id and its corresponding problem id?",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log ORDER BY problem_log_id Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "query": "SELECT catalog_name FROM Catalogs WHERE date_of_latest_revision > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT cName , enr FROM College WHERE enr > value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Rank = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.ReportsTo NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Count the number of patients who stayed in room 112.",
        "gold_parse": "SELECT count(patient) FROM stay WHERE room  =  112",
        "query": "SELECT Count ( * ) FROM Appointment WHERE ExaminationRoom = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "query": "SELECT Avg ( length_meters ) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "query": "SELECT driverId , driverId FROM pitStops GROUP BY driverId HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the login names and family names of course author and tutors?",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "query": "SELECT T1.login_name , T1.personal_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , mean_wind_speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.max_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( Age ) FROM artist WHERE Age > = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_buying_price , typical_buying_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "query": "SELECT start_date FROM trip ORDER BY start_station_id Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "query": "SELECT Total_Horses , Pigs FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse JOIN Prescribes AS T3 ON T2.AppointmentID = T3.Appointment GROUP BY T3.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes operated by American Airlines.",
        "gold_parse": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the names of all distinct wines that are made of red color grape.",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "query": "SELECT DISTINCT T2.County FROM grapes AS T1 JOIN appellations AS T2 JOIN wine AS T3 ON T1.Grape = T3.Grape AND T3.Appelation = T2.Appelation WHERE T1.Color = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , mean_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "gold_parse": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "query": "SELECT T1.name , T3.Player , T3.Source FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T3.Injury ! = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the name of the heaviest entrepreneur.",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( * ) FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_buying_price , typical_buying_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Musical_ID FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"",
        "query": "SELECT Sum ( T3.order_quantity ) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id WHERE T1.date_became_customer < value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( stamina ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM medicine AS T1 WHERE * NOT IN ( SELECT T2.enzyme_id FROM medicine_enzyme_interaction AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number of flights with three lowest distances.",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "query": "SELECT flno FROM flight ORDER BY price Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "query": "SELECT T1.Document_Type_Name , T2.Other_Details , T2.Document_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_temperature_f < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_temperature_f FROM weather WHERE min_visibility_miles < value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR replacement_cost < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
        "gold_parse": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "query": "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT events FROM weather WHERE zip_code = value GROUP BY zip_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Position ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND duration > value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "What are all the distinct premise types?",
        "gold_parse": "SELECT DISTINCT premises_type FROM premises",
        "query": "SELECT DISTINCT product_category FROM Products",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query": "SELECT DISTINCT DEPARTMENT_ID FROM job_history GROUP BY DEPARTMENT_ID HAVING Count ( DISTINCT EMPLOYEE_ID ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM employees AS T1 WHERE T1.SALARY > value INTERSECT SELECT T2.JOB_TITLE FROM jobs AS T2 WHERE T2.MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "query": "SELECT T1.customer_id , T3.date_moved_in , T2.date_moved_out FROM Customers AS T1 JOIN Residents AS T2 JOIN Customer_Events AS T3 ON T1.customer_id = T3.customer_id AND T3.date_moved_in = T2.date_moved_in AND T1.customer_id = T3.customer_id",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "query": "SELECT Company FROM entrepreneur WHERE Investor ! = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( date_assigned_to ) FROM Staff_Department_Assignments )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "What is the address of the restaurant Subway?",
        "gold_parse": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\"",
        "query": "SELECT T1.Address FROM Restaurant AS T1 JOIN Type_Of_Restaurant AS T2 ON T1.ResID = T2.ResID JOIN Restaurant_Type AS T3 ON T2.ResTypeID = T3.ResTypeID WHERE T3.ResTypeName = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "query": "SELECT Min ( Support_rate ) , Max ( Consider_rate ) , Min ( Oppose_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_dollars ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "gold_parse": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many courses that do not have prerequisite?",
        "gold_parse": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "query": "SELECT Count ( * ) FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "query": "SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.song_name Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "query": "SELECT name FROM enzyme WHERE Porphyria ! = value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.Regional_Population > value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_temperature_f FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some students playing in goalie and mid positions.",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T2.cName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T3.HS = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Unsure_rate Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_dollars ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes and the number of documents in each location.",
        "gold_parse": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "query": "SELECT Location_Code , Count ( * ) FROM Ref_Locations GROUP BY Location_Code",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY < = value ORDER BY T2.SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
        "query": "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT events FROM weather WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "query": "SELECT T1.School_name , T2.total_budget_percent_budgeted , T2.Invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Num_Employees FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the unit of measuerment of the product category code \"Herbs\"?",
        "gold_parse": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Who is the advisor of Linda Smith? Give me the first name and last name.",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Fname = value AND Lname = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_date FROM trip WHERE duration > value AND start_date = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "query": "SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id WHERE T2.amount > value OR T1.Enrollment < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Release_date > = value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "query": "SELECT T2.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Name = value INTERSECT SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID WHERE T3.Time_of_day = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_pounds ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Date , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Candidate_ID , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT FIRST_NAME , LAST_NAME , DEPARTMENT_ID , DEPARTMENT_ID FROM employees",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Marketing_Region_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Currency_Code = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "query": "SELECT eid FROM employee WHERE salary > ( SELECT Avg ( salary ) FROM employee )",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Date_of_ceremony , Music_Festival FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_pounds ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "what are the employee ids and job titles for employees in department 80?",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "query": "SELECT T2.EMPLOYEE_ID , T1.JOB_TITLE FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names and ages of every friend of either Dan or alice?",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "query": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.job = value OR T2.friend = value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "query": "SELECT order_id , customer_id FROM Customer_Orders WHERE order_status_code = value OR order_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T1.Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id WHERE T2.Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "query": "SELECT Name FROM Nurse ORDER BY Registered Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_Id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "query": "SELECT T2.Character FROM musical AS T1 JOIN actor AS T2 WHERE T1.Award = value OR T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT cName , enr FROM College WHERE state = value OR enr > value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the maximum and minimum customer codes.",
        "gold_parse": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "query": "SELECT Max ( * ) , Min ( customer_phone ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "query": "SELECT T1.School FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID WHERE T2.Division ! = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the total number of students who are living in a male dorm?",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "query": "SELECT DISTINCT Eliminated_By FROM Elimination WHERE Team ! = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "query": "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_dollars ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY > value AND MIN_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value OR T1.MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_date FROM trip WHERE duration > value AND end_station_name = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT T2.characteristic_name , T2.other_characteristic_details , T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code EXCEPT SELECT T2.characteristic_name , T2.other_characteristic_details , T2.characteristic_data_type FROM Characteristics AS T2",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "query": "SELECT Avg ( length_feet ) FROM bridge WHERE name = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the name of the document with the most number of sections?",
        "gold_parse": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "gold_parse": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "query": "SELECT maintenance_contract_id , Count ( * ) FROM Maintenance_Contracts GROUP BY maintenance_contract_id",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.LastName > value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Creation FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "gold_parse": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "query": "SELECT DISTINCT T2.service_type_code FROM Organizations AS T1 JOIN Services AS T2 ON T2.organization_id = T1.organization_id JOIN Things AS T3 ON T1.organization_id = T3.organization_id WHERE T3.service_details = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "query": "SELECT T2.SALARY , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Famous_Release_date , T3.Music_Festival FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Pigs > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT bike_id FROM trip WHERE duration > value AND duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.mean_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
        "gold_parse": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and credit score of the customers who have some loans.",
        "gold_parse": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "query": "SELECT cust_name , no_of_loans FROM customer",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "query": "SELECT cust_name FROM customer ORDER BY acc_bal Asc",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are over 18 and do not have allergy to food type or animal type?",
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < = value ORDER BY T2.SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by cat allergies?",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "query": "SELECT Name FROM Physician GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type codes and descriptions of each budget type?",
        "gold_parse": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
        "query": "SELECT T3.Budget_Type_Code , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T2.Document_ID = T3.Document_ID",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.GDP > value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE JOB_TITLE = value AND MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Player FROM player WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "gold_parse": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "query": "SELECT meter_700 , meter_400 FROM swimmer WHERE Nationality = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT id FROM trip WHERE duration > value AND duration > value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "query": "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.date_moved_out FROM Residents AS T1 JOIN Customer_Events AS T2 ON T1.date_moved_in = T2.date_moved_in",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_euros Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Award FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the subject names.",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "query": "SELECT login_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of students in each department.",
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "query": "SELECT Count ( * ) , budget FROM department GROUP BY budget",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = value AND T2.Secretary_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Actor_ID FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT Employee_ID FROM Employees WHERE Employee_Name = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = value AND T2.Building = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( Age ) FROM artist WHERE Famous_Release_date > = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average age and how many male students are there in each city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "query": "SELECT City , City FROM city ORDER BY GDP Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Date_of_ceremony FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the names and scores of wines made from white grapes.",
        "gold_parse": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"",
        "query": "SELECT Name , Score FROM wine WHERE Grape = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , gender FROM Dorm WHERE student_capacity = value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Total_Horses ) FROM farm WHERE Total_Horses > value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.AppointmentID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_type_code FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY LIKE value AND T1.MIN_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT * FROM weather WHERE max_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT asset_details FROM Assets ORDER BY other_asset_details Asc",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
        "gold_parse": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "query": "SELECT T1.student_capacity , T1.gender FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.ExaminationRoom ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value INTERSECT SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Eduardo Martins is a customer at which company?",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "query": "SELECT DISTINCT first_name FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and email for the users who have more than one follower.",
        "gold_parse": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
        "query": "SELECT name , email FROM user_profiles GROUP BY name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_euros > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "query": "SELECT Count ( * ) FROM classroom",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "query": "SELECT EMPLOYEE_ID FROM employees",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "query": "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value AND MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MIN_SALARY FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "gold_parse": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Product_ID FROM Invoices GROUP BY Order_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "query": "SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < value AND T1.State = value AND T1.County = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT FIRST_NAME , LAST_NAME , MANAGER_ID , DEPARTMENT_ID FROM employees",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.job = value AND T1.gender = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Unsure_rate , Date , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "query": "SELECT date FROM weather WHERE min_temperature_f BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM Nurse GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = value OR T1.Artist = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Marketing_Region_Code = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT bike_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "query": "SELECT Name FROM Physician WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the cities that do not have any branches with more than 100 members?",
        "gold_parse": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "query": "SELECT T1.City FROM branch AS T1 EXCEPT SELECT T1.City FROM member AS T2 JOIN branch AS T1 JOIN membership_register_branch AS T3 ON T2.Member_ID = T3.Member_ID AND T3.Branch_ID = T1.Branch_ID WHERE T2.Level > value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.max_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "query": "SELECT state_province_county FROM Addresses WHERE town_city = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT mean_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "query": "SELECT FirstName , LastName FROM teachers WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "query": "SELECT * FROM Procedures WHERE Cost > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the names of the physicians who prescribe medication Thesisin?",
        "gold_parse": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "query": "SELECT Name FROM Physician WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Consider_rate Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "query": "SELECT Avg ( Gold ) , Avg ( Gold ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "gold_parse": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "query": "SELECT state , enr FROM College",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id JOIN Engineer_Visits AS T3 ON T2.fault_log_entry_id = T3.fault_log_entry_id ORDER BY T3.visit_start_datetime Asc",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T2.date_of_enrolment , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the countries of markets and their corresponding years of market estimation?",
        "gold_parse": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
        "query": "SELECT Country , Number_cities FROM market",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T2.date_of_enrolment , T1.date_of_registration FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.Treasurer_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT * , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of players who train between 500 and 1500 hours?",
        "gold_parse": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
        "query": "SELECT pName FROM Player WHERE HS BETWEEN value AND value INTERSECT SELECT pName FROM Player WHERE HS > value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What information is there on albums from 2010?",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "query": "SELECT * FROM Albums WHERE Year = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Return the name of each physician and the number of patients he or she treats.",
        "gold_parse": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "query": "SELECT T1.Name , Count ( * ) FROM Physician AS T1 JOIN Undergoes AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give id of the instructor who advises students in the History department.",
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "query": "SELECT ID FROM instructor WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "query": "SELECT T1.student_id FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "gold_parse": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT College FROM match_season GROUP BY Season ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "query": "SELECT cName FROM College WHERE enr > value AND state = value UNION SELECT cName FROM College WHERE enr > value AND state = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "gold_parse": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "query": "SELECT T1.EMPLOYEE_ID , T2.END_DATE FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T1.SALARY = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "query": "SELECT T1.name , T2.subscription_type , T2.duration FROM station AS T1 JOIN trip AS T2",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Invoices",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "query": "SELECT protein_name , protein_name FROM protein",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "For each bed type, find the average room price.",
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType",
        "query": "SELECT bedType , Avg ( maxOccupancy ) FROM Rooms GROUP BY bedType",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.genre_is = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "query": "SELECT DISTINCT T2.Fname , T2.city_code FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = value OR T1.Allergy = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities where at least one customer lives in but no performer lives in.",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Clients AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T2.Address_ID HAVING Count ( * ) > = value EXCEPT SELECT T1.City_Town FROM Addresses AS T1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM employees WHERE SALARY > = value AND SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY < = value ORDER BY T2.SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Count the number of universities that do not participate in the baketball match.",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "query": "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Marketing_Region_Code = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Who made the latest order?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.active_to_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT asset_details FROM Assets ORDER BY asset_acquired_date Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT College FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "query": "SELECT DISTINCT Season FROM match_season",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.SALARY > value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the language that was used most often in songs with resolution above 500?",
        "gold_parse": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT artist_name FROM song WHERE resolution > value GROUP BY song_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "query": "SELECT Employee_Name , Date_of_Birth FROM Employees",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods WHERE payment_method_description = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_date FROM trip WHERE duration > value AND start_station_name = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_euros > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM employees WHERE SALARY LIKE value AND SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Draft_Class LIKE value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Candidate_ID , Consider_rate , Consider_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.ExaminationRoom ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "query": "SELECT T2.EMPLOYEE_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY > ( SELECT Avg ( T2.SALARY ) FROM employees AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "query": "SELECT Name FROM Nurse ORDER BY Name Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Service_Type_Description = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE precipitation_inches > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the titles of courses that are offered in more than one department?",
        "gold_parse": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "query": "SELECT SALARY , SALARY FROM employees",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT song_name FROM song",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "query": "SELECT T1.Name FROM Products AS T1 EXCEPT SELECT T2.Name FROM Manufacturers AS T2",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT SALARY , HIRE_DATE FROM employees WHERE LAST_NAME BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( department_id ) FROM Staff_Department_Assignments )",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Season FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT FirstName , LastName FROM teachers GROUP BY LastName ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "query": "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted > value OR Year < value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "query": "SELECT Name FROM Products EXCEPT SELECT Name FROM Products",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have destroyed a document.",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "gold_parse": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "query": "SELECT Min ( low_temperature ) , Max ( high_temperature ) FROM weekly_weather",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT T1.email_address FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT mean_sea_level_pressure_inches FROM weather WHERE max_temperature_f < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_sea_level_pressure_inches > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
        "gold_parse": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "query": "SELECT name , id FROM station",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the addresses of all the course authors or tutors.",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
        "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = value OR T2.course_name = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM employees WHERE SALARY < = value ORDER BY SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "query": "SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT T2.asset_details FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id ORDER BY T1.contract_start_date Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits",
        "query": "SELECT title , credits , credits FROM course ORDER BY title Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT artist_name FROM song WHERE languages = value OR genre_is = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT T1.chargeable_amount FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T2.other_asset_details Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT Market_Details FROM Street_Markets",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the average price range of hotels that have 5 star ratings and allow pets.",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "query": "SELECT Avg ( price_range ) FROM Hotels",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each airport name, how many routes start at that airport?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the teams that have the 5 oldest players?",
        "gold_parse": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
        "query": "SELECT Team FROM player ORDER BY Age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "query": "SELECT T2.EMPLOYEE_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY > ( SELECT Avg ( T2.SALARY ) FROM employees AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Location FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT problem_id , log_entry_date FROM Problem_Log WHERE problem_log_id = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T1.preferred_genre = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.Invested , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "query": "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT mean_temperature_f FROM weather WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_euros > value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_email FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Winery FROM wine WHERE Year < value )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_dew_point_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those employees who joined after 7th September, 1987.",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "query": "SELECT EMPLOYEE_ID FROM employees WHERE HIRE_DATE > value AND HIRE_DATE > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees WHERE FIRST_NAME ! = value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T1.name FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the schools with some players in the mid position but no goalies?",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value EXCEPT SELECT T2.cName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T3.HS = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM medicine",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the actual delivery date for all the orders with quantity 1",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "gold_parse": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "query": "SELECT T1.Name , T2.born_state , T2.age FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID ORDER BY T2.age Asc",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the average balance in checking accounts?",
        "gold_parse": "SELECT avg(balance) FROM checking",
        "query": "SELECT Avg ( balance ) FROM SAVINGS",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT Employee_ID FROM Employees WHERE Role_Code = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_dollars ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T2.Building = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the states with colleges that have enrollments less than the some other college?",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "query": "SELECT state FROM College WHERE enr < value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT FirstName , LastName FROM list GROUP BY Classroom ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY FacID",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE precipitation_inches > value OR mean_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List title of albums have the number of tracks greater than 10.",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T2.album_id HAVING Sum ( T2.milliseconds ) > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 EXCEPT SELECT T2.product_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query": "SELECT T1.artist_name , T2.artist_name FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name JOIN song AS T3 ON T1.artist_name = T3.artist_name WHERE T3.song_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Unsure_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value INTERSECT SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "query": "SELECT MANAGER_ID FROM employees",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_temperature_f FROM weather WHERE max_temperature_f < value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of all customers without an account.",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "query": "SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 JOIN Player AS T1 ON T2.player_fifa_api_id = T1.player_fifa_api_id WHERE T1.height < value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the season, the player, and the name of the country that player belongs to.",
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "query": "SELECT T2.Season , T1.Country_name , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for a club?",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "query": "SELECT Avg ( Silver ) , Max ( Gold ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MAX_SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_buying_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Total_Horses > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_buying_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT name FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the school name and driver name for all school buses.",
        "gold_parse": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",
        "query": "SELECT Name , Name FROM driver",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Issue_Date FROM volume",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 WHERE T1.characteristic_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "query": "SELECT Lieutenant_Governor FROM party WHERE Comptroller = value AND Comptroller = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Invoices",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT T2.asset_details FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T1.chargeable_amount Asc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT zip_code FROM weather WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "query": "SELECT T1.customer_id , T2.date_moved_in , T2.date_moved_in FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids of students who don't have any allergies?",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "query": "SELECT StuID FROM Student EXCEPT SELECT Sex FROM Student",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT SALARY , HIRE_DATE FROM employees WHERE HIRE_DATE BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT dorm_name FROM Dorm EXCEPT SELECT dorm_name FROM Dorm",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show headquarters with at least two companies in the banking industry.",
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
        "query": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "query": "SELECT address_content FROM Addresses WHERE address_content = value AND state_province_county = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "query": "SELECT T1.Document_Type_Name , T1.Document_Type_Description , T2.Document_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "query": "SELECT T3.Customer_Event_ID , T3.date_moved_in , T2.date_requested FROM Residents AS T1 JOIN Residents_Services AS T2 ON T2.date_moved_in = T1.date_moved_in JOIN Customer_Events AS T3 ON T1.date_moved_in = T3.date_moved_in",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the id of students who registered courses or attended courses?",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.district , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.total_budget_percent_budgeted FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT Max ( start_date ) FROM trip",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "query": "SELECT Count ( * ) FROM Dorm WHERE gender = value AND gender = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T3.height FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_visibility_miles ) < value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Date , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some students playing in goalie and mid positions.",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "query": "SELECT T1.cName FROM Tryout AS T1 WHERE T1.pPos = value INTERSECT SELECT T1.cName FROM Player AS T2 JOIN Tryout AS T1 ON T2.pID = T1.pID WHERE T2.HS = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "query": "SELECT * FROM Activity AS T1 UNION SELECT T2.Advisor FROM Student AS T2",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_pounds ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Patient ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.lat > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "For each team, how many technicians are there?",
        "gold_parse": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
        "query": "SELECT Count ( * ) , Team FROM machine GROUP BY Team",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "gold_parse": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "query": "SELECT DISTINCT service_type_code FROM Services WHERE service_details = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "gold_parse": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "query": "SELECT T1.Document_Type_Name , T2.Document_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the country with the most number of home airlines?",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T3.country FROM routes AS T1 JOIN airports AS T2 ON T2.apid = T1.dst_apid JOIN airlines AS T3 ON T1.alid = T3.alid GROUP BY T2.country ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.Invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Unsure_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "gold_parse": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "query": "SELECT School_name FROM School",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM team WHERE Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY , T2.DEPARTMENT_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE ! = value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "query": "SELECT T1.Owner FROM channel AS T1 WHERE T1.Name = value INTERSECT SELECT T2.Owner FROM program AS T2 JOIN broadcast AS T3 ON T2.Program_ID = T3.Program_ID WHERE T3.Time_of_day = value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "gold_parse": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",
        "query": "SELECT Boys_or_Girls , Count ( * ) FROM school GROUP BY School_ID ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show statement id, statement detail, account detail for accounts.",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "query": "SELECT T3.Statement_ID , T1.Document_Description , T3.Account_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT access_count , Avg ( access_count ) FROM Documents GROUP BY document_name ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_date FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = value OR T1.Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Music_Festival , Date_of_ceremony FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the ages of all music artists?",
        "gold_parse": "SELECT Age FROM artist",
        "query": "SELECT Sum ( Age ) FROM artist",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Which countries has the most number of airlines?",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T3.country FROM routes AS T1 JOIN airports AS T2 ON T2.apid = T1.dst_apid JOIN airlines AS T3 ON T1.alid = T3.alid GROUP BY T2.country ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "find the number of medicines offered by each trade.",
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "query": "SELECT Count ( * ) FROM medicine",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.genre_is = value OR T1.preferred_genre = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "query": "SELECT catalog_name FROM Catalogs WHERE date_of_publication > value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "What are the delegate and name of the county they belong to, for each county?",
        "gold_parse": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
        "query": "SELECT T2.Governor , T1.County_name FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT T2.characteristic_name , T2.other_characteristic_details , T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code EXCEPT SELECT T2.characteristic_name , T2.other_characteristic_details , T2.characteristic_data_type FROM Characteristics AS T2",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_temperature_f > value",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "gold_parse": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.booking_id , T2.amount_paid FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T2.booking_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T2.Music_Festival , T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Musical_ID FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "query": "SELECT School_name FROM School WHERE Enrollment < value OR Enrollment > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT * FROM weather WHERE mean_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Parent_Service_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( agility ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T2.Building = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T2.date_of_completion , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "query": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT asset_details FROM Assets ORDER BY asset_details Asc",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "query": "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.organization_id FROM Things AS T1 JOIN Customer_Events AS T2 ON T1.thing_id = T2.thing_id",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id WHERE T2.Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "query": "SELECT T1.City FROM city AS T1 JOIN match AS T2 JOIN hosting_city AS T3 ON T1.City_ID = T3.Host_City AND T3.Match_ID = T2.Match_ID AND T1.City_ID = T3.Host_City WHERE T2.Competition = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.start_date ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT id FROM trip WHERE duration > value AND zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_pounds ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_registration , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "query": "SELECT T2.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Owner = value INTERSECT SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID WHERE T3.Time_of_day = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_dew_point_f FROM weather WHERE min_visibility_miles < value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM employees ORDER BY SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "query": "SELECT Count ( * ) FROM enzyme WHERE Porphyria = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.payment_method_code ) FROM Ref_Payment_Methods AS T1 JOIN Invoices AS T2 ON T1.payment_method_code = T2.payment_method_code WHERE T1.payment_method_description = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM Physician GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "query": "SELECT DISTINCT positionText FROM constructorStandings",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How old is the average person for each job?",
        "gold_parse": "SELECT avg(age) ,  job FROM Person GROUP BY job",
        "query": "SELECT job , Avg ( age ) FROM Person GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "query": "SELECT Avg ( length_feet ) FROM bridge WHERE location = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "query": "SELECT gender , artist_name FROM artist ORDER BY gender Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.address , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees WHERE SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of scientists who are assigned to any project?",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "query": "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids of students who don't have any allergies?",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Student",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR rental_rate < value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Music_Festival , Music_Festival FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents are with document type code BK for each product id?",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "query": "SELECT Count ( * ) , Document_Type_Code FROM Documents WHERE Document_Type_Code = value GROUP BY Document_ID",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.SALARY > value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.precipitation_inches > value",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "query": "SELECT Country FROM manager WHERE Age > value OR Age > value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Musical_ID FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 5?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value AND T1.MIN_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "query": "SELECT Season FROM match_season",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T1.duration > value AND T2.events = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT song_name FROM song WHERE genre_is = value OR genre_is = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Consider_rate Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "gold_parse": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Order_ID FROM Invoices GROUP BY Order_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "What are the distinct districts for elections?",
        "gold_parse": "SELECT DISTINCT District FROM election",
        "query": "SELECT DISTINCT Committee FROM election",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the ids of orders which are shipped after 2000-01-01.",
        "gold_parse": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "query": "SELECT T2.order_id FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T1.invoice_date > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Unsure_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 4?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value INTERSECT SELECT Classroom FROM list WHERE Grade = value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Please show the most common reigns of wrestlers.",
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Event FROM wrestler GROUP BY Event ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_humidity FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value AND MIN_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Artist > = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "query": "SELECT Venue FROM match WHERE Competition = value AND Competition = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students who are female are allergic to milk or eggs?",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "query": "SELECT Count ( * ) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = value AND T1.Allergy = value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "query": "SELECT name , Client FROM Web_client_accelerator WHERE Connection = value OR Connection = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location name for document \"Robin CV\".",
        "gold_parse": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
        "query": "SELECT Location_Name FROM Ref_Locations WHERE Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "query": "SELECT DISTINCT Fname , city_code FROM Student WHERE Sex > = value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "query": "SELECT T2.common_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "query": "SELECT f_id , artist_name , artist_name FROM song ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "query": "SELECT Count ( * ) , T1.zip_code FROM trip AS T1 JOIN weather AS T2 GROUP BY T2.zip_code",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees WHERE FIRST_NAME = value OR LAST_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.genre_is = value OR T1.g_name = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY = value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees WHERE SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Store_Name = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT Market_Details FROM Street_Markets WHERE Market_Details = value OR Market_Details = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T1.ICAO FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for course 301?",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "query": "SELECT student_id FROM Student_Course_Attendance",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_log_id = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE max_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Unsure_rate Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T1.Origin , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "query": "SELECT email , phone FROM customers WHERE first_name = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND start_station_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "query": "SELECT Name FROM Tourist_Attractions",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics WHERE characteristic_name = value EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , characteristic_name , other_characteristic_details FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT Max ( date ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.Budget_invested_percent FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT asset_details FROM Assets ORDER BY asset_disposed_date Asc",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "query": "SELECT Country FROM manager WHERE Age > value OR Manager_ID = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "gold_parse": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
        "query": "SELECT name FROM bridge ORDER BY length_feet Desc",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "query": "SELECT Country FROM manager WHERE Age > value OR Age = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "gold_parse": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.product_details , T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
        "gold_parse": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.personal_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Unsure_rate , Oppose_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT FirstName , LastName FROM teachers GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to > ( SELECT Min ( date_assigned_to ) FROM Staff_Department_Assignments )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , mean_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.LastName NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "query": "SELECT T1.Date , T2.Player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.Competition Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the aircraft name for the flight with number 99",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "query": "SELECT name FROM aircraft WHERE name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "query": "SELECT Count ( * ) , T2.Budget_Type_Code FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = value GROUP BY T1.Document_ID",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many total credits are offered by each department?",
        "gold_parse": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "query": "SELECT Sum ( tot_cred ) , dept_name FROM student GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product has been ordered most number of times?",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT product_details FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_sea_level_pressure_inches ) > value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "gold_parse": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
        "query": "SELECT T2.amenity_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T1.student_capacity > value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying prices for all products.",
        "gold_parse": "SELECT product_name ,  typical_buying_price FROM products",
        "query": "SELECT product_name , typical_selling_price FROM Products",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query": "SELECT cust_name , credit_score FROM customer WHERE no_of_loans > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "query": "SELECT Employee_Name , Other_Details FROM Employees",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT other_asset_details FROM Assets ORDER BY asset_details Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "query": "SELECT T1.gender , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T1.gender Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_sea_level_pressure_inches > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query": "SELECT cust_name , acc_bal FROM customer WHERE no_of_loans > value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "query": "SELECT DISTINCT Year FROM party WHERE Comptroller = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T3.song_name FROM genre AS T1 JOIN artist AS T2 ON T1.g_name = T2.preferred_genre JOIN song AS T3 ON T1.g_name = T3.genre_is WHERE T2.preferred_genre = value OR T1.g_name = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "query": "SELECT DISTINCT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Total_Cattle ) FROM farm WHERE Total_Horses > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_wind_Speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "query": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value INTERSECT SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted the most events.",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT City FROM city GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_dollars ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the address of customer 10.",
        "gold_parse": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
        "query": "SELECT T1.address_details FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T2.customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "How many dogs went through any treatments?",
        "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Breeds",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "gold_parse": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "query": "SELECT Name , Country FROM singer WHERE Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "gold_parse": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT Name , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates do we have?",
        "gold_parse": "SELECT count(*) FROM Templates",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "gold_parse": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "query": "SELECT Type FROM performance ORDER BY Share Desc",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the country codes for countries that do not speak English?",
        "gold_parse": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "query": "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "gold_parse": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights depart from City Aberdeen?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "query": "SELECT Count ( * ) FROM airports WHERE City = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "List each charge type and its amount.",
        "gold_parse": "SELECT charge_type ,  charge_amount FROM Charges",
        "query": "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are all the makers and models?",
        "gold_parse": "SELECT Maker ,  Model FROM MODEL_LIST",
        "query": "SELECT Maker FROM car_makers",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "gold_parse": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "query": "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "gold_parse": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "query": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "gold_parse": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"",
        "query": "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "How many teachers are there?",
        "gold_parse": "SELECT count(*) FROM teacher",
        "query": "SELECT Count ( * ) FROM course",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the produdction code and channel of the most recent cartoon?",
        "gold_parse": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query": "SELECT Title , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have fewer than 200 flights.",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "query": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which countries have either English or Dutch as an official language?",
        "gold_parse": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "query": "SELECT Continent FROM country WHERE LocalName = value OR LocalName = value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "gold_parse": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many countries exist?",
        "gold_parse": "SELECT count(*) FROM COUNTRIES",
        "query": "SELECT Count ( * ) FROM continents",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "gold_parse": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "query": "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the population and life expectancies in Brazil?",
        "gold_parse": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "query": "SELECT Population , GNPOld FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which language is the most popular in Aruba?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "query": "SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "How many professionals have performed any treatment to dogs?",
        "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses in total are listed?",
        "gold_parse": "SELECT count(*) FROM Courses",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What are the notes of the death events which has substring 'East'?",
        "gold_parse": "SELECT note FROM death WHERE note LIKE '%East%'",
        "query": "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date LIKE value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What are the names of the employees who never received any evaluation?",
        "gold_parse": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "query": "SELECT Name FROM employee EXCEPT SELECT Name FROM employee",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "gold_parse": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "query": "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value EXCEPT SELECT T1.first_name FROM Owners AS T1",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "gold_parse": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "query": "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "gold_parse": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "query": "SELECT tourney_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "gold_parse": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "gold_parse": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "query": "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "gold_parse": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "query": "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "How many likes correspond to each student id?",
        "gold_parse": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "query": "SELECT student_id , Count ( * ) FROM Friend GROUP BY student_id",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the oldest player.",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the regions that use English or Dutch?",
        "gold_parse": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "query": "SELECT Region FROM country WHERE Name = value OR Name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "gold_parse": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "query": "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "gold_parse": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT current_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airports do not have departing or arriving flights?",
        "gold_parse": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "query": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode NOT IN ( SELECT T2.DestAirport FROM flights AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "gold_parse": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT LifeExpectancy , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and the number of documents using each type.",
        "gold_parse": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "query": "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which city has most number of arriving flights?",
        "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "gold_parse": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "query": "SELECT Air_Date , Episode FROM TV_series WHERE Episode = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
        "gold_parse": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1",
        "query": "SELECT Max ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "query": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Give the code of the airport with the least flights.",
        "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "query": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Return the names of the 3 countries with the fewest people.",
        "gold_parse": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "query": "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which language is the most popular on the Asian continent?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "query": "SELECT Code2 FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "query": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "gold_parse": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "query": "SELECT name , date_of_birth FROM Dogs ORDER BY age Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "gold_parse": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "query": "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "gold_parse": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "query": "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many different departments offer degrees?",
        "gold_parse": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "query": "SELECT Count ( DISTINCT department_name ) FROM Departments",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of players for each hand type.",
        "gold_parse": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "query": "SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "How many dog pets are raised by female students?",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "query": "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find the id of students who do not have a cat pet.",
        "gold_parse": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "query": "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "query": "SELECT name FROM Highschooler WHERE grade > value INTERSECT SELECT name FROM Highschooler WHERE grade < value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights do we have?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS",
        "query": "SELECT Count ( * ) FROM airlines",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "gold_parse": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "query": "SELECT T1.series_name , T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Whic`h unique cities are in  Asian countries where Chinese is the official language?",
        "gold_parse": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "query": "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "query": "SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights have destination ATO?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "query": "SELECT Count ( * ) FROM airports WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "gold_parse": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "gold_parse": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "query": "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total surface area of the continents Asia and Europe?",
        "gold_parse": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "query": "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Continent = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "gold_parse": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "query": "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code is used by most number of documents?",
        "gold_parse": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the average horsepower for all cards produced before 1980?",
        "gold_parse": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980",
        "query": "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which regions speak Dutch or English?",
        "gold_parse": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "query": "SELECT Continent FROM country WHERE Continent = value OR LocalName = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "gold_parse": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "query": "SELECT property_type_description FROM Ref_Property_Types",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "query": "SELECT name FROM Highschooler WHERE grade > value INTERSECT SELECT name FROM Highschooler WHERE grade < value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Airline = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "gold_parse": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
        "query": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents are using the template with type code 'PPT'?",
        "gold_parse": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "query": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "gold_parse": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "query": "SELECT first_name FROM Students UNION SELECT first_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "How many total tours were there for each ranking date?",
        "gold_parse": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "query": "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "gold_parse": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "query": "SELECT name FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "gold_parse": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "query": "SELECT Count ( * ) FROM country WHERE LocalName = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query": "SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "gold_parse": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "query": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "gold_parse": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "query": "SELECT Max ( Population ) , Min ( GNP ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes that are not used by any document.",
        "gold_parse": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "query": "SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "gold_parse": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "query": "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "gold_parse": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "query": "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "gold_parse": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "query": "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the code of airport that has fewest number of flights?",
        "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "query": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "gold_parse": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Count the number of likes for each student id.",
        "gold_parse": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "query": "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "gold_parse": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "query": "SELECT other_details FROM Student_Enrolment ORDER BY other_details Desc",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "query": "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = value )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "gold_parse": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Max ( student_course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airline has most number of flights?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "gold_parse": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "query": "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "gold_parse": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many documents use each type?",
        "gold_parse": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "query": "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the course with the most students enrolled?",
        "gold_parse": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of students who have 2 or more likes?",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the city with the largest population that uses English.",
        "gold_parse": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "query": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T1.Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value ) EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List all the student details in reversed lexicographical order.",
        "gold_parse": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "query": "SELECT * FROM Students ORDER BY date_left Desc",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "gold_parse": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1",
        "query": "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have a flight with source airport AHD?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT Airline FROM airlines WHERE Abbreviation = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "gold_parse": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "query": "SELECT transcript_date , other_details FROM Transcripts",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "How much does the most recent treatment cost?",
        "gold_parse": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "query": "SELECT * FROM Treatments ORDER BY date_of_treatment Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that are not used for any document?",
        "gold_parse": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "query": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the name of the course with most number of enrollments?",
        "gold_parse": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "query": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value EXCEPT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?",
        "gold_parse": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "query": "SELECT first_name FROM Students WHERE cell_mobile_number LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which city has the most frequent destination airport?",
        "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the number of the cars with horsepower more than 150?",
        "gold_parse": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Cylinders > value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of nations where both English and French are official languages?",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "query": "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers and the total sales of their songs.",
        "gold_parse": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "query": "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the average age of losers and winners of all matches.",
        "gold_parse": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "query": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "how many countries are in Asia?",
        "gold_parse": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "gold_parse": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'",
        "query": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > value EXCEPT SELECT T1.Model FROM car_makers AS T4 JOIN model_list AS T1 ON T4.Id = T1.Maker WHERE T4.Maker = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?",
        "gold_parse": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'",
        "query": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "How many friends does the high school student Kyle have?",
        "gold_parse": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "query": "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "query": "SELECT first_name , middle_name , last_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "gold_parse": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Count the number of dogs that went through a treatment.",
        "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Breeds",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents do we have?",
        "gold_parse": "SELECT count(*) FROM Documents",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "gold_parse": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "gold_parse": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "query": "SELECT If_first_show FROM show ORDER BY If_first_show Asc",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "what are all the addresses including line 1 and line 2?",
        "gold_parse": "SELECT line_1 ,  line_2 FROM addresses",
        "query": "SELECT line_1 FROM Addresses WHERE line_1 = value INTERSECT SELECT line_1 FROM Addresses WHERE line_1 = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find number of pets owned by students who are older than 20.",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "query": "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "gold_parse": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'",
        "query": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > value EXCEPT SELECT T1.Model FROM car_makers AS T4 JOIN model_list AS T1 ON T4.Id = T1.Maker WHERE T4.Maker = value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "gold_parse": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "query": "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "gold_parse": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT course_id , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department offer?",
        "gold_parse": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "query": "SELECT Count ( * ) FROM Departments WHERE department_name = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle.",
        "gold_parse": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "query": "SELECT name FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "gold_parse": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "gold_parse": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "query": "SELECT Code FROM country WHERE LocalName = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "gold_parse": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "query": "SELECT name , date_of_birth FROM Dogs ORDER BY weight Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "gold_parse": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "gold_parse": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "query": "SELECT T1.Package_Option FROM TV_Channel AS T1 EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "gold_parse": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "query": "SELECT Template_ID , Version_Number , Template_Type_Code , Template_Type_Code FROM Templates",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of poker players?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "gold_parse": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA)",
        "query": "SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "gold_parse": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "query": "SELECT SurfaceArea FROM country WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "gold_parse": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "query": "SELECT Name , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have at least 10 flights.",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "query": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "gold_parse": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT winner_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the age of the oldest dog?",
        "gold_parse": "SELECT max(age) FROM Dogs",
        "query": "SELECT age FROM Dogs ORDER BY age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show ids of all students who do not have any friends.",
        "gold_parse": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "query": "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "gold_parse": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "query": "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find the name of students who have both cat and dog pets.",
        "gold_parse": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "query": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs in total?",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the codes of countries with more than 50 players?",
        "gold_parse": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "query": "SELECT country_code FROM players WHERE player_id > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the names of the countries with no car makers?",
        "gold_parse": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "gold_parse": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "query": "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
        "query": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the countries having at least one car maker? List name and id.",
        "gold_parse": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1",
        "query": "SELECT Country , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "query": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT Name , Population , Continent FROM country",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "gold_parse": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "query": "SELECT T2.Document_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many different forms of governments are there in Africa?",
        "gold_parse": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "query": "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "How many likes does Kyle have?",
        "gold_parse": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "query": "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "gold_parse": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "query": "SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs.",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "query": "SELECT DISTINCT id , name FROM ship WHERE ship_type = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "gold_parse": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders",
        "query": "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.",
        "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "gold_parse": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "query": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "query": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many countries speak both English and Dutch?",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "query": "SELECT Count ( * ) FROM countrylanguage AS T1 WHERE T1.Language = value INTERSECT SELECT T2.Continent FROM country AS T2 JOIN countrylanguage AS T1 ON T2.Code = T1.CountryCode WHERE T1.Language = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What model has the most different versions?",
        "gold_parse": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the code of airport that has the highest number of flights?",
        "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "query": "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "gold_parse": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1",
        "query": "SELECT Max ( Weight ) FROM cars_data WHERE Cylinders = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "gold_parse": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "query": "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What is the ship id and name that caused most total injuries?",
        "gold_parse": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "query": "SELECT Name FROM country ORDER BY LifeExpectancy Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.",
        "gold_parse": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "query": "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights departing from Aberdeen.",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "query": "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "query": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "query": "SELECT first_name , last_name , owner_id FROM Owners",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "gold_parse": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "query": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "gold_parse": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "query": "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Return the money rank of the poker player with the greatest height.",
        "gold_parse": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "query": "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses are there?",
        "gold_parse": "SELECT count(*) FROM Courses",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "gold_parse": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "query": "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "gold_parse": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "query": "SELECT Name , Country , Age FROM singer ORDER BY Age Asc",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the total number of matches.",
        "gold_parse": "SELECT count(*) FROM matches",
        "query": "SELECT Count ( * ) FROM players",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "gold_parse": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'",
        "query": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "List the name of the conductor with the most years of work.",
        "gold_parse": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "gold_parse": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "query": "SELECT Name FROM conductor",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List all document ids with at least two paragraphs.",
        "gold_parse": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "query": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find the name of airports which do not have any flight in and out.",
        "gold_parse": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "query": "SELECT AirportName FROM airports EXCEPT SELECT AirportName FROM airports",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Give the number of Jetblue Airways flights.",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of all courses that have some students enrolled?",
        "gold_parse": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many airports do we have?",
        "gold_parse": "SELECT count(*) FROM AIRPORTS",
        "query": "SELECT Count ( * ) FROM airlines",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query": "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the different addresses that have students living there?",
        "gold_parse": "SELECT count(DISTINCT current_address_id) FROM Students",
        "query": "SELECT DISTINCT email_address FROM Students",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "gold_parse": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "query": "SELECT T1.Package_Option FROM TV_Channel AS T1 EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What language is predominantly spoken in Aruba?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "query": "SELECT Name FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many available features are there in total?",
        "gold_parse": "SELECT count(*) FROM Other_Available_Features",
        "query": "SELECT Count ( * ) FROM Ref_Feature_Types",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What is the best rank of losers across all matches?",
        "gold_parse": "SELECT min(loser_rank) FROM matches",
        "query": "SELECT loser_rank FROM matches",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the details for the paragraph that includes the text 'Korea'?",
        "gold_parse": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
        "query": "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and id of courses having at most 2 sections?",
        "gold_parse": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "query": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "How much does the most expensive charge type costs?",
        "gold_parse": "SELECT max(charge_amount) FROM Charges",
        "query": "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
        "gold_parse": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1",
        "query": "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year < value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "query": "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the region and population of Angola?",
        "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "query": "SELECT SurfaceArea , Population FROM country",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "How many singers do we have?",
        "gold_parse": "SELECT count(*) FROM singer",
        "query": "SELECT Count ( * ) FROM stadium",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of people living in the nations that do not use English?",
        "gold_parse": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "query": "SELECT Sum ( Population ) FROM country WHERE Continent ! = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "What are the ids of the students who do not own cats as pets?",
        "gold_parse": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "query": "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of flights into ATO.",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "query": "SELECT Count ( * ) FROM airlines",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show paragraph details for paragraph with text 'Korea'.",
        "gold_parse": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
        "query": "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the name of the countries where there is not a single car maker?",
        "gold_parse": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country",
        "query": "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the minimu weight of the car with 8 cylinders produced in 1974?",
        "gold_parse": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1",
        "query": "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of  airports.",
        "gold_parse": "SELECT count(*) FROM AIRPORTS",
        "query": "SELECT Count ( * ) FROM airlines",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many people live in countries that do not speak English?",
        "gold_parse": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "query": "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights arriving in Aberdeen city?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "query": "SELECT Count ( * ) FROM airports WHERE City = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "gold_parse": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "query": "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "gold_parse": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "query": "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of students who have no friends?",
        "gold_parse": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "query": "SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.student_id FROM Likes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Which model has the most version(make) of cars?",
        "gold_parse": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "gold_parse": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = value AND T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "gold_parse": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "query": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the airport name for airport 'AKO'?",
        "gold_parse": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "query": "SELECT AirportName FROM airports WHERE AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "gold_parse": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "query": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'",
        "query": "SELECT Count ( * ) FROM car_makers WHERE Maker = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "What are the different first names and ages of the students who do have pets?",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "query": "SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "query": "SELECT Name FROM country WHERE Continent = value ORDER BY Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity of the stadium  with the most concerts after 2013?",
        "gold_parse": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which continent has the most diverse languages?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "gold_parse": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "query": "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "How many ships ended up being 'Captured'?",
        "gold_parse": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "query": "SELECT Count ( * ) FROM battle WHERE result = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have at least 10 flights?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "query": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "gold_parse": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "query": "SELECT Count ( * ) FROM performance WHERE Type > = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "gold_parse": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "query": "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of all the countries that became independent after 1950?",
        "gold_parse": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "query": "SELECT Continent FROM country WHERE IndepYear > value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Give me all the information about hiring.",
        "gold_parse": "SELECT * FROM hiring",
        "query": "SELECT * FROM employee",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "gold_parse": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "query": "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "gold_parse": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "query": "SELECT Avg ( age ) FROM Dogs WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What is all the information about hiring?",
        "gold_parse": "SELECT * FROM hiring",
        "query": "SELECT * FROM employee",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "gold_parse": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "query": "SELECT LName FROM Student WHERE Age = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the continent name which Anguilla belongs to?",
        "gold_parse": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "query": "SELECT Continent FROM country",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "gold_parse": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "query": "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "museum_visit",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "gold_parse": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "query": "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < value )",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "gold_parse": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "query": "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?",
        "gold_parse": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "query": "SELECT * , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "gold_parse": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "query": "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "gold_parse": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "query": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "gold_parse": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "query": "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are all the possible breed type and size type combinations?",
        "gold_parse": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "query": "SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the cost and treatment type description of each treatment?",
        "gold_parse": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "query": "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total population of Gelderland district?",
        "gold_parse": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "query": "SELECT Sum ( Population ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the most populace city that speaks English?",
        "gold_parse": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "query": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "gold_parse": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "query": "SELECT Population , Continent FROM country",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the charge amount of the most expensive charge type?",
        "gold_parse": "SELECT max(charge_amount) FROM Charges",
        "query": "SELECT charge_amount FROM Charges ORDER BY charge_amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "gold_parse": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "query": "SELECT Name , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the average horsepower of the cars before 1980?",
        "gold_parse": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980",
        "query": "SELECT Avg ( Edispl ) FROM cars_data WHERE Year < value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have less than 200 flights?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "query": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of languages used in Aruba?",
        "gold_parse": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "query": "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "gold_parse": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "query": "SELECT T1.Fname FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T1.Fname FROM Student AS T1",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the semester with no students enrolled?",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first and second line for all addresses?",
        "gold_parse": "SELECT line_1 ,  line_2 FROM addresses",
        "query": "SELECT T2.first_name , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which city has most number of departing flights?",
        "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which city is the most frequent source airport?",
        "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights land in Aberdeen or Abilene?",
        "gold_parse": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "query": "SELECT Count ( * ) FROM airports WHERE AirportName = value OR City = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which region is the city Kabul located in?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "gold_parse": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "query": "SELECT first_name FROM Students UNION SELECT first_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "gold_parse": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "query": "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "gold_parse": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "query": "SELECT first_name , first_name FROM Professionals",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats?",
        "gold_parse": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'",
        "query": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "gold_parse": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "query": "SELECT property_name FROM Properties WHERE room_count > value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights landing at APG.",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from APG.",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "query": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the name of the breed with the most dogs?",
        "gold_parse": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Count the number of matches.",
        "gold_parse": "SELECT count(*) FROM matches",
        "query": "SELECT Count ( * ) FROM players",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "gold_parse": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "query": "SELECT Template_ID , Version_Number , Template_Type_Code , Template_Type_Code FROM Templates",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show all the grades of the high schoolers.",
        "gold_parse": "SELECT grade FROM Highschooler",
        "query": "SELECT DISTINCT grade FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in france?",
        "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'",
        "query": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the language that is spoken in the most countries.",
        "gold_parse": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "gold_parse": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "query": "SELECT Code2 FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What airline serves the most flights?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "query": "SELECT name FROM Highschooler GROUP BY grade HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "gold_parse": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "query": "SELECT Count ( * ) FROM airports WHERE City = value OR City = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "gold_parse": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "query": "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department have?",
        "gold_parse": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "query": "SELECT Count ( * ) FROM Departments WHERE department_name = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What region is Kabul in?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "query": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "gold_parse": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "query": "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "gold_parse": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "query": "SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "gold_parse": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "query": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "query": "SELECT Name FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "gold_parse": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4",
        "query": "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many countries are listed?",
        "gold_parse": "SELECT count(*) FROM COUNTRIES",
        "query": "SELECT Count ( * ) FROM continents",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the average age of the dogs who went through treatments.",
        "gold_parse": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "query": "SELECT Avg ( age ) FROM Dogs",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "gold_parse": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the average edispl of the cars of model volvo?",
        "gold_parse": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'",
        "query": "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many official languages are spoken in Afghanistan?",
        "gold_parse": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "query": "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights arriving in Aberdeen.",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "query": "SELECT Count ( * ) FROM airports WHERE City = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, names, and descriptions for all documents?",
        "gold_parse": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "query": "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "gold_parse": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "query": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have a flight with destination airport AHD?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "query": "SELECT Airline FROM airlines WHERE Abbreviation = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many type of governments are in Africa?",
        "gold_parse": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "query": "SELECT Count ( * ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Give the name of the student with the most likes.",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "gold_parse": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "query": "SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents.",
        "gold_parse": "SELECT count(*) FROM Documents",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the first names of all players, and their total ranking points?",
        "gold_parse": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "query": "SELECT T1.first_name , T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have ever treated dogs.",
        "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "How many players are there for each hand type?",
        "gold_parse": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "query": "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        "correctness": 0
    },
    {
        "db_id": "voter_1",
        "question": "What is the area code in which the most voters voted?",
        "gold_parse": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How is the math course described?",
        "gold_parse": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "gold_parse": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "query": "SELECT DISTINCT T1.breed_name , T3.treatment_type_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "query": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Give the city and country for the Alton airport.",
        "gold_parse": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "query": "SELECT City , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many continents speak Chinese?",
        "gold_parse": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "query": "SELECT Count ( * ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "gold_parse": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "query": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of students who have at least 2 likes.",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the names of countries with English and French as official languages.",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "query": "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of templates of the type CV.",
        "gold_parse": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "gold_parse": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query": "SELECT Manager_name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of templates.",
        "gold_parse": "SELECT count(*) FROM Templates",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights.",
        "gold_parse": "SELECT count(*) FROM FLIGHTS",
        "query": "SELECT Count ( * ) FROM airlines",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Return the names of the 3 most populated countries.",
        "gold_parse": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "query": "SELECT Name FROM city ORDER BY Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "gold_parse": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "query": "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "gold_parse": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "query": "SELECT first_name , last_name FROM players ORDER BY birth_date Asc",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "gold_parse": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3",
        "query": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which city and country is the Alton airport at?",
        "gold_parse": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "query": "SELECT City , Country FROM airports WHERE AirportName = value AND Country = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total population and maximum GNP in Asia?",
        "gold_parse": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "query": "SELECT Sum ( Population ) , Max ( GNP ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "gold_parse": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "query": "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?",
        "gold_parse": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "query": "SELECT name FROM Dogs WHERE weight > value",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Return the names of all the poker players.",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "gold_parse": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "query": "SELECT Count ( * ) FROM players",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "gold_parse": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the total ranking points for each player and their first name.",
        "gold_parse": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "query": "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "gold_parse": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Count the number of friends Kyle has.",
        "gold_parse": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "query": "SELECT Count ( * ) FROM Highschooler",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Find the production code and channel of the most recently aired cartoon.",
        "gold_parse": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query": "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "gold_parse": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "query": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "gold_parse": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What is the total number of singers?",
        "gold_parse": "SELECT count(*) FROM singer",
        "query": "SELECT Count ( * ) FROM stadium",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List the section_name in reversed lexicographical order.",
        "gold_parse": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "query": "SELECT section_name FROM Sections ORDER BY section_name Asc",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "gold_parse": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "How many friends does each student have?",
        "gold_parse": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "query": "SELECT Count ( * ) FROM Highschooler",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'",
        "query": "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND FullName = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "gold_parse": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "query": "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "gold_parse": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "gold_parse": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "gold_parse": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4",
        "query": "SELECT Avg ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "gold_parse": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "query": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which countries have greater area than that of any country in Europe?",
        "gold_parse": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "query": "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "query": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "What is the total count of teachers?",
        "gold_parse": "SELECT count(*) FROM teacher",
        "query": "SELECT Count ( * ) FROM course",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents that use the PPT template type.",
        "gold_parse": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "query": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "gold_parse": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "query": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "gold_parse": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "query": "SELECT Count ( * ) FROM matches WHERE year > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "gold_parse": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What is the average grade of students who have friends?",
        "gold_parse": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "query": "SELECT Avg ( grade ) FROM Highschooler",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "gold_parse": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "query": "SELECT name , age , weight FROM Dogs WHERE weight IN ( SELECT weight FROM Dogs )",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "gold_parse": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "query": "SELECT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "For each department id, what is the name of the department with the most number of degrees?",
        "gold_parse": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Find the average grade of all students who have some friends.",
        "gold_parse": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "query": "SELECT Avg ( grade ) FROM Highschooler",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "gold_parse": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "query": "SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name ! = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the car wmodel with the highest mpg?",
        "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1",
        "query": "SELECT Edispl FROM cars_data ORDER BY Weight Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy in African countries that are republics?",
        "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "query": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "query": "SELECT Count ( * ) , grade FROM Highschooler GROUP BY grade",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the ID of the high schooler named Kyle.",
        "gold_parse": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "query": "SELECT ID FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of nations speak both English and French?",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "gold_parse": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "query": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "query": "SELECT Avg ( GNPOld ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "gold_parse": "SELECT charge_type ,  charge_amount FROM Charges",
        "query": "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
        "gold_parse": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000",
        "query": "SELECT Year FROM cars_data WHERE Weight > value EXCEPT SELECT Year FROM cars_data WHERE Weight < value",
        "correctness": 0
    },
    {
        "db_id": "voter_1",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "gold_parse": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "query": "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "query": "SELECT Count ( * ) FROM Pets WHERE PetType = value AND PetType = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the airport code of the airport with the most flights?",
        "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "gold_parse": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "query": "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which continent speaks the most languages?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "gold_parse": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "query": "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "gold_parse": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "query": "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "gold_parse": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "query": "SELECT Count ( * ) FROM players AS T1 INTERSECT SELECT T2.loser_ioc FROM matches AS T2",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which cities are in European countries where English is not the official language?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "query": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value EXCEPT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "gold_parse": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "query": "SELECT LName FROM Student WHERE Age = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "gold_parse": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "gold_parse": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "query": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        "correctness": 0
    },
    {
        "db_id": "voter_1",
        "question": "What is last date created of votes from the state 'CA'?",
        "gold_parse": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "query": "SELECT created FROM VOTES WHERE state = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "gold_parse": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
        "query": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "query": "SELECT Name FROM country WHERE Continent = value AND Population > value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are released?",
        "gold_parse": "SELECT count(*) FROM Transcripts",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "query": "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the highest rank of losers in all matches.",
        "gold_parse": "SELECT min(loser_rank) FROM matches",
        "query": "SELECT loser_rank FROM matches",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the names of nations that speak both English and French.",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "gold_parse": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "query": "SELECT T1.date_adopted , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the average ranking for each player and their first name.",
        "gold_parse": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "query": "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "gold_parse": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "query": "SELECT Name FROM country WHERE Continent = value INTERSECT SELECT Name FROM country WHERE Population > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "gold_parse": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id",
        "query": "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries in Asia.",
        "gold_parse": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the average edispl for all volvos?",
        "gold_parse": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'",
        "query": "SELECT Avg ( Horsepower ) FROM cars_data",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the total number of tours for each ranking date.",
        "gold_parse": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "query": "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of different templates used for documents.",
        "gold_parse": "SELECT count(DISTINCT template_id) FROM Documents",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "gold_parse": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "query": "SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many countries have a republic as their form of government?",
        "gold_parse": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "query": "SELECT Count ( * ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many countries have governments that are republics?",
        "gold_parse": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "query": "SELECT Count ( DISTINCT Continent ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
        "gold_parse": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
        "query": "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which continent is Anguilla in?",
        "gold_parse": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "query": "SELECT Continent FROM country WHERE LocalName = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the average ages of losers and winners across matches?",
        "gold_parse": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "query": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "gold_parse": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "query": "SELECT Name FROM employee EXCEPT SELECT Name FROM employee",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "query": "SELECT Count ( * ) FROM airports WHERE Country = value AND City = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "gold_parse": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "How many orchestras does each record company manage?",
        "gold_parse": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "query": "SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Return the country codes for countries that do not speak English.",
        "gold_parse": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the feature type name of feature AirCon?",
        "gold_parse": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "query": "SELECT feature_type_name FROM Ref_Feature_Types",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1",
        "query": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the countries where either English or Dutch is the official language?",
        "gold_parse": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "query": "SELECT Continent FROM country WHERE LocalName = value OR LocalName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1",
        "query": "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "Show names of teachers and the number of courses they teach.",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "query": "SELECT Name , Count ( * ) FROM teacher GROUP BY Name",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "query": "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "query": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many official languages does Afghanistan have?",
        "gold_parse": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "query": "SELECT Count ( DISTINCT Code2 ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "gold_parse": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500",
        "query": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Horsepower = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the number of nations that use English and Dutch?",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which language is spoken by the largest number of countries?",
        "gold_parse": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Code2 FROM country ORDER BY Continent Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Return the name of the high school student with the most friends.",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are listed?",
        "gold_parse": "SELECT count(*) FROM Transcripts",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "gold_parse": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "query": "SELECT first_name , middle_name , last_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "query": "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the first student to register?",
        "gold_parse": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "query": "SELECT first_name , middle_name , last_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "gold_parse": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "gold_parse": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "gold_parse": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "query": "SELECT T1.series_name , T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "gold_parse": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "query": "SELECT T1.Rating , T1.Rating FROM TV_series AS T1 GROUP BY T1.Rating ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT T1.Rating FROM TV_Channel AS T2 JOIN TV_series AS T1 ON T2.id = T1.Channel GROUP BY T2.Hight_definition_TV ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the number of makers of care in France?",
        "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'",
        "query": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "query": "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "query": "SELECT Name , Count ( * ) FROM singer GROUP BY Name",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "gold_parse": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "query": "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "gold_parse": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "query": "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the names of the nations that were founded after 1950.",
        "gold_parse": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "query": "SELECT Continent FROM country WHERE IndepYear > value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "gold_parse": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "query": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "gold_parse": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "query": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "gold_parse": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "gold_parse": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "query": "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "gold_parse": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "gold_parse": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "query": "SELECT T1.Version_Number , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "gold_parse": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "query": "SELECT T1.Major , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight < = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "query": "SELECT Sum ( LifeExpectancy ) FROM country WHERE Name ! = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "gold_parse": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "query": "SELECT first_name , last_name FROM players WHERE first_name LIKE value ORDER BY birth_date Asc",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "gold_parse": "SELECT count(*) FROM pets WHERE weight  >  10",
        "query": "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many languages are spoken in Aruba?",
        "gold_parse": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "query": "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights depart from 'APG'?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What region does Angola belong to and what is its population?",
        "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "query": "SELECT Region , Population FROM country",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "query": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "query": "SELECT GovernmentForm FROM country WHERE Continent = value AND Population > value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "gold_parse": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "query": "SELECT Name FROM country WHERE Continent = value INTERSECT SELECT Name FROM country WHERE Population > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query": "SELECT DISTINCT Document_Description FROM Documents",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Which grades have 4 or more high schoolers?",
        "gold_parse": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "query": "SELECT grade FROM Highschooler WHERE grade = value OR grade = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "gold_parse": "SELECT date_arrived ,  date_departed FROM Dogs",
        "query": "SELECT date_departed , date_of_birth FROM Dogs",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "gold_parse": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "query": "SELECT winner_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of flights departing from 'APG'.",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "gold_parse": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders",
        "query": "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "query": "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "gold_parse": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "query": "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "query": "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "gold_parse": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "museum_visit",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "gold_parse": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "query": "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the country codes of countries where people use languages other than English?",
        "gold_parse": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "query": "SELECT Code FROM country WHERE Population > value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "gold_parse": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "query": "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "gold_parse": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "For students who have pets, how many pets does each student have?",
        "gold_parse": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "query": "SELECT StuID , Count ( * ) FROM Student GROUP BY StuID",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "gold_parse": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "query": "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "gold_parse": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT professional_id , role_code , email_address FROM Professionals",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "gold_parse": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'",
        "query": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "gold_parse": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "query": "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "gold_parse": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "gold_parse": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "gold_parse": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3",
        "query": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "query": "SELECT first_name , last_name , owner_id FROM Owners",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the player with the most tours?",
        "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "query": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "museum_visit",
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "gold_parse": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "query": "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "gold_parse": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average and the maximum capacity of all stadiums?",
        "gold_parse": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "query": "select avg ( Average ) , max ( Capacity ) from stadium",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity of the stadium  with the most concerts after 2013?",
        "gold_parse": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "select T2.Name , T2.Capacity from concert as T1 join stadium as T2 on T1.Stadium_ID = T2.Stadium_ID where T1.Year > value group by T1.Stadium_ID order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "query": "select Name , count ( * ) from singer group by Name",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "query": "select count ( * ) from Pets where pet_age > value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "How many dog pets are raised by female students?",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "query": "select count ( * ) from Student as T1 join Has_Pet as T2 on T1.StuID = T2.StuID join Pets as T3 on T2.PetID = T3.PetID where T1.Sex = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find the name of students who have both cat and dog pets.",
        "gold_parse": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "query": "select T3.Fname from Pets as T1 join Has_Pet as T2 on T1.PetID = T2.PetID join Student as T3 on T2.StuID = T3.StuID where T1.PetType = value intersect select T6.LName from Pets as T4 join Has_Pet as T5 on T4.PetID = T5.PetID join Student as T6 on T5.StuID = T6.StuID where T4.PetType = value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "gold_parse": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "query": "select PetType , pet_age from Pets order by pet_age limit value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "What are the different first names and ages of the students who do have pets?",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "query": "select Fname , Age from Student",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "For students who have pets, how many pets does each student have?",
        "gold_parse": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "query": "select count ( * ) from Pets",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "gold_parse": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "query": "select LName from Student where Age = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "gold_parse": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA)",
        "query": "select T2.Make , T2.Make from cars_data as T1 join car_names as T2 on T1.Id = T2.MakeId order by T1.Year limit value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "gold_parse": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
        "query": "select T1.Continent , count ( * ) from continents as T1 join countries as T2 on T1.ContId = T2.Continent group by T2.Continent",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "gold_parse": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'",
        "query": "select T1.Accelerate from cars_data as T1 join car_names as T2 on T1.Id = T2.MakeId where T2.Make = value and T2.Model = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "gold_parse": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'",
        "query": "select sum ( T1.Accelerate ) from cars_data as T1 join car_names as T2 on T1.Id = T2.MakeId where T2.Model = value and T2.Model = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?",
        "gold_parse": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'",
        "query": "select count ( * ) from countries where CountryName = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "gold_parse": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'",
        "query": "select count ( * ) from countries where CountryName = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the countries having at least one car maker? List name and id.",
        "gold_parse": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1",
        "query": "select CountryName , CountryId from countries",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "gold_parse": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1",
        "query": "select CountryName , CountryId from countries group by CountryId having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "gold_parse": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3",
        "query": "select T2.CountryName from continents as T1 join countries as T2 on T1.ContId = T2.Continent where T1.Continent = value group by T2.CountryName having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1",
        "query": "select T2.Model from cars_data as T1 join car_names as T2 on T1.Id = T2.MakeId order by T1.Horsepower desc limit value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the car wmodel with the highest mpg?",
        "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1",
        "query": "select MPG from cars_data order by MPG desc limit value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "gold_parse": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders",
        "query": "select max ( Accelerate ) from cars_data",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Which model has the most version(make) of cars?",
        "gold_parse": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "query": "select Model from model_list group by Model order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "gold_parse": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "select FullName , Id from car_makers group by Id having count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
        "gold_parse": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000",
        "query": "select Year from cars_data where Weight < value intersect select Year from cars_data where Weight < value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
        "gold_parse": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1",
        "query": "select max ( MPG ) from cars_data where Cylinders > value or Year > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
        "gold_parse": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1",
        "query": "select max ( MPG ) from cars_data where Cylinders > value or Year < value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "gold_parse": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'",
        "query": "select T3.Model from car_makers as T1 join model_list as T2 on T1.Id = T2.Maker join car_names as T3 on T2.Model = T3.Model where T1.Maker = value except select T6.Model from car_makers as T4 join model_list as T5 on T4.Id = T5.Maker join car_names as T6 on T5.Model = T6.Model where T4.Maker = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "gold_parse": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'",
        "query": "select T3.ModelId from cars_data as T1 join car_names as T2 on T1.Id = T2.MakeId join model_list as T3 on T2.Model = T3.Model where T3.Model = value and T1.Horsepower != value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "select Id , Maker from car_makers group by Id having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats?",
        "gold_parse": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'",
        "query": "select T2.CountryId , T2.CountryName from car_makers as T1 join countries as T2 on T1.Country = T2.CountryId where T1.Maker = value union select T4.CountryId , T4.CountryName from car_makers as T3 join countries as T4 on T3.Country = T4.CountryId where T3.Maker = value group by T4.CountryId having count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the airport name for airport 'AKO'?",
        "gold_parse": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "query": "select AirportName from airports where Country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "query": "select count ( * ) from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.City = value and T2.City = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "select count ( * ) from airlines where Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Give the number of Jetblue Airways flights.",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "select count ( * ) from airlines where Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "query": "select count ( * ) from airports where AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "query": "select count ( * ) from airports where AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "query": "select count ( * ) from airports where City = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "query": "select count ( * ) from airports where City = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which city is the most frequent source airport?",
        "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "query": "select City from airports group by City order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the airport code of the airport with the most flights?",
        "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "query": "select AirportCode from airports group by AirportCode order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "gold_parse": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "query": "select T2.Abbreviation , T2.Country from flights as T1 join airlines as T2 order by T1.FlightNo limit value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "query": "select T2.Airline from flights as T1 join airlines as T2 where T1.FlightNo = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have a flight with destination airport AHD?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "query": "select Airline from flights where DestAirport = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "query": "select T1.Airline from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.AirportName = value except select T3.Airline from flights as T3 join airports as T4 on T3.DestAirport = T4.AirportCode where T4.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have at least 10 flights.",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "query": "select Airline from flights group by Airline having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have fewer than 200 flights.",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "query": "select Airline from airlines where uid in ( select Airline from flights where FlightNo < value )",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have less than 200 flights?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "query": "select Airline from airlines where uid in ( select Airline from flights where FlightNo < value )",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "select T1.FlightNo from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights land in Aberdeen or Abilene?",
        "gold_parse": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "query": "select count ( * ) from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.AirportName = value or T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "gold_parse": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "query": "select count ( * ) , Name from shop group by Name",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "gold_parse": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "query": "select Name , count ( * ) from shop group by Shop_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?",
        "gold_parse": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "query": "select Version_Number , Template_Type_Code from Templates order by Template_Type_Code asc limit value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes that are not used by any document.",
        "gold_parse": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "query": "select Template_Type_Code from Templates except select Template_Type_Code from Templates",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that are not used for any document?",
        "gold_parse": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "query": "select Template_Type_Code from Templates except select Template_Type_Code from Templates",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query": "select Document_Description from Documents",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query": "select Document_ID , count ( * ) from Paragraphs group by Document_ID order by count ( * ) asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id and name of the document with the most paragraphs.",
        "gold_parse": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "query": "select Document_ID , Document_Name from Documents group by Document_ID order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id of the document with the fewest paragraphs.",
        "gold_parse": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "query": "select T1.Document_ID from Documents as T1 join Paragraphs as T2 on T1.Document_ID = T2.Document_ID group by T1.Document_ID order by count ( * ) asc limit value",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "What is the most commmon hometowns for teachers?",
        "gold_parse": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Hometown from teacher where Name = value group by Hometown order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers who teach at least two courses?",
        "gold_parse": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "query": "select Name from teacher group by Teacher_ID having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "museum_visit",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "gold_parse": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "query": "select Name from visitor where Level_of_membership > value order by Level_of_membership",
        "correctness": 0
    },
    {
        "db_id": "museum_visit",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "gold_parse": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "query": "select avg ( Age ) from visitor where Level_of_membership > value",
        "correctness": 0
    },
    {
        "db_id": "museum_visit",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "gold_parse": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "query": "select Name , Level_of_membership from visitor where Age > value order by Level_of_membership",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "gold_parse": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "query": "select T2.first_name from matches as T1 join players as T2 on T1.winner_id = T2.player_id where T1.year = value intersect select T4.first_name from matches as T3 join players as T4 on T3.winner_id = T4.player_id where T3.year = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the oldest player.",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "select first_name , country_code from players order by birth_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "select first_name , country_code from players order by birth_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "gold_parse": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "query": "select T2.first_name , T2.last_name from matches as T1 join players as T2 on T1.winner_id = T2.player_id where T1.winner_hand = value order by T2.birth_date",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "query": "select first_name , country_code from players group by country_code order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "gold_parse": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "query": "select winner_name , winner_rank from matches group by winner_id order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "gold_parse": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "query": "select winner_name from matches where winner_rank = value order by winner_rank_points desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "gold_parse": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "query": "select loser_name , winner_rank from matches order by minutes desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "gold_parse": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "query": "select winner_name from matches order by year desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the total number of tours for each ranking date.",
        "gold_parse": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "query": "select ranking_date , count ( * ) from rankings group by ranking_date",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "gold_parse": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "query": "select count ( T1.winner_name ) from matches as T1 join players as T2 on T1.winner_id = T2.player_id where T2.first_name = value intersect select winner_name from matches where loser_seed = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "gold_parse": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "query": "select count ( * ) from matches as T1 join players as T2 on T1.winner_id = T2.player_id where T2.hand = value and T1.winner_age = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "gold_parse": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "query": "select T1.winner_name , T2.country_code , T3.ranking_date from matches as T1 join players as T2 on T1.winner_id = T2.player_id join rankings as T3 on T2.player_id = T3.player_id order by T1.winner_rank_points desc limit value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "How many ships ended up being 'Captured'?",
        "gold_parse": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "query": "select count ( * ) from battle as T1 join ship as T2 on T1.id = T2.lost_in_battle where T1.result = value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What is the average number of injuries caused each time?",
        "gold_parse": "SELECT avg(injured) FROM death",
        "query": "select avg ( injured ) , avg ( injured ) from death",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "gold_parse": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "query": "select T2.injured from ship as T1 join death as T2 on T1.id = T2.caused_by_ship_id where T1.tonnage = value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "gold_parse": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "query": "select name from battle where bulgarian_commander = value intersect select name from battle where bulgarian_commander = value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "gold_parse": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "query": "select T1.name , T1.date from battle as T1 join ship as T2 on T1.id = T2.lost_in_battle where T2.disposition_of_ship = value intersect select T3.name , T3.date from battle as T3 join ship as T4 on T3.id = T4.lost_in_battle where T4.name = value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What are the notes of the death events which has substring 'East'?",
        "gold_parse": "SELECT note FROM death WHERE note LIKE '%East%'",
        "query": "select note from death where killed like value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first and second line for all addresses?",
        "gold_parse": "SELECT line_1 ,  line_2 FROM addresses",
        "query": "select line_1 , line_1 from Addresses",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "For each department id, what is the name of the department with the most number of degrees?",
        "gold_parse": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "query": "select T1.department_name , count ( * ) from Departments as T1 join Degree_Programs as T2 on T1.department_id = T2.department_id group by T2.department_id order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department have?",
        "gold_parse": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "query": "select count ( * ) from Departments where department_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "query": "select first_name , middle_name , last_name from Students",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "gold_parse": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "query": "select degree_summary_name from Degree_Programs group by degree_summary_name order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "gold_parse": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "query": "select course_name from Courses",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the name of the course with most number of enrollments?",
        "gold_parse": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "query": "select course_name from Courses group by course_name order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "gold_parse": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "query": "select transcript_date , transcript_id from Transcripts group by transcript_id having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "gold_parse": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "query": "select T2.address_id , count ( * ) from Students as T1 join Addresses as T2 on T1.permanent_address_id = T2.address_id group by T1.current_address_id order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "gold_parse": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "query": "select transcript_date , transcript_date from Transcripts group by transcript_id order by count ( * ) asc limit value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with the least number of results?",
        "gold_parse": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "query": "select transcript_date , transcript_date from Transcripts group by transcript_id order by count ( * ) asc limit value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "select T3.semester_name from Students as T1 join Student_Enrolment as T2 on T1.student_id = T2.student_id join Semesters as T3 on T2.semester_id = T3.semester_id where T1.first_name = value intersect select T4.semester_name from Semesters as T4 join Student_Enrolment as T5 on T4.semester_id = T5.semester_id join Degree_Programs as T6 on T5.degree_program_id = T6.degree_program_id where T6.degree_summary_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "select semester_id from Student_Enrolment where degree_program_id = value intersect select T1.semester_id from Student_Enrolment as T1 join Degree_Programs as T2 on T1.degree_program_id = T2.degree_program_id where T2.degree_summary_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many different addresses do the students currently live?",
        "gold_parse": "SELECT count(DISTINCT current_address_id) FROM Students",
        "query": "select count ( * ) from Addresses",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the different addresses that have students living there?",
        "gold_parse": "SELECT count(DISTINCT current_address_id) FROM Students",
        "query": "select ( * ) from Addresses",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?",
        "gold_parse": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "query": "select T1.first_name from Students as T1 join Addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = value or T1.cell_mobile_number = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "gold_parse": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"",
        "query": "select Channel from Cartoon where Title = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "gold_parse": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "query": "select T1.Original_air_date from Cartoon as T1 join TV_Channel as T2 on T1.Channel = T2.id join TV_series as T3 on T2.id = T3.Channel where T3.Episode = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the produdction code and channel of the most recent cartoon?",
        "gold_parse": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query": "select Production_code , Channel from Cartoon order by Original_air_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "gold_parse": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "query": "select id from TV_Channel group by id having count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Return the names of all the poker players.",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "select Name from people",
        "correctness": 0
    },
    {
        "db_id": "voter_1",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "gold_parse": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "query": "select contestant_number , contestant_name from CONTESTANTS group by contestant_number having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which continent is Anguilla in?",
        "gold_parse": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "query": "select T1.Continent from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What language is predominantly spoken in Aruba?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "query": "select T2.Language from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T1.LocalName = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "gold_parse": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "query": "select Population , LifeExpectancy from country where Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "query": "select Name from country where LifeExpectancy = ( select min ( LifeExpectancy ) from country where Continent = value )",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "gold_parse": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "query": "select Population , Population from country order by GNP desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy in African countries that are republics?",
        "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "query": "select avg ( LifeExpectancy ) from country where Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total population of Gelderland district?",
        "gold_parse": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "query": "select sum ( T1.Population ) from country as T1 join city as T2 on T1.Code = T2.CountryCode where T2.District = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "select avg ( GNP ) , sum ( Population ) from country",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of languages used in Aruba?",
        "gold_parse": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "query": "select count ( T2.Language ) from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T1.Capital = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Name from country group by Name order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which continent has the most diverse languages?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Continent from country group by Continent order by count ( Continent ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which continent speaks the most languages?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Continent from country group by Continent order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many countries speak both English and Dutch?",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "query": "select count ( * ) from countrylanguage where Language = value intersect select T1.Name from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the number of nations that use English and Dutch?",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "query": "select count ( * ) from countrylanguage where Language = value intersect select T1.Continent from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the names of countries with English and French as official languages.",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "query": "select T1.Name from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.IsOfficial = value intersect select T3.Name from country as T3 join countrylanguage as T4 on T3.Code = T4.CountryCode where T4.IsOfficial = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the countries where either English or Dutch is the official language?",
        "gold_parse": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "query": "select T1.Continent from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.IsOfficial = value or T2.IsOfficial = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which countries have either English or Dutch as an official language?",
        "gold_parse": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "query": "select T1.Continent from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.IsOfficial = value or T1.GovernmentForm = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "select Name , Population , LifeExpectancy from country where Region = value order by LifeExpectancy desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "query": "select avg ( LifeExpectancy ) from country where GovernmentForm != value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of people living in the nations that do not use English?",
        "gold_parse": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "query": "select sum ( Population ) from country where Name != value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "query": "select T2.Language from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T1.HeadOfState = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "query": "select T2.IsOfficial from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T1.HeadOfState = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "gold_parse": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "query": "select count ( T2.Language ) from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T1.IndepYear < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "gold_parse": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "query": "select count ( Name ) from country where IndepYear < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "gold_parse": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "query": "select Continent from country where SurfaceArea > ( select max ( SurfaceArea ) from country where Continent = value )",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "query": "select Name from country where Population < ( select max ( Population ) from country where Continent = value )",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the country codes for countries that do not speak English?",
        "gold_parse": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language != value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Return the country codes for countries that do not speak English.",
        "gold_parse": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language != value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the country codes of countries where people use languages other than English?",
        "gold_parse": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language != value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value except select Code from country where GovernmentForm = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which cities are in European countries where English is not the official language?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "query": "select T1.Name from city as T1 join country as T2 on T1.CountryCode = T2.Code where T2.Continent = value except select T3.Name from city as T3 join country as T4 on T3.CountryCode = T4.Code where T4.Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "query": "select T1.Name from city as T1 join country as T2 on T1.CountryCode = T2.Code where T2.Continent = value except select T3.Name from city as T3 join country as T4 on T3.CountryCode = T4.Code where T4.Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Whic`h unique cities are in  Asian countries where Chinese is the official language?",
        "gold_parse": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "query": "select T1.Name from city as T1 join country as T2 on T1.CountryCode = T2.Code join countrylanguage as T3 on T2.Code = T3.CountryCode where T2.Region = value and T3.Language = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "gold_parse": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "select Population , LocalName , GovernmentForm from country order by SurfaceArea desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "gold_parse": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "query": "select GovernmentForm , sum ( LifeExpectancy ) from country where LifeExpectancy > value group by GovernmentForm",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "gold_parse": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "query": "select avg ( LifeExpectancy ) , sum ( LifeExpectancy ) from country where Continent < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "gold_parse": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "query": "select Name , Region from country order by SurfaceArea desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f",
        "gold_parse": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
        "query": "select sum ( Population ) , avg ( Population ) from country where Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
        "gold_parse": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
        "query": "select sum ( Population ) , avg ( SurfaceArea ) from country where Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "gold_parse": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "query": "select T2.Language , T2.Percentage from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode order by T1.Population desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "gold_parse": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "query": "select count ( T1.Name ) from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "gold_parse": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value order by T1.Population desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "gold_parse": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "gold_parse": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "query": "select Name from conductor group by Conductor_ID having count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "query": "select name , count ( * ) from Highschooler group by name",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "query": "select name , count ( * ) from Highschooler group by name",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "query": "select name from Highschooler group by ID having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle.",
        "gold_parse": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "query": "select name from Highschooler where grade = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "query": "select name from Highschooler intersect select name from Highschooler",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "query": "select name , count ( * ) from Highschooler group by name",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "select name from Highschooler group by ID order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "query": "select name from Highschooler where grade = value intersect select name from Highschooler group by name having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the states where both owners and professionals live.",
        "gold_parse": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "query": "select state from Professionals intersect select state from Professionals",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "gold_parse": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "query": "select avg ( age ) from Dogs",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.",
        "gold_parse": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "query": "select name from Dogs except select T1.name from Dogs as T1 join Treatments as T2 on T1.dog_id = T2.dog_id where T2.cost_of_treatment > value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?",
        "gold_parse": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "query": "select T1.name from Dogs as T1 join Treatments as T2 on T1.dog_id = T2.dog_id where T2.cost_of_treatment > value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "gold_parse": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "query": "select T1.professional_id , T1.role_code , T1.email_address from Professionals as T1 join Treatments as T2 on T1.professional_id = T2.professional_id where T2.treatment_id = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "gold_parse": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "query": "select professional_id , role_code , email_address from Professionals except select professional_id , role_code , email_address from Professionals",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "gold_parse": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "query": "select T2.professional_id , T1.role_code , T2.date_of_treatment from Professionals as T1 join Treatments as T2 on T1.professional_id = T2.professional_id group by T2.professional_id having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "gold_parse": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "query": "select T2.owner_id , T1.last_name from Owners as T1 join Dogs as T2 on T1.owner_id = T2.owner_id join Treatments as T3 on T2.dog_id = T3.dog_id order by T3.cost_of_treatment desc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "gold_parse": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "query": "select T1.treatment_type_description from Treatment_Types as T1 join Treatments as T2 on T1.treatment_type_code = T2.treatment_type_code order by T2.cost_of_treatment asc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "gold_parse": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "query": "select T1.treatment_type_description from Treatment_Types as T1 join Treatments as T2 on T1.treatment_type_code = T2.treatment_type_code order by T2.cost_of_treatment limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "gold_parse": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "query": "select T3.owner_id , T2.zip_code from Charges as T1 join Owners as T2 join Dogs as T3 group by T3.owner_id order by sum ( T1.charge_amount ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "gold_parse": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "query": "select T1.name , T2.date_of_treatment from Dogs as T1 join Treatments as T2 on T1.dog_id = T2.dog_id order by T1.date_departed limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "gold_parse": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "query": "select T1.date_arrived , T2.date_of_treatment from Dogs as T1 join Treatments as T2 on T1.dog_id = T2.dog_id",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "gold_parse": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "query": "select date_arrived , date_departed from Dogs",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "gold_parse": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "query": "select first_name , street , state from Professionals where city like value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "gold_parse": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "query": "select role_code , street , state , state from Professionals where city like value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Tell me the number of dogs that have received any treatment.",
        "gold_parse": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "query": "select count ( dog_id ) from Treatments",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the age of the oldest dog?",
        "gold_parse": "SELECT max(age) FROM Dogs",
        "query": "select age from Dogs order by date_adopted desc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "How much does the most expensive charge type costs?",
        "gold_parse": "SELECT max(charge_amount) FROM Charges",
        "query": "select charge_amount from Charges order by charge_amount desc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "gold_parse": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "query": "select first_name , last_name from Professionals",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers that have more than one song.",
        "gold_parse": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "query": "select Name from singer group by Name having count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the names of the singers that have more than one songs?",
        "gold_parse": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "query": "select Name from singer group by Name having count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which cities have a population greater than 1,000,000?",
        "gold_parse": "",
        "query": "SELECT city_name FROM city WHERE population > 100000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the state names and capitals in the USA?",
        "gold_parse": "",
        "query": "SELECT state_name, country_name FROM state WHERE country_name = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which rivers are longer than 1,000 kilometers?",
        "gold_parse": "",
        "query": "SELECT river_name FROM river WHERE length > 200;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which lakes have an area greater than 1,000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which mountains have an altitude greater than 4,000 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude > 2000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the states with the highest points above 3,000 meters and their highest points?",
        "gold_parse": "",
        "query": "SELECT state_name, lowest_point FROM highlow WHERE highest_elevation > 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the states with a population density less than 50 people per square kilometer?",
        "gold_parse": "",
        "query": "SELECT state_name, population FROM state WHERE density < 50;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the borders of the state of Texas?",
        "gold_parse": "",
        "query": "SELECT border FROM border_info WHERE state_name = 'California';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the city names and their states in Canada?",
        "gold_parse": "",
        "query": "SELECT city_name, population FROM city WHERE country_name = 'CAN';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have a population greater than 5,000,000?",
        "gold_parse": "",
        "query": "SELECT state_name FROM state WHERE population > 1000000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the states with an area greater than 100,000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, density FROM state WHERE area > 100000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which cities are located in the state of Texas?",
        "gold_parse": "",
        "query": "SELECT city_name FROM city WHERE state_name = 'New York';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the lake names and their states in the USA?",
        "gold_parse": "",
        "query": "SELECT lake_name, area FROM lake WHERE country_name = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the mountain names and their altitudes in India?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the river names and their lengths in Brazil?",
        "gold_parse": "",
        "query": "SELECT river_name, country_name FROM river WHERE country_name = 'BRA';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which state has the highest elevation at Mount Whitney?",
        "gold_parse": "",
        "query": "SELECT state_name, highest_point FROM highlow WHERE highest_elevation = 'Mount Whitney';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which state has Austin as its capital?",
        "gold_parse": "",
        "query": "SELECT state_name, capital FROM state WHERE capital = 'Austin';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which state has Death Valley as its lowest point?",
        "gold_parse": "",
        "query": "SELECT state_name, highest_point FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have a population less than 1,000,000?",
        "gold_parse": "",
        "query": "SELECT state_name, country_name FROM state WHERE population < 1000000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the states with a population density greater than 200 people per square kilometer?",
        "gold_parse": "",
        "query": "SELECT state_name, population FROM state WHERE density > 200;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which cities have a population less than 50,000?",
        "gold_parse": "",
        "query": "SELECT city_name, area FROM city WHERE population < 50000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the states and their areas in Australia?",
        "gold_parse": "",
        "query": "SELECT state_name, area FROM state WHERE country_name = 'AUS';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which lakes have an area less than 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT lake_name, country_name FROM lake WHERE area < 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which mountains have an altitude less than 1,000 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude < 1000;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of all authors?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author WHERE authorname = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of all venues?",
        "gold_parse": "",
        "query": "SELECT venuename FROM venue WHERE venueid = 'Conference A';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of all datasets?",
        "gold_parse": "",
        "query": "SELECT datasetname FROM dataset WHERE datasetname = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of all journals?",
        "gold_parse": "",
        "query": "SELECT journalname FROM journal WHERE journalid = 'Journal B';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of all keyphrases?",
        "gold_parse": "",
        "query": "SELECT keyphrasename FROM keyphrase WHERE keyphraseid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of all papers?",
        "gold_parse": "",
        "query": "SELECT title FROM paper WHERE title = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles and publication years of all papers?",
        "gold_parse": "",
        "query": "SELECT title, year FROM paper WHERE year = '2020';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles and number of citing papers for all papers?",
        "gold_parse": "",
        "query": "SELECT title, numciting FROM paper WHERE numciting = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles and number of cited papers for all papers?",
        "gold_parse": "",
        "query": "SELECT title, numcitedby FROM paper WHERE numcitedby = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of venues where papers have been published?",
        "gold_parse": "",
        "query": "SELECT venuename FROM venue JOIN paper ON venue.venueid = paper.venueid WHERE venuename = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of journals where papers have been published?",
        "gold_parse": "",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE journalname = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the dataset names associated with papers?",
        "gold_parse": "",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE datasetname = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the keyphrases associated with papers?",
        "gold_parse": "",
        "query": "SELECT keyphrasename FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid WHERE keyphrasename = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of authors who have written papers?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE authorname = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers published after 2015?",
        "gold_parse": "",
        "query": "SELECT title FROM paper WHERE year = 2015;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of authors who have cited papers?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid IN (SELECT citingpaperid FROM cite WHERE authorname = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers that have been cited?",
        "gold_parse": "",
        "query": "SELECT title FROM paper JOIN cite ON paper.paperid = cite.citedpaperid WHERE title = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers and their respective venues?",
        "gold_parse": "",
        "query": "SELECT title, venuename FROM paper JOIN venue ON paper.venueid = venue.venueid WHERE venuename = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers and their respective journals?",
        "gold_parse": "",
        "query": "SELECT title, journalname FROM paper JOIN journal ON paper.journalid = journal.journalid WHERE journalname = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers and their associated datasets?",
        "gold_parse": "",
        "query": "SELECT title, datasetname FROM paper JOIN paperdataset ON paper.paperid = paperdataset.paperid JOIN dataset ON paperdataset.datasetid = dataset.datasetid WHERE datasetname = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers and their associated keyphrases?",
        "gold_parse": "",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE keyphrasename = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers and their authors?",
        "gold_parse": "",
        "query": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE authorname = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the field IDs?",
        "gold_parse": "",
        "query": "SELECT fieldid FROM field WHERE fieldid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the paper IDs associated with fields?",
        "gold_parse": "",
        "query": "SELECT paperid FROM paperfield WHERE paperid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers associated with fields?",
        "gold_parse": "",
        "query": "SELECT title FROM paper JOIN paperfield ON paper.paperid = paperfield.paperid WHERE fieldid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of venues where papers have been published?",
        "gold_parse": "",
        "query": "SELECT venuename FROM venue WHERE venueid IN (SELECT venueid FROM paper WHERE venuename = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of journals where papers have been published?",
        "gold_parse": "",
        "query": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper WHERE journalname = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of datasets associated with papers?",
        "gold_parse": "",
        "query": "SELECT datasetname FROM dataset WHERE datasetid IN (SELECT datasetid FROM paperdataset WHERE datasetname = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of keyphrases associated with papers?",
        "gold_parse": "",
        "query": "SELECT keyphrasename FROM keyphrase WHERE keyphraseid IN (SELECT keyphraseid FROM paperkeyphrase WHERE keyphrasename = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of authors who have written papers?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author WHERE authorid IN (SELECT authorid FROM writes WHERE authorname = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the field IDs associated with papers?",
        "gold_parse": "",
        "query": "SELECT fieldid FROM field WHERE fieldid IN (SELECT fieldid FROM paperfield WHERE fieldid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers published before 2010?",
        "gold_parse": "",
        "query": "SELECT title FROM paper WHERE year = 2010;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of authors and the titles of papers they wrote?",
        "gold_parse": "",
        "query": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE title = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs and names of all venues?",
        "gold_parse": "",
        "query": "SELECT venueid, venuename FROM venue WHERE venueid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs and names of all authors?",
        "gold_parse": "",
        "query": "SELECT authorid, authorname FROM author WHERE authorid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs and names of all datasets?",
        "gold_parse": "",
        "query": "SELECT datasetid, datasetname FROM dataset WHERE datasetid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs and names of all journals?",
        "gold_parse": "",
        "query": "SELECT journalid, journalname FROM journal WHERE journalid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs and names of all keyphrases?",
        "gold_parse": "",
        "query": "SELECT keyphraseid, keyphrasename FROM keyphrase WHERE keyphraseid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs and titles of all papers?",
        "gold_parse": "",
        "query": "SELECT paperid, title FROM paper WHERE paperid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the field IDs and paper IDs associated with fields?",
        "gold_parse": "",
        "query": "SELECT fieldid, paperid FROM paperfield WHERE fieldid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers associated with the field ID 1?",
        "gold_parse": "",
        "query": "SELECT title FROM paper JOIN paperfield ON paper.paperid = paperfield.paperid WHERE paperfield.fieldid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs of venues where papers have been published?",
        "gold_parse": "",
        "query": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper WHERE venueid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs of journals where papers have been published?",
        "gold_parse": "",
        "query": "SELECT journalid FROM journal WHERE journalid IN (SELECT journalid FROM paper WHERE journalid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs of datasets associated with papers?",
        "gold_parse": "",
        "query": "SELECT datasetid FROM dataset WHERE datasetid IN (SELECT datasetid FROM paperdataset WHERE datasetid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs of keyphrases associated with papers?",
        "gold_parse": "",
        "query": "SELECT keyphraseid FROM keyphrase WHERE keyphraseid IN (SELECT keyphraseid FROM paperkeyphrase WHERE keyphraseid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What is the ID of every author who has at least one paper?",
        "gold_parse": "",
        "query": "SELECT authorid FROM author WHERE authorname = (SELECT title FROM paper);",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Show the year and the venue name for all papers.",
        "gold_parse": "",
        "query": "SELECT T1.year, T2.venuename FROM paper AS T1 JOIN venue AS T2 ON T1.venueid = T2.venueid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "How many papers has each author written?",
        "gold_parse": "",
        "query": "SELECT authorid, COUNT(*) FROM paper GROUP BY authorid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Show the names of authors and the number of papers they have written.",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(*) FROM author;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What is the average number of citations received by all papers?",
        "gold_parse": "",
        "query": "SELECT Avg(numciting) FROM paper;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What is the minimum, average, and maximum publication year across all papers?",
        "gold_parse": "",
        "query": "SELECT Min(year), Max(year) FROM paper;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What is the average number of papers citing each paper?",
        "gold_parse": "",
        "query": "SELECT Avg(numcitedby) FROM paper;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Show different journals and the number of papers published in each.",
        "gold_parse": "",
        "query": "SELECT journalname, COUNT(*) FROM paper GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Find the titles of papers that do not have any associated dataset?",
        "gold_parse": "",
        "query": "SELECT title FROM paper EXCEPT SELECT title FROM paperdataset;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the different fields?",
        "gold_parse": "",
        "query": "SELECT DISTINCT fieldid FROM keyphrase;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "List the titles of papers that have been cited by more than 10 papers or have cited more than 20 papers.",
        "gold_parse": "",
        "query": "SELECT title FROM paper WHERE numciting > 10 OR numcitedby > 20;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "How many different datasets are there?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT datasetid) FROM paperdataset;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "List the title and author name of all papers.",
        "gold_parse": "",
        "query": "SELECT title, authorname FROM paper JOIN author ON paper.paperid = author.authorid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Show the dataset names and the keyphrases associated with them.",
        "gold_parse": "",
        "query": "SELECT T1.datasetname, T2.keyphrasename FROM dataset AS T1 JOIN paperdataset AS T2 ON T1.datasetid = T2.datasetid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Show the keyphrase names and the venue IDs associated with them.",
        "gold_parse": "",
        "query": "SELECT T1.keyphrasename, T2.venueid FROM keyphrase AS T1 JOIN paperkeyphrase AS T2 ON T1.keyphraseid = T2.keyphraseid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Show the field IDs and the number of papers associated with each author.",
        "gold_parse": "",
        "query": "SELECT authorid, COUNT(*) FROM paperfield GROUP BY fieldid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Show the field IDs and the number of papers published in each field.",
        "gold_parse": "",
        "query": "SELECT paperid, COUNT(*) FROM paper GROUP BY fieldid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "List the IDs of journals and the number of papers they have published, ordered by the number of papers in descending order.",
        "gold_parse": "",
        "query": "SELECT journalid, COUNT(*) FROM paper GROUP BY journalid ORDER BY COUNT(*) DESC;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Show the IDs of papers that cited the paper with ID 1.",
        "gold_parse": "",
        "query": "SELECT paperid FROM cite WHERE citedpaperid = 1;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "How many distinct authors are there?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT authorid) FROM paper;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers published in the venue with ID 2?",
        "gold_parse": "",
        "query": "SELECT title FROM paper WHERE venueid IN (SELECT venueid FROM paper WHERE venueid = 2);",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers that have been cited more than the average number of times?",
        "gold_parse": "",
        "query": "SELECT title FROM paper WHERE numciting > (SELECT Avg(numciting) FROM journal);",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "List the names of authors and the titles of papers they have written before 2010.",
        "gold_parse": "",
        "query": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.year < 2010;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers that have a journal ID?",
        "gold_parse": "",
        "query": "SELECT title, journalid FROM paper WHERE journalid IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names of authors and the titles of papers they wrote that were published after 2020?",
        "gold_parse": "",
        "query": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.year > 2020;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers ordered by the year of publication in descending order?",
        "gold_parse": "",
        "query": "SELECT title, year FROM paper ORDER BY numciting DESC;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers ordered by the number of citing papers in descending order?",
        "gold_parse": "",
        "query": "SELECT title, venueid FROM paper ORDER BY numcitedby DESC;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the venue names and titles of papers ordered by the venue name in descending order?",
        "gold_parse": "",
        "query": "SELECT venuename, title FROM venue JOIN paper ON venue.venueid = paper.venueid ORDER BY venuename DESC;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers and their field IDs ordered by the field ID in ascending order?",
        "gold_parse": "",
        "query": "SELECT title, fieldid FROM paper JOIN paperfield ON paper.paperid = paperfield.paperid ORDER BY fieldid ASC;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the dataset names and titles of papers ordered by the paper title in ascending order?",
        "gold_parse": "",
        "query": "SELECT datasetname, title FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid ORDER BY title ASC;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the keyphrase names and titles of papers ordered by the keyphrase name in ascending order?",
        "gold_parse": "",
        "query": "SELECT keyphrasename, title FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid ORDER BY title ASC;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the ID of every singer who has a net worth below the maximum?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the birth year and song title for all singers.",
        "gold_parse": "",
        "query": "SELECT T1.Birth_Year, T2.Title FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "How many songs has each singer sung?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM song GROUP BY Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers and the sales of their songs.",
        "gold_parse": "",
        "query": "SELECT Name, Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the average highest chart position for all singers?",
        "gold_parse": "",
        "query": "SELECT Avg(Highest_Position) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the minimum, average, and maximum net worth across all singers?",
        "gold_parse": "",
        "query": "SELECT Min(Birth_Year), Avg(Net_Worth_Millions), Max(Net_Worth_Millions) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the average sales for all singers?",
        "gold_parse": "",
        "query": "SELECT Avg(Sales) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show different citizenships and the number of songs for each.",
        "gold_parse": "",
        "query": "SELECT Citizenship, COUNT(*) FROM song GROUP BY Citizenship;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the IDs of songs that do not have any associated singer?",
        "gold_parse": "",
        "query": "SELECT Song_ID FROM song EXCEPT SELECT Singer_ID FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the different birth years?",
        "gold_parse": "",
        "query": "SELECT DISTINCT Birth_Year FROM song;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "List the titles of songs that have sales less than 1,000,000 or a highest position greater than 10.",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales < 1000000 OR Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "How many different singers are there?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Name) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "List the titles of songs and the birth years of the singers who sang them.",
        "gold_parse": "",
        "query": "SELECT Title, Birth_Year FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers and the sales of their songs.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Sales FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the citizenships of singers and the highest positions of their songs.",
        "gold_parse": "",
        "query": "SELECT T1.Citizenship, T2.Highest_Position FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers and their net worth.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Net_Worth_Millions FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers and the number of songs they have sung, ordered by the number of songs in ascending order.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name ORDER BY COUNT(*) ASC;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show the sales of songs that have sales greater than 100,000.",
        "gold_parse": "",
        "query": "SELECT Sales FROM song WHERE Sales > 100000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "How many distinct citizenships are there?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Citizenship) FROM song;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs sung by singers who have a net worth less than 10 million dollars?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < 10);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs that reached a chart position greater than 10?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "List the names of singers and the number of songs they have sung, ordered by the number of songs in ascending order.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name ORDER BY COUNT(*) ASC;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "List the titles of songs and the number of times they have been sung.",
        "gold_parse": "",
        "query": "SELECT Title, COUNT(*) FROM song GROUP BY Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs sung by John Doe?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Singer_ID = (SELECT Singer_ID FROM singer WHERE Name = 'John Doe');",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer who sang 'Song A'?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Singer_ID = (SELECT Song_ID FROM song WHERE Title = 'Song A');",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles and highest positions of songs that have a chart position above the average?",
        "gold_parse": "",
        "query": "SELECT Title, Highest_Position FROM song WHERE Highest_Position < (SELECT Avg(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs sung by singers who are Canadian citizens?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Citizenship = 'CAN');",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles and highest positions of songs that have a chart position below the average?",
        "gold_parse": "",
        "query": "SELECT Title, Highest_Position FROM song WHERE Highest_Position > (SELECT Avg(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs that have sales less than 500,000?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales < 500000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the names of singers who are citizens of the USA?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Citizenship = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles and sales of songs that have sales below the average?",
        "gold_parse": "",
        "query": "SELECT Title, Sales FROM song WHERE Sales < (SELECT Avg(Highest_Position) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs that reached the highest sales?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Highest_Position = (SELECT Max(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the names of singers who do not have a recorded net worth?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs that have sales above the minimum?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales > (SELECT Min(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "How many songs has each singer sung?",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Citizenship;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs that reached a chart position greater than 5?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Highest_Position > 5;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the names of singers who have a net worth less than 50 million dollars?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions < 50;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles and sales of songs that have sales below the minimum?",
        "gold_parse": "",
        "query": "SELECT Title, Sales FROM song WHERE Sales < (SELECT Min(Highest_Position) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the names of singers who were born after 1980?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Birth_Year > 1980;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs sung by singers who have a net worth less than 20 million dollars?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < 20);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs that have sales less than 100,000?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales < 100000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Which singers have a recorded birth year?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Birth_Year IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the code of every country that has a population below the maximum?",
        "gold_parse": "",
        "query": "SELECT Code FROM country WHERE Population < (SELECT Max(Population) FROM country);",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Show the population and language spoken in all cities.",
        "gold_parse": "",
        "query": "SELECT T1.Population, T2.Language FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many cities does each country have?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM city GROUP BY CountryCode;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Show the names of countries and their regions.",
        "gold_parse": "",
        "query": "SELECT Name, Region FROM country JOIN city ON country.Code = city.CountryCode;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy of all countries?",
        "gold_parse": "",
        "query": "SELECT Avg(LifeExpectancy) FROM country;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the minimum and maximum surface area across all countries?",
        "gold_parse": "",
        "query": "SELECT Min(SurfaceArea), Max(SurfaceArea) FROM country;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average percentage of official languages in all countries?",
        "gold_parse": "",
        "query": "SELECT Avg(IsOfficial) FROM countrylanguage;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Show different regions and the number of countries in each.",
        "gold_parse": "",
        "query": "SELECT Region, COUNT(*) FROM country GROUP BY Region;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the IDs of cities that do not belong to any country?",
        "gold_parse": "",
        "query": "SELECT ID FROM city EXCEPT SELECT CountryCode FROM country;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the different languages spoken in cities?",
        "gold_parse": "",
        "query": "SELECT DISTINCT Language FROM city;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "List the names of cities that have a population less than 1,000,000 or greater than 100,000.",
        "gold_parse": "",
        "query": "SELECT Name FROM city WHERE Population < 1000000 OR Population > 100000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many different regions are there?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Region) FROM country;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "List the names of countries and their life expectancies.",
        "gold_parse": "",
        "query": "SELECT Name, LifeExpectancy FROM country;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Show the names of countries and their continents.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Continent FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Show the continents and regions of all countries.",
        "gold_parse": "",
        "query": "SELECT T1.Continent, T2.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Show the names of countries and the surface areas of their capitals.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.SurfaceArea FROM country AS T1 JOIN city AS T2 ON T1.Capital = T2.ID;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Show the codes of countries and the number of languages spoken in them, ordered by the number of languages in ascending order.",
        "gold_parse": "",
        "query": "SELECT CountryCode, COUNT(*) FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(*) ASC;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Show the populations of cities that have a population greater than 100,000.",
        "gold_parse": "",
        "query": "SELECT Population FROM city WHERE Population > 100000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "How many distinct continents are there?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Continent) FROM country;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of cities in countries that have a surface area less than 500,000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE SurfaceArea < 500000);",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of cities that have a population less than 100,000?",
        "gold_parse": "",
        "query": "SELECT Name FROM city WHERE Population < 100000;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the IDs of students who have not registered yet?",
        "gold_parse": "",
        "query": "SELECT student_id FROM Students WHERE date_first_registered IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the first name, last name, and department name for all students.",
        "gold_parse": "",
        "query": "SELECT T1.first_name, T1.last_name, T2.department_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id JOIN Departments AS T4 ON T3.department_id = T4.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses does each department offer?",
        "gold_parse": "",
        "query": "SELECT department_id, COUNT(*) FROM Courses GROUP BY department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are enrolled in each course?",
        "gold_parse": "",
        "query": "SELECT course_id, COUNT(*) FROM Student_Enrolment GROUP BY course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average life expectancy of all countries?",
        "gold_parse": "",
        "query": "SELECT Avg(LifeExpectancy) FROM country;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum and maximum population across all countries?",
        "gold_parse": "",
        "query": "SELECT Min(Population), Max(Population) FROM country;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average percentage of official languages in all countries?",
        "gold_parse": "",
        "query": "SELECT Avg(IsOfficial) FROM countrylanguage;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show different regions and the number of countries in each.",
        "gold_parse": "",
        "query": "SELECT region, COUNT(*) FROM country GROUP BY region;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the IDs of addresses that are not used as current addresses by any student?",
        "gold_parse": "",
        "query": "SELECT address_id FROM Addresses EXCEPT SELECT current_address_id FROM Students;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the different states/provinces/counties where courses are offered?",
        "gold_parse": "",
        "query": "SELECT DISTINCT state_province_county FROM Courses;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List the names of courses that have 'basic' in their description.",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%basic%';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many different departments are there?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT department_name) FROM Departments;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List the names of degree programs and their associated courses.",
        "gold_parse": "",
        "query": "SELECT degree_summary_name, course_name FROM Degree_Programs JOIN Courses ON Degree_Programs.degree_program_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the first name, last name, and department name for all students.",
        "gold_parse": "",
        "query": "SELECT T1.first_name, T1.last_name, T2.department_name FROM Students AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_id = T2.student_id JOIN Departments AS T3 ON T2.course_id = T3.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the first names of students and the course names they are enrolled in.",
        "gold_parse": "",
        "query": "SELECT T1.first_name, T2.course_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the degree summary names and descriptions of departments for all degree programs.",
        "gold_parse": "",
        "query": "SELECT T1.degree_summary_name, T2.department_description FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the IDs of courses that have 'Intro' in their description.",
        "gold_parse": "",
        "query": "SELECT course_id FROM Courses WHERE course_description LIKE '%Intro%';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many distinct courses are offered?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT course_id) FROM Courses;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of courses that have a section starting with 'A'?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections WHERE section_name LIKE 'A%');",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many degree programs does each department offer?",
        "gold_parse": "",
        "query": "SELECT department_name, COUNT(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first and last names of students who do not have a cell/mobile number?",
        "gold_parse": "",
        "query": "SELECT first_name, last_name FROM Students WHERE cell_mobile_number IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of advanced courses?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%advanced%';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the department offering the 'Calculus' course?",
        "gold_parse": "",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Courses WHERE course_name = 'Calculus');",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of intermediate courses?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%Intermediate%';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the department offering the 'M.Sc. Biology' degree?",
        "gold_parse": "",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name = 'M.Sc. Biology');",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the department offering courses with 'Physics' in their description?",
        "gold_parse": "",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Courses WHERE course_description LIKE '%Physics%');",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and number of courses that have 'Data' in their description?",
        "gold_parse": "",
        "query": "SELECT course_name, COUNT(*) FROM Courses WHERE course_description LIKE '%Data%' GROUP BY course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of courses that have 'Science' in their name?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Science%';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of courses that have 'Biology' in their description?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%Biology%';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the department offering courses with 'Chemistry' in their name?",
        "gold_parse": "",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Courses WHERE course_name LIKE '%Chemistry%');",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of departments that offer degree programs in Engineering?",
        "gold_parse": "",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of courses that have 'History' in their description?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%History%';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and number of courses that have 'Programming' in their description?",
        "gold_parse": "",
        "query": "SELECT course_name, COUNT(*) FROM Courses WHERE course_description LIKE '%Programming%' GROUP BY course_name;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of courses that have 'Math' in their description?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%Math%';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of departments that offer courses with 'Science' in their description?",
        "gold_parse": "",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Courses WHERE course_description LIKE '%Science%');",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and number of courses that have 'Science' in their description?",
        "gold_parse": "",
        "query": "SELECT course_name, COUNT(*) FROM Courses WHERE course_description LIKE '%Science%' GROUP BY course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of courses that have 'Physics' in their description?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%Physics%';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of departments that offer courses with 'Biology' in their description?",
        "gold_parse": "",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Courses WHERE course_description LIKE '%Biology%');",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses does each department offer?",
        "gold_parse": "",
        "query": "SELECT department_name, COUNT(*) FROM Departments JOIN Courses ON Departments.department_id = Courses.department_id GROUP BY course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many degree programs does each department offer?",
        "gold_parse": "",
        "query": "SELECT department_name, COUNT(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY course_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the ID of every property that has a vendor requested price below the maximum?",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties WHERE vendor_requested_price < (SELECT Max(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the property name, room count, and property type code for all properties.",
        "gold_parse": "",
        "query": "SELECT T1.property_name, T1.room_count, T2.property_type_code FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many properties are there for each property type?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM Properties GROUP BY property_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many features does each feature type have?",
        "gold_parse": "",
        "query": "SELECT feature_type_code, COUNT(*) FROM Ref_Feature_Types GROUP BY feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the average room count for all features?",
        "gold_parse": "",
        "query": "SELECT Avg(room_count) FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the minimum and maximum vendor requested price across all features?",
        "gold_parse": "",
        "query": "SELECT Min(vendor_requested_price), Max(vendor_requested_price) FROM Other_Property_Features;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the average feature description for all available features?",
        "gold_parse": "",
        "query": "SELECT Avg(feature_description) FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show different feature types and the number of properties in each.",
        "gold_parse": "",
        "query": "SELECT feature_type_code, COUNT(*) FROM Other_Available_Features GROUP BY property_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the IDs of properties that do not have any features?",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties EXCEPT SELECT feature_id FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the different room counts for properties?",
        "gold_parse": "",
        "query": "SELECT DISTINCT room_count FROM Properties;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List the names of properties that have a feature description containing 'pool'.",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE feature_description LIKE '%pool%';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many different property names are there?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT property_name) FROM Properties;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List the names of properties and their room counts.",
        "gold_parse": "",
        "query": "SELECT property_name, room_count FROM Properties;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the names of features and the names of their properties.",
        "gold_parse": "",
        "query": "SELECT T1.feature_name, T2.property_name FROM Other_Available_Features AS T1 JOIN Properties AS T2 ON T1.feature_id = T2.property_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the feature types and property types for all properties.",
        "gold_parse": "",
        "query": "SELECT T1.feature_type_code, T2.property_type_code FROM Ref_Feature_Types AS T1 JOIN Properties AS T2 ON T1.feature_type_code = T2.property_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the names of properties and the descriptions of their features.",
        "gold_parse": "",
        "query": "SELECT T1.property_name, T2.feature_description FROM Properties AS T1 JOIN Ref_Feature_Types AS T2 ON T1.property_type_code = T2.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the property types and the number of properties in each, ordered by the number of properties in ascending order.",
        "gold_parse": "",
        "query": "SELECT property_type_code, COUNT(*) FROM Ref_Property_Types GROUP BY property_type_code ORDER BY COUNT(*) ASC;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the IDs of properties that have a vendor requested price greater than 1,000,000.",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties WHERE vendor_requested_price > 1000000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many distinct properties are there?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT property_id) FROM Properties;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have apartment features?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Feature_Types WHERE feature_type_name = 'Apartment');",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have the feature with ID 5?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_id IN (SELECT property_id FROM Other_Property_Features WHERE feature_id = 5);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List the property types and the number of properties in each, ordered by the number of properties in ascending order.",
        "gold_parse": "",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_name ORDER BY COUNT(*) ASC;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List the names of properties and the number of properties with the same name.",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are apartments?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code = 'APT';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the name of the property that has a garage?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_id = (SELECT property_id FROM Other_Property_Features WHERE feature_name = 'Garage');",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names and vendor requested prices of properties that have a requested price below the average selling price?",
        "gold_parse": "",
        "query": "SELECT property_name, vendor_requested_price FROM Properties WHERE vendor_requested_price < (SELECT Avg(agreed_selling_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are offices?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code = 'OFF';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names and selling prices of properties that have a selling price below the average requested price?",
        "gold_parse": "",
        "query": "SELECT property_name, agreed_selling_price FROM Properties WHERE agreed_selling_price < (SELECT Avg(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many properties are there in each type?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have a vendor requested price less than 500,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have been sold?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE date_sold IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names and selling prices of properties that have a selling price above the average requested price?",
        "gold_parse": "",
        "query": "SELECT property_name, agreed_selling_price FROM Properties WHERE agreed_selling_price > (SELECT Avg(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties and the number of properties with the same name?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have a vendor requested price less than 750,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 750000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names and selling prices of properties that have the highest selling price?",
        "gold_parse": "",
        "query": "SELECT property_name, agreed_selling_price FROM Properties WHERE agreed_selling_price > (SELECT Max(agreed_selling_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have house features?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Feature_Types WHERE feature_type_name = 'House');",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have a vendor requested price less than 100,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 100000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have fewer rooms than the average feature room count?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE room_count < (SELECT Avg(room_count) FROM Other_Available_Features);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have 'Office' in their type description?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description LIKE '%Office%');",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties and the number of properties with the same room count?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY room_count;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have a vendor requested price below the average feature requested price?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < (SELECT Avg(vendor_requested_price) FROM Other_Property_Features);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names and number of commercial properties?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(*) FROM Properties WHERE property_type_code = 'COM' GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that were on the market before 2020?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE date_on_market < '2020-01-01';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names and number of houses?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(*) FROM Properties WHERE property_type_code = 'HSE' GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the name of the property that has house features?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code = (SELECT property_type_code FROM Ref_Feature_Types WHERE feature_type_name = 'House');",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the name of the property that has the highest vendor requested price?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Other_Property_Features);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers in grades below the maximum?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names and grades of highschoolers.",
        "gold_parse": "",
        "query": "SELECT T1.name, T1.grade, T2.grade FROM Highschooler AS T1 JOIN Highschooler AS T2 ON T1.ID = T2.ID;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "How many highschoolers are there in total?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM Highschooler GROUP BY grade;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What is the average name of highschoolers?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What is the minimum grade, average grade, and maximum name of highschoolers?",
        "gold_parse": "",
        "query": "SELECT MIN(grade), AVG(grade), MAX(name) FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "How many distinct grades are there in the Likes table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT grade) FROM Likes;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "How many highschoolers are there for each student ID?",
        "gold_parse": "",
        "query": "SELECT student_id, COUNT(*) FROM Highschooler GROUP BY student_id;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Find the IDs of highschoolers who do not have any friends?",
        "gold_parse": "",
        "query": "SELECT ID FROM Highschooler EXCEPT SELECT friend_id FROM Friend;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the different names of highschoolers?",
        "gold_parse": "",
        "query": "SELECT DISTINCT name FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "List the grades of highschoolers whose names start with 'A'.",
        "gold_parse": "",
        "query": "SELECT grade FROM Highschooler WHERE name LIKE 'A%';",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "How many different names are there among friends?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT name) FROM Friend;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers and the grades of those who like them.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers and the grades of their friends.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers and the names of those who like them in grade 12.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.grade = 12;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers who are in grade 9.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Highschooler AS T2 ON T1.grade = T2.grade WHERE T1.grade = 9;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers in grades above 10 and the names of those who like them.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade > 10;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "How many different grades are there among friends?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT grade) FROM Friend;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who have the maximum grade?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID = (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who have the minimum name?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MIN(name) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers and the grades of those who are their friends.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are liked by others in grades above 10?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE grade > 10);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who like the student with ID 2?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes WHERE liked_id = 2);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names and grades of highschoolers who are friends with the student with ID 3?",
        "gold_parse": "",
        "query": "SELECT name, grade FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = 3);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers who are friends with the student in grade 4.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.grade = 4;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers and the grades of those who like the student in grade 5.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id WHERE T2.grade = 5;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are in the same grade as John?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT name FROM Highschooler WHERE name = 'John');",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who have the same grade as Alice?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT grade FROM Highschooler WHERE name = 'Alice');",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are liked by others in the same grade as Bob?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE grade = (SELECT grade FROM Highschooler WHERE name = 'Bob'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are friends with Charlie?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT name FROM Highschooler WHERE name = 'Charlie'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who have the minimum grade?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MIN(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who have the maximum name?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MAX(name) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are in the same grade as Eve?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Eve');",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are friends with David?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT name FROM Highschooler WHERE name = 'David');",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers who like the student in grade 6.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id WHERE T1.grade = 6;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are liked by Frank?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT grade FROM Highschooler WHERE name = 'Frank'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are in grades above the maximum?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade > (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are in grades below the minimum?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT MIN(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are friends with Grace?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT grade FROM Highschooler WHERE name = 'Grace'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who like Hank?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes WHERE liked_id = (SELECT grade FROM Highschooler WHERE name = 'Hank'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are in the same grade as Ivy?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Likes WHERE liked_id = (SELECT name FROM Highschooler WHERE name = 'Ivy'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are liked by Jack?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT grade FROM Highschooler WHERE name = 'Jack'));",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who are younger than the oldest singer?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Age < (SELECT MAX(Age) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names and ages of singers.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T1.Age, T2.Age FROM singer AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "How many singers are there in total?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM singer GROUP BY Age;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(*) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average name of singers?",
        "gold_parse": "",
        "query": "SELECT AVG(Name) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What is the minimum age, average age, and maximum name of singers?",
        "gold_parse": "",
        "query": "SELECT MIN(Age), AVG(Age), MAX(Name) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "How many distinct ages are there in the concert table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Age) FROM concert;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "How many singers are there for each concert ID?",
        "gold_parse": "",
        "query": "SELECT concert_ID, COUNT(*) FROM singer GROUP BY concert_ID;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Find the IDs of stadiums that have not hosted any concerts?",
        "gold_parse": "",
        "query": "SELECT Stadium_ID FROM concert EXCEPT SELECT concert_ID FROM singer_in_concert;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the different concert names of stadiums?",
        "gold_parse": "",
        "query": "SELECT DISTINCT concert_Name FROM stadium;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "List the ages of singers whose names start with 'A'.",
        "gold_parse": "",
        "query": "SELECT Age FROM singer WHERE Name LIKE 'A%';",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "How many different names are there among concerts?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Name) FROM concert;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers and the ages of those who participated in concerts.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers and the ages of their concerts.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN concert AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers and the ages of those who participated in concerts at age 30.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Age = 30;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers who are 25 years old.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN singer AS T2 ON T1.Age = T2.Age WHERE T1.Age = 25;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers and the ages of those who participated in concerts at age above 30.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Age > 30;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "How many different names are there among stadiums?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Name) FROM stadium;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who have the maximum age in stadiums?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM stadium);",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who have the minimum name?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Name) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers and the ages of those who participated in concerts.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN concert AS T2 ON T1.Singer_ID = T2.concert_ID;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who participated in concerts where the age is above 30?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE concert_ID IN (SELECT concert_ID FROM concert WHERE Age > 30);",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who are the same age as the oldest singer?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who are the same age as the youngest singer?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Name) FROM stadium);",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers who participated in concerts at age 40.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN concert AS T2 ON T1.Singer_ID = T2.concert_ID WHERE T2.Age = 40;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who participated in concerts where the age is above 40?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE concert_ID IN (SELECT concert_ID FROM concert WHERE Age > 40);",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who are younger than the youngest stadium?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Age < (SELECT MIN(Age) FROM stadium);",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who are the same age as the oldest singer?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Name) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers who participated in concerts at age above 20.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN concert AS T2 ON T1.Singer_ID = T2.concert_ID WHERE T2.Age > 20;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "How many different names are there among singers?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Name) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers who participated in concerts at age 30.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN concert AS T2 ON T1.Singer_ID = T2.concert_ID WHERE T2.Age = 30;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers who participated in concerts at age 40.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Age = 40;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers who are 20 years old.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age = 20;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers who participated in concerts at age above 20.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Age > 20;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of courses with enrollment less than the highest enrolled course?",
        "gold_parse": "",
        "query": "SELECT name FROM course WHERE num_enrolled < (SELECT MAX(num_enrolled) FROM course);",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "Show the names and enrollments of courses.",
        "gold_parse": "",
        "query": "SELECT T1.name, T1.num_enrolled, T2.num_enrolled FROM course AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many courses are there in total?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM course GROUP BY num_enrolled;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "Show the names of courses and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM course;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What is the average name of courses?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM course;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What is the minimum enrollment, average enrollment, and maximum name of courses?",
        "gold_parse": "",
        "query": "SELECT MIN(num_enrolled), AVG(num_enrolled), MAX(name) FROM course;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many distinct enrollments are there in the instructor table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT num_enrolled) FROM instructor;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many students are there for each course?",
        "gold_parse": "",
        "query": "SELECT course_id, COUNT(*) FROM student GROUP BY course_id;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "Find the IDs of semesters that do not have any courses?",
        "gold_parse": "",
        "query": "SELECT semester_id FROM semester EXCEPT SELECT course_id FROM course_prerequisite;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the different course IDs in the semester table?",
        "gold_parse": "",
        "query": "SELECT DISTINCT course_id FROM semester;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "List the enrollments of courses that start with 'Data'.",
        "gold_parse": "",
        "query": "SELECT num_enrolled FROM course WHERE name LIKE 'Data%';",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many different names are there among instructors?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT name) FROM instructor;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "Show the names of courses and the enrollments of their offerings.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.num_enrolled FROM course AS T1 JOIN course_offering AS T2 ON T1.course_id = T2.course_id;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of courses with 3 reviews?",
        "gold_parse": "",
        "query": "SELECT name FROM course WHERE num_reviews = '3';",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many distinct semester names are there?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT name) FROM semester;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of students with more than 100 credits?",
        "gold_parse": "",
        "query": "SELECT name FROM student WHERE total_credit > 100;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many students have more than 100 credits?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM student WHERE total_credit > 100;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the different course IDs in the student record table?",
        "gold_parse": "",
        "query": "SELECT DISTINCT course_id FROM student_record;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many students are in programs with ID greater than 1?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM student WHERE program_id > 1;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of students with the highest GPA?",
        "gold_parse": "",
        "query": "SELECT name FROM student WHERE total_gpa = (SELECT MAX(total_gpa) FROM student);",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of courses with the lowest number of credits?",
        "gold_parse": "",
        "query": "SELECT name FROM course WHERE credits = (SELECT MIN(credits) FROM course);",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many courses have more than 200 students enrolled?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM course WHERE num_enrolled > 200;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of courses with less than 5 reviews?",
        "gold_parse": "",
        "query": "SELECT name FROM course WHERE num_reviews < 5;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many different departments are there among students?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT department) FROM student;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of students with a GPA above 3.5?",
        "gold_parse": "",
        "query": "SELECT name FROM student WHERE total_gpa > 3.5;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of courses with the lowest clarity score?",
        "gold_parse": "",
        "query": "SELECT name FROM course WHERE clarity_score = (SELECT MIN(clarity_score) FROM course);",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many instructors have a score greater than 4?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM instructor WHERE score > 4;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of students with credits above the average?",
        "gold_parse": "",
        "query": "SELECT name FROM student WHERE total_credit > (SELECT AVG(total_credit) FROM student);",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many distinct courses are there among students?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT course_id) FROM student;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many courses have an easiness score greater than 3?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM course WHERE easiness_score > 3;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the different names of course offerings?",
        "gold_parse": "",
        "query": "SELECT DISTINCT name FROM course_offering;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many students have a GPA below 2.0?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM student WHERE total_gpa < 2.0;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of courses with the highest enrollment among students?",
        "gold_parse": "",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM student);",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many courses have more than 10 reviews?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM course WHERE num_reviews > 10;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the different departments among students?",
        "gold_parse": "",
        "query": "SELECT DISTINCT department FROM student;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of students with the lowest GPA?",
        "gold_parse": "",
        "query": "SELECT name FROM student WHERE total_gpa = (SELECT MIN(total_gpa) FROM student);",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many instructors have a score above the average score of comments?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM instructor WHERE score > (SELECT AVG(score) FROM comment_instructor);",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of students with credits above the minimum?",
        "gold_parse": "",
        "query": "SELECT name FROM student WHERE total_credit > (SELECT MIN(total_credit) FROM student);",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many distinct courses are there in the student records?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT course_id) FROM student_record;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many courses have a helpfulness score greater than 4?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM course WHERE helpfulness_score > 4;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the different course IDs in the student records?",
        "gold_parse": "",
        "query": "SELECT DISTINCT course_id FROM student_record;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What are the names of students with a GPA above 3.0?",
        "gold_parse": "",
        "query": "SELECT name FROM student WHERE total_gpa > 3.0;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many courses have less than 5 reviews?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM course WHERE num_reviews < 5;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many students have a GPA below 2.5?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM student WHERE total_gpa < 2.5;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many instructors have a score above the minimum score of comments?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM instructor WHERE score > (SELECT MIN(score) FROM comment_instructor);",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many courses have an enrollment above the minimum?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM course WHERE num_enrolled > (SELECT MIN(num_enrolled) FROM course);",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of poker players who are shorter than the tallest player?",
        "gold_parse": "",
        "query": "SELECT Name FROM people WHERE Height < (SELECT MAX(Height) FROM people);",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names and heights of poker players.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T1.Height, T2.Height FROM people AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "How many poker players are there in total?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM people GROUP BY Height;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of poker players and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(*) FROM people;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What is the average name of poker players?",
        "gold_parse": "",
        "query": "SELECT AVG(Name) FROM people;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What is the minimum height, average height, and maximum name of poker players?",
        "gold_parse": "",
        "query": "SELECT MIN(Height), AVG(Height), MAX(Name) FROM people;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "How many distinct heights are there in the poker player table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Height) FROM poker_player;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "How many records are there for each person?",
        "gold_parse": "",
        "query": "SELECT People_ID, COUNT(*) FROM people GROUP BY People_ID;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Find the nationalities of people that do not have a corresponding record in the poker player table?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM people EXCEPT SELECT People_ID FROM poker_player;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What are the different poker player IDs of people?",
        "gold_parse": "",
        "query": "SELECT DISTINCT Poker_Player_ID FROM people;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "List the heights of poker players whose names start with 'J'.",
        "gold_parse": "",
        "query": "SELECT Height FROM people WHERE Name LIKE 'J%';",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "How many different nationalities are there among poker players?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Nationality) FROM poker_player;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of poker players and their heights.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of people and their heights.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Height FROM people AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of poker players and their heights for those who are 180 cm tall.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = 180;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of people who are 170 cm tall.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Height FROM people AS T1 JOIN people AS T2 ON T1.Height = T2.Height WHERE T1.Height = 170;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of poker players and their heights for those taller than 180 cm.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 180;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "How many different names are there among poker players?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Name) FROM poker_player;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who have the maximum height in poker players?",
        "gold_parse": "",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM poker_player);",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who have the minimum name?",
        "gold_parse": "",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Name) FROM people);",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of poker players who are taller than 180 cm?",
        "gold_parse": "",
        "query": "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Height > 180);",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "How many different heights are there among people?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Height) FROM people;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of poker players and their heights for those who are 185 cm tall.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = 185;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of people who are 165 cm tall.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Height FROM people AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height = 165;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of poker players and their heights for those taller than 175 cm.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 175;",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who have the maximum height?",
        "gold_parse": "",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of people who are 170 cm tall.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Height FROM people AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height = 170;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airlines with abbreviations less than the maximum abbreviation?",
        "gold_parse": "",
        "query": "SELECT Airline FROM airlines WHERE Abbreviation < (SELECT MAX(Abbreviation) FROM airlines);",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Show the names and abbreviations of airlines.",
        "gold_parse": "",
        "query": "SELECT T1.Airline, T1.Abbreviation, T2.Abbreviation FROM airlines AS T1 JOIN airlines AS T2 ON T1.uid = T2.uid;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many airlines are there in total?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM airlines GROUP BY Abbreviation;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Show the names of airlines and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT Airline, COUNT(*) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the average name of airlines?",
        "gold_parse": "",
        "query": "SELECT AVG(Airline) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the minimum abbreviation, average abbreviation, and maximum airline name?",
        "gold_parse": "",
        "query": "SELECT MIN(Abbreviation), AVG(Abbreviation), MAX(Airline) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many distinct abbreviations are there in the flights table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Abbreviation) FROM flights;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many records are there for each airline?",
        "gold_parse": "",
        "query": "SELECT uid, COUNT(*) FROM airlines GROUP BY uid;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Find the countries of airlines that do not have a corresponding record in the flights table?",
        "gold_parse": "",
        "query": "SELECT Country FROM airlines EXCEPT SELECT Airline FROM flights;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are the different flight numbers?",
        "gold_parse": "",
        "query": "SELECT DISTINCT FlightNo FROM flights;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "List the abbreviations of airlines that start with 'A'.",
        "gold_parse": "",
        "query": "SELECT Abbreviation FROM airlines WHERE Airline LIKE 'A%';",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many different countries are there among flights?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Country) FROM flights;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Show the names of airlines and their abbreviations.",
        "gold_parse": "",
        "query": "SELECT T1.Airline, T2.Abbreviation FROM airlines AS T1 JOIN airlines AS T2 ON T1.uid = T2.uid;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Show the names of airlines and their abbreviations for those with abbreviation 'AA'.",
        "gold_parse": "",
        "query": "SELECT T1.Airline, T2.Abbreviation FROM airlines AS T1 JOIN airlines AS T2 ON T1.uid = T2.uid WHERE T2.Abbreviation = 'AA';",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Show the names of airlines and their abbreviations for those with abbreviation greater than 'DL'.",
        "gold_parse": "",
        "query": "SELECT T1.Airline, T2.Abbreviation FROM airlines AS T1 JOIN airlines AS T2 ON T1.uid = T2.uid WHERE T2.Abbreviation > 'DL';",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many different airlines are there among airports?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Airline) FROM airports;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airlines with the highest name in flights?",
        "gold_parse": "",
        "query": "SELECT Airline FROM airlines WHERE Airline = (SELECT MAX(Airline) FROM flights);",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airlines with the minimum country?",
        "gold_parse": "",
        "query": "SELECT Airline FROM airlines WHERE Airline = (SELECT MIN(Country) FROM airlines);",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airlines with uid greater than 100?",
        "gold_parse": "",
        "query": "SELECT Airline FROM airlines WHERE uid IN (SELECT uid FROM flights WHERE Airline > 100);",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many different abbreviations are there among airlines?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Abbreviation) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airlines with the highest name?",
        "gold_parse": "",
        "query": "SELECT Airline FROM airlines WHERE Airline = (SELECT MAX(Airline) FROM airlines);",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Show the names of airlines and their abbreviations for those with abbreviation 'UA'.",
        "gold_parse": "",
        "query": "SELECT T1.Airline, T2.Abbreviation FROM airlines AS T1 JOIN airlines AS T2 ON T1.uid = T2.uid WHERE T2.Abbreviation = 'UA';",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Show the names of airlines and their abbreviations for those with abbreviation greater than 'AA'.",
        "gold_parse": "",
        "query": "SELECT T1.Airline, T2.Abbreviation FROM airlines AS T1 JOIN airlines AS T2 ON T1.uid = T2.uid WHERE T2.Abbreviation > 'AA';",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airlines with uid 1?",
        "gold_parse": "",
        "query": "SELECT Airline FROM airlines WHERE Airline IN (SELECT Airline FROM airlines WHERE uid = 1);",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Show the names of airlines and their abbreviations for those with abbreviation 'DL'.",
        "gold_parse": "",
        "query": "SELECT T1.Airline, T2.Abbreviation FROM airlines AS T1 JOIN airlines AS T2 ON T1.uid = T2.uid WHERE T2.Abbreviation = 'DL';",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airlines with uid 2?",
        "gold_parse": "",
        "query": "SELECT Airline FROM airlines WHERE Airline IN (SELECT Airline FROM airlines WHERE uid = 2);",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the names of authors with organization IDs less than the maximum organization ID?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE oid < (SELECT MAX(oid) FROM author);",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Show the names and organization IDs of authors.",
        "gold_parse": "",
        "query": "SELECT T1.name, T1.oid, T2.oid FROM author AS T1 JOIN author AS T2 ON T1.aid = T2.aid;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "How many authors are there in total?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM author GROUP BY oid;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Show the names of authors and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM author;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What is the average name of authors?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM author;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What is the minimum organization ID, average organization ID, and maximum author name?",
        "gold_parse": "",
        "query": "SELECT MIN(oid), AVG(oid), MAX(name) FROM author;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "How many distinct organization IDs are there in the writes table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT oid) FROM writes;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "How many records are there for each author?",
        "gold_parse": "",
        "query": "SELECT aid, COUNT(*) FROM author GROUP BY aid;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Find the names of authors who do not have a corresponding record in the writes table?",
        "gold_parse": "",
        "query": "SELECT name FROM author EXCEPT SELECT aid FROM writes;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the different organization IDs of authors?",
        "gold_parse": "",
        "query": "SELECT DISTINCT oid FROM author;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "List the organization IDs of authors that start with 'J'.",
        "gold_parse": "",
        "query": "SELECT oid FROM author WHERE name LIKE 'J%';",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "How many different author names are there in the writes table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT name) FROM writes;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Show the names of authors and their organization IDs.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.oid FROM author AS T1 JOIN author AS T2 ON T1.aid = T2.aid;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Show the names of authors and their organization IDs for those with organization ID 1.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.oid FROM author AS T1 JOIN author AS T2 ON T1.aid = T2.aid WHERE T2.oid = 1;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Show the names of authors and their organization IDs for those with organization IDs greater than 5.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.oid FROM author AS T1 JOIN author AS T2 ON T1.aid = T2.aid WHERE T2.oid > 5;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "How many different author names are there among publications?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT name) FROM publication;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the names of authors with the highest author ID in writes?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE aid = (SELECT MAX(aid) FROM writes);",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the names of authors with the minimum organization ID?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE aid = (SELECT MIN(oid) FROM author);",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the names of continents with country names less than the maximum country name?",
        "gold_parse": "",
        "query": "SELECT Continent FROM countries WHERE CountryName < (SELECT MAX(CountryName) FROM countries);",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Show the country names and their continents.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T1.Continent, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many countries are there in total?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM countries GROUP BY Continent;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Show the country names and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT CountryName, COUNT(*) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the average name of countries?",
        "gold_parse": "",
        "query": "SELECT AVG(CountryName) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the minimum continent ID, average continent ID, and maximum country name?",
        "gold_parse": "",
        "query": "SELECT MIN(Continent), AVG(Continent), MAX(CountryName) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many distinct continents are there in the car makers table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Continent) FROM car_makers;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many records are there for each country in car makers?",
        "gold_parse": "",
        "query": "SELECT Country, COUNT(*) FROM car_makers GROUP BY Country;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Find the continents that do not have a corresponding record in the continents table?",
        "gold_parse": "",
        "query": "SELECT Continent FROM countries EXCEPT SELECT Continent FROM continents;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the different car models?",
        "gold_parse": "",
        "query": "SELECT DISTINCT Model FROM car_makers;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "List the continent IDs of countries that start with 'T'.",
        "gold_parse": "",
        "query": "SELECT Continent FROM countries WHERE CountryName LIKE 'T%';",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many different country names are there in car makers?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT CountryName) FROM car_makers;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Show the country names and their continent IDs.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Show the country names and their continent IDs for those in Europe.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent = 'Europe';",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Show the country names and their continent IDs for those with continent IDs greater than 2.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many different country names are there in car data?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT CountryName) FROM cars_data;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the country names with the highest country name in car data?",
        "gold_parse": "",
        "query": "SELECT CountryName FROM countries WHERE CountryName = (SELECT MAX(CountryName) FROM cars_data);",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the country names with the minimum continent?",
        "gold_parse": "",
        "query": "SELECT CountryName FROM countries WHERE CountryName = (SELECT MIN(Continent) FROM countries);",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the country names with continent ID 1?",
        "gold_parse": "",
        "query": "SELECT CountryName FROM countries WHERE CountryName IN (SELECT CountryName FROM countries WHERE Continent = 1);",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many different continents are there in car makers?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Continent) FROM car_makers;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the country names with the highest country name in car makers?",
        "gold_parse": "",
        "query": "SELECT CountryName FROM countries WHERE CountryName = (SELECT MAX(CountryName) FROM car_makers);",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the country names with continent ID 2?",
        "gold_parse": "",
        "query": "SELECT CountryName FROM countries WHERE CountryName IN (SELECT CountryName FROM countries WHERE Continent = 2);",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the country names with continent ID 3?",
        "gold_parse": "",
        "query": "SELECT CountryName FROM countries WHERE CountryName IN (SELECT CountryName FROM countries WHERE Continent = 3);",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the country names with continent ID 4?",
        "gold_parse": "",
        "query": "SELECT CountryName FROM countries WHERE CountryName IN (SELECT CountryName FROM countries WHERE Continent = 4);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the ages of conductors with nationalities less than the maximum nationality?",
        "gold_parse": "",
        "query": "SELECT Age FROM conductor WHERE Nationality < (SELECT MAX(Nationality) FROM conductor);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Show the names and nationalities of conductors.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T1.Nationality, T2.Nationality FROM conductor AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "How many conductors are there in total?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM conductor GROUP BY Nationality;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Show the names of conductors and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(*) FROM conductor;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What is the average name of conductors?",
        "gold_parse": "",
        "query": "SELECT AVG(Name) FROM conductor;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What is the minimum nationality, average nationality, and maximum conductor name?",
        "gold_parse": "",
        "query": "SELECT MIN(Nationality), AVG(Nationality), MAX(Name) FROM conductor;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "How many distinct nationalities are there in the orchestra table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Nationality) FROM orchestra;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "How many records are there for each conductor nationality?",
        "gold_parse": "",
        "query": "SELECT Nationality, COUNT(*) FROM conductor GROUP BY Conductor_ID;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Find the nationalities that do not have a corresponding record in the orchestra table?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor EXCEPT SELECT Nationality FROM orchestra;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the different conductor names in the orchestra table?",
        "gold_parse": "",
        "query": "SELECT DISTINCT Name FROM orchestra;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "List the nationalities of conductors that start with 'M'.",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Name LIKE 'M%';",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "How many different conductor names are there in the orchestra table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Name) FROM orchestra;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Show the names of conductors and their nationalities.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Nationality FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Show the names of conductors and their nationalities for those who are Italian.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Nationality FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Nationality = 'Italian';",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Show the names of conductors and their nationalities for those with nationality IDs greater than 3.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Nationality FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Nationality > 3;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "How many different conductor names are there in performances?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Name) FROM performance;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors with the highest name in performances?",
        "gold_parse": "",
        "query": "SELECT Name FROM conductor WHERE Name = (SELECT MAX(Name) FROM performance);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors with the minimum nationality?",
        "gold_parse": "",
        "query": "SELECT Name FROM conductor WHERE Name = (SELECT MIN(Nationality) FROM conductor);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the nationalities of conductors who are 40 years old?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Nationality IN (SELECT Nationality FROM conductor WHERE Age = 40);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "How many different nationalities are there in performances?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Nationality) FROM performance;",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors with the highest name?",
        "gold_parse": "",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Name) FROM conductor);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors with the minimum nationality?",
        "gold_parse": "",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Nationality) FROM conductor);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the nationalities of conductors who are 50 years old?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Nationality IN (SELECT Nationality FROM conductor WHERE Age = 50);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the nationalities of conductors who are 60 years old?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Nationality IN (SELECT Nationality FROM conductor WHERE Age = 60);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the nationalities of conductors who are 70 years old?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Nationality IN (SELECT Nationality FROM conductor WHERE Age = 70);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the nationalities of conductors who are 80 years old?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Nationality IN (SELECT Nationality FROM conductor WHERE Age = 80);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the nationalities of conductors who are 90 years old?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Nationality IN (SELECT Nationality FROM conductor WHERE Age = 90);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the nationalities of conductors who are 100 years old?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Nationality IN (SELECT Nationality FROM conductor WHERE Age = 100);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the ratings of businesses with cities less than the maximum city?",
        "gold_parse": "",
        "query": "SELECT rating FROM business WHERE city < (SELECT MAX(city) FROM business);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Show the names and cities of businesses.",
        "gold_parse": "",
        "query": "SELECT T1.name, T1.city, T2.city FROM business AS T1 JOIN business AS T2 ON T1.bid = T2.bid;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many businesses are there in total?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM business GROUP BY city;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Show the names of businesses and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM business;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What is the average name of businesses?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM business;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What is the minimum city, average city, and maximum business name?",
        "gold_parse": "",
        "query": "SELECT MIN(city), AVG(city), MAX(name) FROM business;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many distinct cities are there in the category table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT city) FROM category;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many records are there for each business city?",
        "gold_parse": "",
        "query": "SELECT city, COUNT(*) FROM business GROUP BY business_id;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Find the cities that do not have a corresponding record in the category table?",
        "gold_parse": "",
        "query": "SELECT city FROM business EXCEPT SELECT city FROM category;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the different business names in the category table?",
        "gold_parse": "",
        "query": "SELECT DISTINCT name FROM category;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "List the cities of businesses that start with 'S'.",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE name LIKE 'S%';",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many different business names are there in the category table?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT name) FROM category;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Show the names of businesses and their cities.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.city FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Show the names of businesses and their cities for those in New York.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.city FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'New York';",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Show the names of businesses and their cities for those with city IDs greater than 3.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.city FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T2.city > 3;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many different business names are there in check-ins?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT name) FROM checkin;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the highest name in check-ins?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MAX(name) FROM checkin);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the minimum city?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MIN(city) FROM business);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the cities of businesses with a rating of 4.5?",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE city IN (SELECT city FROM business WHERE rating = 4.5);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many different cities are there in reviews?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT city) FROM review;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the highest name in reviews?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MAX(name) FROM review);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the minimum city in reviews?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MIN(city) FROM review);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Show the names of businesses and their cities.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.city FROM business AS T1 JOIN review AS T2 ON T1.business_id = T2.business_id;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the cities of businesses with a rating of 3?",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE city IN (SELECT city FROM review WHERE rating = 3);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many different business names are there in tips?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT name) FROM tip;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the highest name in tips?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MAX(name) FROM tip);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the minimum city in tips?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MIN(city) FROM tip);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Show the names of businesses and their cities.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.city FROM business AS T1 JOIN tip AS T2 ON T1.business_id = T2.business_id;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the cities of businesses with 10 likes in tips?",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE city IN (SELECT city FROM tip WHERE likes = 10);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many different cities are there in neighbourhoods?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT city) FROM neighbourhood;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the highest name in neighbourhoods?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MAX(name) FROM neighbourhood);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the minimum city in neighbourhoods?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MIN(city) FROM neighbourhood);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Show the names of businesses and their cities.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.city FROM business AS T1 JOIN neighbourhood AS T2 ON T1.business_id = T2.business_id;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the cities of businesses in the 'Downtown' neighbourhood?",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE city IN (SELECT city FROM neighbourhood WHERE neighbourhood_name = 'Downtown');",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many different business names are there in users?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT name) FROM user;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the highest name in users?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MAX(name) FROM user);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the minimum city in users?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MIN(city) FROM user);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Show the names of businesses and their cities.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.city FROM business AS T1 JOIN user AS T2 ON T1.business_id = T2.user_id;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the cities of businesses with the user name 'John Doe'?",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE city IN (SELECT city FROM user WHERE name = 'John Doe');",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many different user IDs are there in check-ins?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT user_id) FROM checkin;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the minimum city in check-ins?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MIN(city) FROM checkin);",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "Show the names of businesses and their cities.",
        "gold_parse": "",
        "query": "SELECT T1.name, T2.city FROM business AS T1 JOIN checkin AS T2 ON T1.business_id = T2.business_id;",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the cities of businesses with 20 check-ins?",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE city IN (SELECT city FROM checkin WHERE count = 20);",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What is the name and nationality of every actor born in New York City?",
        "gold_parse": "",
        "query": "SELECT name, nationality FROM actor WHERE birth_city = 'New York';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Show the title and release year of all movies directed by directors named 'Steven Spielberg'.",
        "gold_parse": "",
        "query": "SELECT M.title, M.release_year FROM movie AS M JOIN directed_by AS D ON M.mid = D.msid JOIN director AS DIR ON D.did = DIR.did WHERE DIR.gender = 'Steven Spielberg';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "List all genres and the number of movies in each genre.",
        "gold_parse": "",
        "query": "SELECT G.genre, COUNT(*) FROM genre AS G JOIN classification AS C ON G.gid = C.gid;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Find the names of all producers who have produced more than 5 movies.",
        "gold_parse": "",
        "query": "SELECT P.name FROM producer AS P JOIN made_by AS M ON P.pid = M.pid WHERE COUNT(M.msid) > 5;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the different countries where movie production companies are based?",
        "gold_parse": "",
        "query": "SELECT DISTINCT country FROM company;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the names and birth cities of American actors?",
        "gold_parse": "",
        "query": "SELECT name, birth_city FROM actor WHERE nationality = 'American' AND birth_year > 1980;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies were released after the year 2000?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE release_year < 2000;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the titles of comedy movies?",
        "gold_parse": "",
        "query": "SELECT M.title, G.genre FROM movie AS M JOIN genre AS G ON M.mid = G.gid WHERE G.genre = 'Comedy';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the titles and budgets of movies ordered by budget in descending order?",
        "gold_parse": "",
        "query": "SELECT title, budget FROM movie ORDER BY budget ASC;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies had a budget greater than 1 million dollars?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE budget < 1000000;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the names of all female actors?",
        "gold_parse": "",
        "query": "SELECT DISTINCT name FROM actor WHERE gender = 'Male';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which TV series have more than 3 seasons?",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons = 3;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the titles and release years of TV series with more than 50 episodes?",
        "gold_parse": "",
        "query": "SELECT title, release_year FROM tv_series WHERE num_of_episodes < 50;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the different nationalities of directors?",
        "gold_parse": "",
        "query": "SELECT DISTINCT nationality FROM actor;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies were released between 1990 and 2000?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE release_year BETWEEN 2000 AND 2010;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the names and birth cities of British actors?",
        "gold_parse": "",
        "query": "SELECT name, birth_city FROM actor WHERE nationality = 'British' AND birth_year < 1980;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies have an alternate title?",
        "gold_parse": "",
        "query": "SELECT title, release_year FROM movie WHERE title_aka IS NOT NULL AND budget > 50000000;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the different birth cities of actors?",
        "gold_parse": "",
        "query": "SELECT DISTINCT birth_year FROM actor;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the names of producers and the titles of the movies they produced?",
        "gold_parse": "",
        "query": "SELECT P.name, M.title FROM producer AS P JOIN movie AS M ON P.pid = M.mid;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies were released before 1980?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE release_year < 1990;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which directors were born before 1960?",
        "gold_parse": "",
        "query": "SELECT name FROM director WHERE birth_year > 1980;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which actors were born after 1990?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_year < 1980;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies had a budget greater than 50 million dollars and what were their release years?",
        "gold_parse": "",
        "query": "SELECT title, release_year FROM movie WHERE budget < 50000000;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which TV series have a recorded budget?",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE budget IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which actors do not have a recorded birth year?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_year IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies had a budget less than 1 million dollars?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE budget > 1000000;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the names of Canadian producers?",
        "gold_parse": "",
        "query": "SELECT name FROM producer WHERE nationality = 'American';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the different genres of movies?",
        "gold_parse": "",
        "query": "SELECT DISTINCT genre FROM movie;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies do not have a recorded budget?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE budget IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the titles and release years of movies ordered by release year in descending order?",
        "gold_parse": "",
        "query": "SELECT title, release_year FROM movie ORDER BY release_year ASC;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which directors were born in Los Angeles?",
        "gold_parse": "",
        "query": "SELECT name FROM director WHERE birth_city = 'Los Angeles' AND nationality = 'American';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which TV series were released in 2020?",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE release_year > 2020;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the names of male Indian actors?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE gender = 'Female' AND nationality = 'Indian';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies do not have an alternate title?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE title_aka IS NULL AND budget IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the different genders of directors?",
        "gold_parse": "",
        "query": "SELECT DISTINCT gender FROM actor;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the names of Australian actors?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE nationality = 'American';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies had a budget between 1 million and 5 million dollars?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE budget BETWEEN 500000 AND 1000000;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the names of French directors?",
        "gold_parse": "",
        "query": "SELECT name FROM director WHERE nationality = 'American';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which actors were born in London?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the titles and release years of TV series released after 2010?",
        "gold_parse": "",
        "query": "SELECT title, release_year FROM tv_series WHERE release_year > 2010;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the different nationalities of actors?",
        "gold_parse": "",
        "query": "SELECT DISTINCT gender FROM director;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which producers were born in Toronto?",
        "gold_parse": "",
        "query": "SELECT name FROM producer WHERE birth_city = 'New York';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies were released in 1999?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE release_year = 1980;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which TV series have less than 2 seasons?",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons > 2;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the titles and release years of movies released in 1985?",
        "gold_parse": "",
        "query": "SELECT title, release_year FROM movie WHERE release_year > 1985;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the names of Japanese directors?",
        "gold_parse": "",
        "query": "SELECT name FROM director WHERE nationality = 'American';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies were released after 2015?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE release_year < 2015;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Show papers from 2020.",
        "gold_parse": "",
        "query": "SELECT title FROM paper WHERE year = 'Two Thousand Twenty'",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Which datasets belong to paper number five?",
        "gold_parse": "",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.paperid WHERE paperdataset.datasetid = 5",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "List journals that have published papers after 2015.",
        "gold_parse": "",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.venueid WHERE paper.year > 2015",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Which authors wrote papers in 2020 and what are the papers?",
        "gold_parse": "",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.authorid JOIN author ON writes.paperid = author.authorid WHERE paper.year = 2020",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "List cities classified as large.",
        "gold_parse": "",
        "query": "SELECT Name FROM city WHERE Population = 'large'",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of European countries with many people?",
        "gold_parse": "",
        "query": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population > 'many'",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which languages are officially spoken?",
        "gold_parse": "",
        "query": "SELECT Language FROM countrylanguage WHERE IsOfficial = 'Yes'",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "List all countries and their official languages based on language code.",
        "gold_parse": "",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.Language WHERE cl.IsOfficial = 'T'",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of cities with a population over 500,000 and their respective districts?",
        "gold_parse": "",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.District WHERE ci.Population > 500000",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "List singers classified as having high net worth.",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions = 'high'",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What songs have many sales?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales = 'many'",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show all singers with any citizenship and their birth years.",
        "gold_parse": "",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'any'",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Which singers have top 10 hit songs?",
        "gold_parse": "",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Song_ID WHERE so.Highest_Position < 10",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "How many songs does one singer have?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 'one'",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who is the author of paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What papers were published in the year 2021?",
        "gold_parse": "",
        "query": "SELECT title FROM paper WHERE year = '2021 papers'",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What datasets are associated with paper 10?",
        "gold_parse": "",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.paperid WHERE paperdataset.datasetid = 10",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What journals published papers after the year 2015?",
        "gold_parse": "",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.venueid WHERE paper.year > 2015",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "gold_parse": "",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.authorid JOIN author ON writes.paperid = author.authorid WHERE paper.year = 2020",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List states with populations over 50,000.",
        "gold_parse": "",
        "query": "SELECT state_name FROM city WHERE population > 50000",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which lakes are considered large?",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area = 'large'",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the highest point in Texas?",
        "gold_parse": "",
        "query": "SELECT highest_elevation FROM highlow WHERE state_name = 'California'",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all long rivers in the USA.",
        "gold_parse": "",
        "query": "SELECT river_name FROM river WHERE country_name = 'USA' AND length > 'long'",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name mountains classified as high.",
        "gold_parse": "",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude = 'high'",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "List the names of battles and the ships that participated in them.",
        "gold_parse": "",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.tonnage",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What is the average name length of battles?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM battle",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "List the names of ships with tonnages greater than 10000.",
        "gold_parse": "",
        "query": "SELECT name FROM ship WHERE tonnage > '10000'",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "List notes on deaths caused by battles.",
        "gold_parse": "",
        "query": "SELECT D.note FROM death D JOIN ship S ON D.caused_by_ship_id = S.lost_in_battle",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "List battles fought on the date 'victory'.",
        "gold_parse": "",
        "query": "SELECT name FROM battle WHERE date = 'victory'",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "Count the large carriers.",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Carrier' AND tonnage = 'Large'",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which countries have more than a million residents?",
        "gold_parse": "",
        "query": "SELECT country_name FROM state WHERE population < 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all rivers shorter than 100 kilometers.",
        "gold_parse": "",
        "query": "SELECT state_name FROM river WHERE length > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many large lakes cover more than 100 square kilometers?",
        "gold_parse": "",
        "query": "SELECT COUNT(lake_name) FROM lake WHERE area < 50;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the total area covered by all states?",
        "gold_parse": "",
        "query": "SELECT AVG(area) FROM state;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which mountains are higher than 2000 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude < 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the least populated city?",
        "gold_parse": "",
        "query": "SELECT city_name FROM city ORDER BY population DESC;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which state has the most neighboring states?",
        "gold_parse": "",
        "query": "SELECT DISTINCT border FROM border_info;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many people live in the capital cities?",
        "gold_parse": "",
        "query": "SELECT SUM(population) FROM state;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List lakes that are smaller than the states they are located in.",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.area < lake.area;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the longest rivers in each state?",
        "gold_parse": "",
        "query": "SELECT river_name, MIN(length) FROM river GROUP BY river_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have the smallest population in their largest city?",
        "gold_parse": "",
        "query": "SELECT state_name, MAX(population) FROM city GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which countries have fewer than five lakes?",
        "gold_parse": "",
        "query": "SELECT country_name, COUNT(*) FROM lake GROUP BY country_name HAVING COUNT(*) > 5;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the highest points in each state?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which state capitals are in sparsely populated states?",
        "gold_parse": "",
        "query": "SELECT capital FROM state WHERE density > 250;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many rivers do not flow through Mississippi?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM river WHERE traverse = 'Mississippi';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all mountains that are not the tallest.",
        "gold_parse": "",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude = (SELECT MAX(mountain_altitude) FROM mountain);",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What countries have the smallest lakes?",
        "gold_parse": "",
        "query": "SELECT DISTINCT country_name FROM lake WHERE area >= 100;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have no borders?",
        "gold_parse": "",
        "query": "SELECT state_name, COUNT(border) FROM border_info GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the names of cities with below average population?",
        "gold_parse": "",
        "query": "SELECT city_name FROM city WHERE population > (SELECT AVG(population) FROM city);",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which lakes are in states with a population greater than one million?",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.population < 1000000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all rivers that are longer than the average river length.",
        "gold_parse": "",
        "query": "SELECT river_name FROM river WHERE length < (SELECT AVG(length) FROM river);",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have their highest elevation below 1000 meters?",
        "gold_parse": "",
        "query": "SELECT DISTINCT state_name FROM highlow WHERE highest_elevation > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List states that are smaller than 10,000 square kilometers.",
        "gold_parse": "",
        "query": "SELECT state_name FROM state WHERE area > 10000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the average population of cities with less than 100,000 inhabitants?",
        "gold_parse": "",
        "query": "SELECT AVG(population) FROM city WHERE population > 100000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which countries have a total population of less than 5 million?",
        "gold_parse": "",
        "query": "SELECT country_name FROM state GROUP BY country_name HAVING SUM(population) > 5000000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many states do not border California?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM border_info WHERE state_name = 'California';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which capitals are in the most densely populated states?",
        "gold_parse": "",
        "query": "SELECT DISTINCT capital FROM state WHERE density < 100;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name all lakes that are smaller than 500 square kilometers.",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the shortest river?",
        "gold_parse": "",
        "query": "SELECT river_name FROM river ORDER BY length DESC;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many mountains are taller than 2000 meters?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM mountain WHERE mountain_altitude < 2000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which state has the maximum population in its smallest city?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) FROM city GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all countries with lakes larger than 100 square kilometers.",
        "gold_parse": "",
        "query": "SELECT DISTINCT country_name FROM lake WHERE area < 100;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the total area of all lakes except the Great Lakes?",
        "gold_parse": "",
        "query": "SELECT SUM(area) FROM lake WHERE lake_name = 'Great Lakes';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the lowest point in Alaska?",
        "gold_parse": "",
        "query": "SELECT highest_point FROM highlow WHERE state_name = 'Alaska';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which is the largest city in Texas?",
        "gold_parse": "",
        "query": "SELECT city_name FROM city WHERE state_name = 'Texas' ORDER BY population ASC;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List the shortest length for each river.",
        "gold_parse": "",
        "query": "SELECT river_name, MAX(length) FROM river GROUP BY river_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states are not neighboring Nevada?",
        "gold_parse": "",
        "query": "SELECT state_name FROM border_info WHERE border = 'Nevada';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all lakes in states with populations less than one million.",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.population > 1000000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many rivers do not flow through the Mississippi?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM river WHERE traverse = 'Mississippi';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have lakes smaller than 100 square kilometers?",
        "gold_parse": "",
        "query": "SELECT DISTINCT state_name FROM lake WHERE area >= 100;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which mountains are lower than 1500 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude > 1500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many cities have a population exceeding 50,000?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM city WHERE population < 50000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the maximum density of states?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which capitals belong to states with a population under three million?",
        "gold_parse": "",
        "query": "SELECT capital FROM state WHERE population > 3000000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name the rivers that are shorter than 1000 kilometers.",
        "gold_parse": "",
        "query": "SELECT DISTINCT river_name FROM river WHERE length >= 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List cities in Florida with populations under 100,000.",
        "gold_parse": "",
        "query": "SELECT city_name FROM city WHERE state_name = 'Florida' AND population > 100000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many mountains are outside the USA?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM mountain WHERE country_name = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have a total city population exceeding half a million?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(population) FROM city GROUP BY state_name HAVING SUM(population) < 500000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which lakes are larger than 50 square kilometers?",
        "gold_parse": "",
        "query": "SELECT DISTINCT lake_name FROM lake WHERE area < 50;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states do not share a border with Oregon?",
        "gold_parse": "",
        "query": "SELECT state_name FROM border_info WHERE border = 'Oregon';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List states that have five or fewer lakes.",
        "gold_parse": "",
        "query": "SELECT state_name, COUNT(*) FROM lake GROUP BY state_name HAVING COUNT(*) > 5;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the smallest average lake area per state?",
        "gold_parse": "",
        "query": "SELECT state_name, AVG(area) FROM lake GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which capitals are in states larger than 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT capital FROM state WHERE area < 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have lakes all smaller than 250 square kilometers?",
        "gold_parse": "",
        "query": "SELECT DISTINCT state_name FROM lake WHERE area > 250;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the names of cities with populations less than 200,000?",
        "gold_parse": "",
        "query": "SELECT city_name FROM city WHERE population > 200000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many states do not share a border with Utah?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM border_info WHERE state_name = 'Utah';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the smallest average population by country in cities?",
        "gold_parse": "",
        "query": "SELECT country_name, AVG(population) FROM city GROUP BY country_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List lakes that have an area of at least 100 square kilometers.",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area < 100;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify the longest river length for each river.",
        "gold_parse": "",
        "query": "SELECT river_name, MIN(length) FROM river GROUP BY river_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which mountains have an altitude of no more than 2500 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude > 2500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many cities are there outside of Nevada?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM city WHERE state_name = 'Nevada';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name all states traversed by rivers shorter than 100 kilometers.",
        "gold_parse": "",
        "query": "SELECT DISTINCT state_name FROM river WHERE length > 100;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the smallest lake area in each state?",
        "gold_parse": "",
        "query": "SELECT state_name, MAX(area) FROM lake GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List countries that have fewer than 10 states.",
        "gold_parse": "",
        "query": "SELECT country_name, COUNT(*) FROM state GROUP BY country_name HAVING COUNT(*) > 10;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the largest cities with populations over 50,000?",
        "gold_parse": "",
        "query": "SELECT city_name FROM city WHERE population < 50000 ORDER BY population DESC;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have their highest elevation at less than 2000 meters?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation > 2000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the lowest population density in states with densities above 50?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE density > 50;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all lakes not located in Alaska.",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE state_name = 'Alaska';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many mountains are there outside of Canada?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM mountain WHERE country_name = 'CAN';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name rivers that are less than 500 kilometers long.",
        "gold_parse": "",
        "query": "SELECT DISTINCT river_name FROM river WHERE length >= 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which cities have a population of less than 100,000?",
        "gold_parse": "",
        "query": "SELECT city_name, population FROM city WHERE population > 100000 ORDER BY population;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List states with populations not exceeding five million.",
        "gold_parse": "",
        "query": "SELECT state_name FROM state WHERE population > 5000000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which countries have no lakes?",
        "gold_parse": "",
        "query": "SELECT DISTINCT country_name FROM lake;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many cities are located outside of Texas?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM city WHERE state_name = 'Texas';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the capitals of states smaller than 2000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT capital FROM state WHERE area > 2000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which mountains have an altitude exceeding 1000 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude < 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the maximum population average among cities?",
        "gold_parse": "",
        "query": "SELECT AVG(population) FROM city;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which countries have all states with populations over one million?",
        "gold_parse": "",
        "query": "SELECT DISTINCT country_name FROM state WHERE population < 1000000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all rivers longer than 500 kilometers in ascending order of their length.",
        "gold_parse": "",
        "query": "SELECT river_name FROM river WHERE length < 500 ORDER BY length ASC;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many states do not border California?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM border_info WHERE border = 'California';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have populations exceeding one million?",
        "gold_parse": "",
        "query": "SELECT state_name FROM state WHERE population < 1000000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name states that have lakes all smaller than 10 square kilometers.",
        "gold_parse": "",
        "query": "SELECT DISTINCT state_name FROM lake WHERE area > 10;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the states where the total lake area does not exceed 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List cities from states with populations of fewer than five million.",
        "gold_parse": "",
        "query": "SELECT city_name FROM city JOIN state ON city.state_name = state.state_name WHERE state.population > 5000000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which countries have the least number of states, listed in ascending order?",
        "gold_parse": "",
        "query": "SELECT country_name, COUNT(*) FROM state GROUP BY country_name ORDER BY COUNT(*) DESC;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have no borders with California?",
        "gold_parse": "",
        "query": "SELECT DISTINCT border FROM border_info WHERE state_name = 'California';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the minimum population of the most densely populated cities in sparsely populated states?",
        "gold_parse": "",
        "query": "SELECT MAX(population) FROM city WHERE state_name IN (SELECT state_name FROM state WHERE density < 50);",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List states where the highest point is not Mount Everest.",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE highest_point = 'Mount Everest';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify lakes that are all smaller than 50 square kilometers in area.",
        "gold_parse": "",
        "query": "SELECT lake_name, MIN(area) AS smallest_area FROM lake GROUP BY lake_name HAVING smallest_area > 50;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the average lengths of rivers in the USA that are longer than their actual measurements?",
        "gold_parse": "",
        "query": "SELECT river_name, AVG(length) FROM river WHERE country_name = 'USA' GROUP BY river_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "How many mountains are there in each country with altitudes less than 3000 meters?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM mountain WHERE mountain_altitude > 3000 GROUP BY country_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have the fewest cities with populations greater than 100,000?",
        "gold_parse": "",
        "query": "SELECT state_name, COUNT(city_name) AS num_cities FROM city WHERE population > 100000 GROUP BY state_name ORDER BY num_cities DESC;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List countries where the state population is always less than the population of its cities.",
        "gold_parse": "",
        "query": "SELECT DISTINCT country_name FROM state JOIN city ON state.state_name = city.state_name WHERE state.population > city.population;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the total area of lakes without 'Great' in their names by country?",
        "gold_parse": "",
        "query": "SELECT country_name, SUM(area) FROM lake WHERE lake_name LIKE '%Great%' GROUP BY country_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states, located outside the USA, have Sacramento as their capital?",
        "gold_parse": "",
        "query": "SELECT state_name FROM state WHERE capital = 'Sacramento' AND country_name = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List mountains in states where the population density is 100 or less per square kilometer.",
        "gold_parse": "",
        "query": "SELECT mountain_name, COUNT(*) FROM mountain JOIN state ON mountain.state_name = state.state_name WHERE state.density > 100 GROUP BY mountain_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the average population of cities outside Texas?",
        "gold_parse": "",
        "query": "SELECT city_name, AVG(population) FROM city WHERE state_name = 'Texas' GROUP BY city_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which countries have fewer than five lakes?",
        "gold_parse": "",
        "query": "SELECT country_name, COUNT(*) AS num_lakes FROM lake GROUP BY country_name HAVING num_lakes > 5;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name rivers shorter than 1000 kilometers, sorted by length in ascending order.",
        "gold_parse": "",
        "query": "SELECT river_name FROM river WHERE length > 1000 ORDER BY length DESC;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify states with no elevations exceeding 2000 meters.",
        "gold_parse": "",
        "query": "SELECT DISTINCT state_name FROM highlow JOIN state ON highlow.state_name = state.state_name WHERE highest_elevation > 2000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the lowest population density in states larger than 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List states that are bordered by two or fewer other states.",
        "gold_parse": "",
        "query": "SELECT state_name, COUNT(border) FROM border_info GROUP BY state_name HAVING COUNT(border) > 2;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which countries have the smallest lakes in terms of area?",
        "gold_parse": "",
        "query": "SELECT country_name, MAX(area) AS largest_lake FROM lake GROUP BY country_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the states with a total lake area of 10 square kilometers or less?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) AS total_area FROM lake WHERE area > 10 GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which cities have a minimum population of less than 50,000?",
        "gold_parse": "",
        "query": "SELECT city_name, MIN(population) FROM city GROUP BY city_name HAVING MIN(population) > 50000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List states that do not have cities with more than 100,000 inhabitants.",
        "gold_parse": "",
        "query": "SELECT DISTINCT state_name FROM city WHERE population > 100000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name mountains with peak altitudes above 3000 meters.",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have a population density higher than 100 per square kilometer?",
        "gold_parse": "",
        "query": "SELECT state_name FROM state WHERE density < 100;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List states where no city has a population of less than 200,000.",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) AS min_pop FROM city GROUP BY state_name HAVING min_pop > 200000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which rivers are longer than 200 kilometers?",
        "gold_parse": "",
        "query": "SELECT river_name FROM river WHERE length < 200 ORDER BY length;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify states through which rivers shorter than 300 kilometers flow.",
        "gold_parse": "",
        "query": "SELECT DISTINCT state_name FROM river WHERE length > 300;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What countries have lakes smaller than 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT country_name FROM lake WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are enrolled in each course name?",
        "gold_parse": "",
        "query": "SELECT course_name, COUNT(student_id) FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average transcript date for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, AVG(transcript_date) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id JOIN Transcripts ON Student_Enrolment.student_id = Transcripts.transcript_id GROUP BY department_name;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List students whose first and last names are different.",
        "gold_parse": "",
        "query": "SELECT first_name, last_name FROM Students WHERE first_name = last_name;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum course name for each semester?",
        "gold_parse": "",
        "query": "SELECT semester_name, MIN(course_name) FROM Semesters JOIN Sections ON Semesters.semester_id = Sections.course_id GROUP BY semester_name;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Count how many departments each student's email is associated with.",
        "gold_parse": "",
        "query": "SELECT email_address, COUNT(department_id) FROM Students JOIN Degree_Programs ON Students.student_id = Degree_Programs.department_id GROUP BY email_address;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List course descriptions for each student ID.",
        "gold_parse": "",
        "query": "SELECT student_id, course_description FROM Student_Enrolment JOIN Courses ON Student_Enrolment.student_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the total postal code sum for each student?",
        "gold_parse": "",
        "query": "SELECT student_id, SUM(zip_postcode) FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id GROUP BY student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum cell phone number for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(cell_mobile_number) FROM Semesters JOIN Students ON Semesters.semester_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Describe each course's corresponding department.",
        "gold_parse": "",
        "query": "SELECT course_name, department_description FROM Courses JOIN Departments ON Courses.course_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List all students who do not live in the USA.",
        "gold_parse": "",
        "query": "SELECT student_id, country FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum course ID for each student?",
        "gold_parse": "",
        "query": "SELECT student_id, MAX(course_id) FROM Students JOIN Student_Enrolment_Courses ON Students.student_id = Student_Enrolment_Courses.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of department IDs for each course?",
        "gold_parse": "",
        "query": "SELECT course_name, SUM(department_id) FROM Courses GROUP BY course_name;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average student ID for each transcript date?",
        "gold_parse": "",
        "query": "SELECT transcript_date, AVG(student_id) FROM Transcripts GROUP BY transcript_date;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum course ID for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, MIN(course_id) FROM Departments JOIN Courses ON Departments.department_id = Courses.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are in each section?",
        "gold_parse": "",
        "query": "SELECT section_name, COUNT(student_id) FROM Sections JOIN Student_Enrolment_Courses ON Sections.course_id = Student_Enrolment_Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of degree program IDs for each semester?",
        "gold_parse": "",
        "query": "SELECT semester_name, SUM(degree_program_id) FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum semester ID for each student?",
        "gold_parse": "",
        "query": "SELECT first_name, MAX(semester_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum course ID for each student?",
        "gold_parse": "",
        "query": "SELECT last_name, MIN(course_id) FROM Students JOIN Student_Enrolment_Courses ON Students.student_id = Student_Enrolment_Courses.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many addresses are there for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, COUNT(address_id) FROM Departments JOIN Students ON Departments.department_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average transcript ID for each section?",
        "gold_parse": "",
        "query": "SELECT section_name, AVG(transcript_id) FROM Sections JOIN Transcript_Contents ON Sections.course_id = Transcript_Contents.student_course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of address IDs for each course?",
        "gold_parse": "",
        "query": "SELECT course_name, SUM(address_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum student ID for each semester?",
        "gold_parse": "",
        "query": "SELECT semester_name, MIN(student_id) FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum transcript ID for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, MAX(transcript_id) FROM Departments JOIN Transcript_Contents ON Departments.department_id = Transcript_Contents.student_course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many zip postcodes are there for each degree program?",
        "gold_parse": "",
        "query": "SELECT degree_summary_name, COUNT(zip_postcode) FROM Degree_Programs JOIN Addresses ON Degree_Programs.degree_program_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average department ID for each address line 1?",
        "gold_parse": "",
        "query": "SELECT line_1, AVG(department_id) FROM Addresses JOIN Departments ON Addresses.address_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of transcript IDs for each student?",
        "gold_parse": "",
        "query": "SELECT first_name, SUM(transcript_id) FROM Students JOIN Transcripts ON Students.student_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum address ID for each semester?",
        "gold_parse": "",
        "query": "SELECT semester_name, MIN(address_id) FROM Semesters JOIN Addresses ON Semesters.semester_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are there for each course?",
        "gold_parse": "",
        "query": "SELECT course_name, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average degree program ID for each section?",
        "gold_parse": "",
        "query": "SELECT section_name, AVG(degree_program_id) FROM Sections JOIN Degree_Programs ON Sections.course_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of course IDs for each transcript date?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum student ID for each degree program?",
        "gold_parse": "",
        "query": "SELECT degree_summary_name, MIN(student_id) FROM Degree_Programs JOIN Students ON Degree_Programs.degree_program_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum transcript date for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, MAX(transcript_date) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many addresses are there for each course?",
        "gold_parse": "",
        "query": "SELECT course_name, COUNT(address_id) FROM Courses JOIN Addresses ON Courses.course_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average student ID for each section?",
        "gold_parse": "",
        "query": "SELECT section_name, AVG(student_id) FROM Sections JOIN Students ON Sections.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of degree program IDs for each semester?",
        "gold_parse": "",
        "query": "SELECT semester_name, SUM(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum course ID for each student?",
        "gold_parse": "",
        "query": "SELECT first_name, MIN(course_id) FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum transcript ID for each student?",
        "gold_parse": "",
        "query": "SELECT last_name, MAX(transcript_id) FROM Students JOIN Transcripts ON Students.student_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many zip postcodes are there for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, COUNT(zip_postcode) FROM Departments JOIN Addresses ON Departments.department_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many degree programs are there for each city?",
        "gold_parse": "",
        "query": "SELECT city, COUNT(degree_program_id) FROM Addresses JOIN Degree_Programs ON Addresses.address_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum student ID for each section description?",
        "gold_parse": "",
        "query": "SELECT section_description, MAX(student_id) FROM Sections JOIN Students ON Sections.section_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of course IDs for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, SUM(course_id) FROM Semesters JOIN Courses ON Semesters.semester_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average transcript date for each student?",
        "gold_parse": "",
        "query": "SELECT first_name, AVG(transcript_date) FROM Students JOIN Transcripts ON Students.student_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum address ID for each student's middle name?",
        "gold_parse": "",
        "query": "SELECT middle_name, MIN(address_id) FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum department ID for each student's last name?",
        "gold_parse": "",
        "query": "SELECT last_name, MAX(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses are there for each student's mobile number?",
        "gold_parse": "",
        "query": "SELECT cell_mobile_number, COUNT(course_id) FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average degree program ID for each student's SSN?",
        "gold_parse": "",
        "query": "SELECT ssn, AVG(degree_program_id) FROM Students JOIN Degree_Programs ON Students.student_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of section IDs for each student's registration date?",
        "gold_parse": "",
        "query": "SELECT date_first_registered, SUM(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum transcript ID for each student's leaving date?",
        "gold_parse": "",
        "query": "SELECT date_left, MIN(transcript_id) FROM Students JOIN Transcripts ON Students.student_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum address ID for each student's other details?",
        "gold_parse": "",
        "query": "SELECT other_student_details, MAX(address_id) FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are there for each department description?",
        "gold_parse": "",
        "query": "SELECT department_description, COUNT(student_id) FROM Departments JOIN Students ON Departments.department_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average section ID for each degree summary description?",
        "gold_parse": "",
        "query": "SELECT degree_summary_description, AVG(section_id) FROM Degree_Programs JOIN Sections ON Degree_Programs.degree_program_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of semester IDs for each course description?",
        "gold_parse": "",
        "query": "SELECT course_description, SUM(semester_id) FROM Courses JOIN Semesters ON Courses.course_id = Semesters.semester_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum transcript ID for each section description?",
        "gold_parse": "",
        "query": "SELECT section_description, MIN(transcript_id) FROM Sections JOIN Transcripts ON Sections.section_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum degree program ID for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are there for each city?",
        "gold_parse": "",
        "query": "SELECT city, COUNT(transcript_id) FROM Addresses JOIN Transcripts ON Addresses.address_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average student ID for each zip postcode?",
        "gold_parse": "",
        "query": "SELECT zip_postcode, AVG(student_id) FROM Addresses JOIN Students ON Addresses.address_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of course IDs for each state/province/county?",
        "gold_parse": "",
        "query": "SELECT state_province_county, SUM(course_id) FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum section ID for each country?",
        "gold_parse": "",
        "query": "SELECT country, MIN(section_id) FROM Addresses JOIN Sections ON Addresses.address_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum degree program ID for each address detail?",
        "gold_parse": "",
        "query": "SELECT other_address_details, MAX(degree_program_id) FROM Addresses JOIN Degree_Programs ON Addresses.address_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are there for each course detail?",
        "gold_parse": "",
        "query": "SELECT other_details, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average address ID for each semester name?",
        "gold_parse": "",
        "query": "SELECT semester_name, AVG(address_id) FROM Semesters JOIN Addresses ON Semesters.semester_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of student IDs for each course name?",
        "gold_parse": "",
        "query": "SELECT course_name, SUM(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum transcript ID for each section name?",
        "gold_parse": "",
        "query": "SELECT section_name, MIN(transcript_id) FROM Sections JOIN Transcripts ON Sections.section_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum address ID for each department name?",
        "gold_parse": "",
        "query": "SELECT department_name, MAX(address_id) FROM Departments JOIN Addresses ON Departments.department_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are there for each degree summary name?",
        "gold_parse": "",
        "query": "SELECT degree_summary_name, COUNT(student_id) FROM Degree_Programs JOIN Students ON Degree_Programs.degree_program_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average semester ID for each student's first name?",
        "gold_parse": "",
        "query": "SELECT first_name, AVG(semester_id) FROM Students JOIN Semesters ON Students.student_id = Semesters.semester_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of course IDs for each student's last name?",
        "gold_parse": "",
        "query": "SELECT last_name, SUM(course_id) FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum department ID for each student's middle name?",
        "gold_parse": "",
        "query": "SELECT middle_name, MIN(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum section ID for each student's email address?",
        "gold_parse": "",
        "query": "SELECT email_address, MAX(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many addresses are there for each student's mobile number?",
        "gold_parse": "",
        "query": "SELECT cell_mobile_number, COUNT(address_id) FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of transcript IDs for each student's registration date?",
        "gold_parse": "",
        "query": "SELECT date_first_registered, SUM(transcript_id) FROM Students JOIN Transcripts ON Students.student_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum course ID for each student's leaving date?",
        "gold_parse": "",
        "query": "SELECT date_left, MIN(course_id) FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum course ID for each zip postcode?",
        "gold_parse": "",
        "query": "SELECT zip_postcode, MAX(course_id) FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many sections are there for each state/province/county?",
        "gold_parse": "",
        "query": "SELECT state_province_county, COUNT(section_id) FROM Addresses JOIN Sections ON Addresses.address_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average degree program ID for each country?",
        "gold_parse": "",
        "query": "SELECT country, AVG(degree_program_id) FROM Addresses JOIN Degree_Programs ON Addresses.address_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of student IDs for each address detail?",
        "gold_parse": "",
        "query": "SELECT other_address_details, SUM(student_id) FROM Addresses JOIN Students ON Addresses.address_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum transcript ID for each course detail?",
        "gold_parse": "",
        "query": "SELECT other_details, MIN(transcript_id) FROM Courses JOIN Transcripts ON Courses.course_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum department ID for each course name?",
        "gold_parse": "",
        "query": "SELECT course_name, MAX(department_id) FROM Courses JOIN Departments ON Courses.course_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are there for each section name?",
        "gold_parse": "",
        "query": "SELECT section_name, COUNT(student_id) FROM Sections JOIN Students ON Sections.section_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average semester ID for each department name?",
        "gold_parse": "",
        "query": "SELECT department_name, AVG(semester_id) FROM Departments JOIN Semesters ON Departments.department_id = Semesters.semester_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of course IDs for each degree summary name?",
        "gold_parse": "",
        "query": "SELECT degree_summary_name, SUM(course_id) FROM Degree_Programs JOIN Courses ON Degree_Programs.degree_program_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum transcript ID for each semester name?",
        "gold_parse": "",
        "query": "SELECT semester_name, MIN(transcript_id) FROM Semesters JOIN Transcripts ON Semesters.semester_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum address ID for each student's first name?",
        "gold_parse": "",
        "query": "SELECT first_name, MAX(address_id) FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many degree programs are there for each student's middle name?",
        "gold_parse": "",
        "query": "SELECT middle_name, COUNT(degree_program_id) FROM Students JOIN Degree_Programs ON Students.student_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average section ID for each student's last name?",
        "gold_parse": "",
        "query": "SELECT last_name, AVG(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of transcript IDs for each student's email address?",
        "gold_parse": "",
        "query": "SELECT email_address, SUM(transcript_id) FROM Students JOIN Transcripts ON Students.student_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum course ID for each student's mobile number?",
        "gold_parse": "",
        "query": "SELECT cell_mobile_number, MIN(course_id) FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum department ID for each student's SSN?",
        "gold_parse": "",
        "query": "SELECT ssn, MAX(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many addresses are there for each student's registration date?",
        "gold_parse": "",
        "query": "SELECT date_first_registered, COUNT(address_id) FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average degree program ID for each student's leaving date?",
        "gold_parse": "",
        "query": "SELECT date_left, AVG(degree_program_id) FROM Students JOIN Degree_Programs ON Students.student_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of section IDs for each student's other details?",
        "gold_parse": "",
        "query": "SELECT other_student_details, SUM(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum transcript ID for each department description?",
        "gold_parse": "",
        "query": "SELECT department_description, MIN(transcript_id) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum course ID for each degree summary description?",
        "gold_parse": "",
        "query": "SELECT degree_summary_description, MAX(course_id) FROM Degree_Programs JOIN Courses ON Degree_Programs.degree_program_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are there for each course description?",
        "gold_parse": "",
        "query": "SELECT course_description, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average degree program ID for each section description?",
        "gold_parse": "",
        "query": "SELECT section_description, AVG(degree_program_id) FROM Sections JOIN Degree_Programs ON Sections.section_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of address IDs for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, SUM(address_id) FROM Semesters JOIN Addresses ON Semesters.semester_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum transcript ID for each student's first name?",
        "gold_parse": "",
        "query": "SELECT first_name, MIN(transcript_id) FROM Students JOIN Transcripts ON Students.student_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum course ID for each student's middle name?",
        "gold_parse": "",
        "query": "SELECT middle_name, MAX(course_id) FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many departments are there for each student's last name?",
        "gold_parse": "",
        "query": "SELECT last_name, COUNT(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average section ID for each student's email address?",
        "gold_parse": "",
        "query": "SELECT email_address, AVG(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of transcript IDs for each student's mobile number?",
        "gold_parse": "",
        "query": "SELECT cell_mobile_number, SUM(transcript_id) FROM Students JOIN Transcripts ON Students.student_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum course ID for each student's SSN?",
        "gold_parse": "",
        "query": "SELECT ssn, MIN(course_id) FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total room count for each property?",
        "gold_parse": "",
        "query": "SELECT property_name, SUM(room_count) FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.property_id GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many features are there for each feature type?",
        "gold_parse": "",
        "query": "SELECT feature_type_name, COUNT(feature_name) FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_id GROUP BY feature_type_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the average selling price for each property type?",
        "gold_parse": "",
        "query": "SELECT property_type_description, AVG(agreed_selling_price) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code GROUP BY property_type_description;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many properties are there at each address?",
        "gold_parse": "",
        "query": "SELECT COUNT(*), property_address FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.feature_id GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Which properties have a pool?",
        "gold_parse": "",
        "query": "SELECT feature_name, property_name FROM Other_Available_Features JOIN Properties ON Other_Available_Features.feature_id = Properties.property_id WHERE feature_description = 'Pool';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the maximum offered price for each property type?",
        "gold_parse": "",
        "query": "SELECT property_type_code, MAX(buyer_offered_price) FROM Properties GROUP BY property_type_description;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many distinct properties have each feature type?",
        "gold_parse": "",
        "query": "SELECT feature_type_code, COUNT(DISTINCT property_id) FROM Other_Property_Features GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Which properties have been sold and their dates on market?",
        "gold_parse": "",
        "query": "SELECT property_name, date_on_market FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_description WHERE date_sold IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total requested price for properties at each address?",
        "gold_parse": "",
        "query": "SELECT SUM(vendor_requested_price), property_address FROM Properties GROUP BY property_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the features for each property?",
        "gold_parse": "",
        "query": "SELECT property_name, feature_description FROM Properties JOIN Other_Available_Features ON Properties.property_type_code = Other_Available_Features.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many features does each property type have?",
        "gold_parse": "",
        "query": "SELECT COUNT(*), property_name FROM Properties JOIN Other_Available_Features ON Properties.property_id = Other_Available_Features.feature_id GROUP BY property_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the average selling price for each apartment?",
        "gold_parse": "",
        "query": "SELECT property_name, AVG(agreed_selling_price) FROM Properties WHERE feature_type_code = 'Apartment';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total number of features for each property?",
        "gold_parse": "",
        "query": "SELECT property_name, SUM(feature_id) FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.property_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many feature types does each property have?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the highest requested price for properties with a garden?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(vendor_requested_price) FROM Properties WHERE feature_description = 'Garden';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many features does each property type code have?",
        "gold_parse": "",
        "query": "SELECT property_type_code, COUNT(feature_name) FROM Ref_Property_Types JOIN Other_Property_Features ON Ref_Property_Types.property_type_code = Other_Property_Features.property_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the addresses of properties with each feature?",
        "gold_parse": "",
        "query": "SELECT feature_name, property_address FROM Other_Available_Features JOIN Properties ON Other_Available_Features.feature_id = Properties.property_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many properties are there for each property type description?",
        "gold_parse": "",
        "query": "SELECT property_type_description, COUNT(property_id) FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total number of fld_feature_1 for each property?",
        "gold_parse": "",
        "query": "SELECT property_name, SUM(fld_feature_1) FROM Properties GROUP BY property_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the maximum selling price for each house?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(agreed_selling_price) FROM Properties WHERE property_type_code = 'House';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total number of properties for each feature type?",
        "gold_parse": "",
        "query": "SELECT feature_type_name, SUM(property_id) FROM Ref_Feature_Types JOIN Properties ON Ref_Feature_Types.feature_type_code = Properties.property_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many features does each property have?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_description) FROM Properties JOIN Other_Available_Features ON Properties.property_id = Other_Available_Features.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the average offered price for properties with a pool?",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(buyer_offered_price) FROM Properties WHERE feature_name = 'Pool';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total number of other property details for each property?",
        "gold_parse": "",
        "query": "SELECT property_name, SUM(other_property_details) FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.feature_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many distinct feature types does each property have?",
        "gold_parse": "",
        "query": "SELECT property_type_code, COUNT(DISTINCT feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the maximum selling price for properties with a garage?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(agreed_selling_price) FROM Properties WHERE feature_type_name = 'Garage';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many features does each apartment have?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_name) FROM Properties JOIN Other_Available_Features ON Properties.property_id = Other_Available_Features.feature_id WHERE property_type_code = 'Apartment';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total number of fld_feature_2 for each property type?",
        "gold_parse": "",
        "query": "SELECT property_type_code, SUM(fld_feature_2) FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Which properties have a pool?",
        "gold_parse": "",
        "query": "SELECT feature_name, property_name FROM Other_Available_Features JOIN Properties ON Other_Available_Features.feature_id = Properties.property_id WHERE feature_type_name = 'Pool';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the average buyer offered price for each feature?",
        "gold_parse": "",
        "query": "SELECT property_name, AVG(buyer_offered_price) FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.feature_id GROUP BY feature_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the maximum property feature description for each property address where the vendor requested price is equal to the maximum buyer offered price?",
        "gold_parse": "",
        "query": "SELECT property_address, MAX(property_feature_description) FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.property_id WHERE vendor_requested_price = (SELECT MAX(buyer_offered_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the minimum feature name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MIN(feature_name) FROM Properties JOIN Other_Available_Features ON Properties.property_type_code = Other_Available_Features.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the property IDs and find the maximum room count where the property type code is equal to the feature type code.",
        "gold_parse": "",
        "query": "SELECT SUM(property_id), MAX(room_count) FROM Properties WHERE property_type_code = (SELECT feature_type_code FROM Other_Property_Features);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List distinct property addresses where the agreed selling price is less than the minimum room count.",
        "gold_parse": "",
        "query": "SELECT DISTINCT property_address FROM Properties WHERE agreed_selling_price < (SELECT MIN(room_count) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the house feature 2 for each property type where the property name is like the feature description.",
        "gold_parse": "",
        "query": "SELECT property_type_code, COUNT(hse_feature_2) FROM Properties WHERE property_name LIKE (SELECT feature_description FROM Ref_Feature_Types);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the distinct number of properties and sum the buyer offered price where the property name is in the list of property type descriptions.",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT property_id), SUM(buyer_offered_price) FROM Properties WHERE property_name IN (SELECT property_type_description FROM Ref_Property_Types);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the average apartment feature 1 for each property name where the date sold is equal to the maximum date on market?",
        "gold_parse": "",
        "query": "SELECT property_name, AVG(apt_feature_1) FROM Properties WHERE date_sold = (SELECT MAX(date_on_market) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the minimum property type code and maximum feature name from the join of properties and available features?",
        "gold_parse": "",
        "query": "SELECT MIN(property_type_code), MAX(feature_name) FROM Properties JOIN Other_Available_Features ON Properties.property_id = Other_Available_Features.feature_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List property IDs and the count of other feature 3 for properties where the agreed selling price is equal to the property type code.",
        "gold_parse": "",
        "query": "SELECT property_id, COUNT(oth_feature_3) FROM Properties WHERE agreed_selling_price = (SELECT property_type_code FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the maximum feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the number of properties and the average property feature description where the date sold is equal to the feature type code.",
        "gold_parse": "",
        "query": "SELECT COUNT(property_id), AVG(property_feature_description) FROM Properties WHERE date_sold = (SELECT feature_type_code FROM Ref_Feature_Types);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List distinct vendor requested prices for properties where the property address is equal to the maximum room count.",
        "gold_parse": "",
        "query": "SELECT DISTINCT vendor_requested_price FROM Properties WHERE property_address = (SELECT MAX(room_count) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the average agreed selling price for each property type where the property name is like the feature description?",
        "gold_parse": "",
        "query": "SELECT property_type_code, AVG(agreed_selling_price) FROM Properties WHERE property_name LIKE (SELECT feature_description FROM Other_Available_Features);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the number of apartment feature 2 where the date sold is in the list of dates on market.",
        "gold_parse": "",
        "query": "SELECT COUNT(apt_feature_2) FROM Properties WHERE date_sold IN (SELECT date_on_market FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List property IDs and sum of house feature 3 where the vendor requested price is equal to the property type code.",
        "gold_parse": "",
        "query": "SELECT property_id, SUM(hse_feature_3) FROM Properties WHERE vendor_requested_price = (SELECT property_type_code FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the maximum buyer offered price for each property name where the property ID is equal to the feature ID?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(buyer_offered_price) FROM Properties WHERE property_id = (SELECT feature_id FROM Other_Property_Features);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the minimum of other property details for properties where the property type code is in the list of feature type codes?",
        "gold_parse": "",
        "query": "SELECT MIN(other_property_details) FROM Properties WHERE property_type_code IN (SELECT feature_type_code FROM Ref_Feature_Types);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the number of properties and the average room count where the property name is equal to the feature name.",
        "gold_parse": "",
        "query": "SELECT COUNT(property_id), AVG(room_count) FROM Properties WHERE property_name = (SELECT feature_name FROM Other_Available_Features);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List the properties with the maximum apartment feature 2 where the room count is greater than the number of feature types.",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(apt_feature_2) FROM Properties WHERE room_count > (SELECT COUNT(*) FROM Ref_Feature_Types);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property address with the earliest sold date for apartments.",
        "gold_parse": "",
        "query": "SELECT property_address, MIN(date_sold) FROM Properties WHERE property_type_code = 'APT';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average selling price for each feature.",
        "gold_parse": "",
        "query": "SELECT feature_name, AVG(agreed_selling_price) FROM Other_Available_Features JOIN Properties ON Other_Available_Features.feature_type_code = Properties.property_type_code GROUP BY feature_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the number of features for each vendor requested price.",
        "gold_parse": "",
        "query": "SELECT vendor_requested_price, COUNT(feature_id) FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.property_id GROUP BY vendor_requested_price;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the room counts for each property type description.",
        "gold_parse": "",
        "query": "SELECT property_type_description, SUM(room_count) FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code GROUP BY property_type_description;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the maximum buyer offered price for each feature.",
        "gold_parse": "",
        "query": "SELECT feature_name, MAX(buyer_offered_price) FROM Other_Available_Features JOIN Properties ON Other_Available_Features.feature_id = Properties.property_id GROUP BY feature_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List the properties with the minimum feature type code that were on the market after January 1, 2021.",
        "gold_parse": "",
        "query": "SELECT property_name, MIN(feature_type_code) FROM Properties WHERE date_on_market > '2021-01-01';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the number of properties by address where the property type code is also a feature type code.",
        "gold_parse": "",
        "query": "SELECT property_address, COUNT(*) FROM Properties WHERE property_type_code IN (SELECT feature_type_code FROM Other_Available_Features) GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the latest market date for each feature description.",
        "gold_parse": "",
        "query": "SELECT MAX(date_on_market), feature_description FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.property_id GROUP BY feature_description;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the first field feature for properties sold at the minimum agreed selling price.",
        "gold_parse": "",
        "query": "SELECT property_name, SUM(fld_feature_1) FROM Properties WHERE agreed_selling_price = (SELECT MIN(agreed_selling_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property with the maximum house feature 2 for a given property type code.",
        "gold_parse": "",
        "query": "SELECT property_id, MAX(hse_feature_2) FROM Properties WHERE property_type_code = (SELECT property_type_code FROM Properties LIMIT 1);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average feature type code for each property address.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(feature_type_code) FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the number of first apartment features for properties that haven't been sold.",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(apt_feature_1) FROM Properties WHERE date_sold IS NULL GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the earliest market date for each feature type name.",
        "gold_parse": "",
        "query": "SELECT MIN(date_on_market), feature_type_name FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code GROUP BY feature_type_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the buyer offered prices for each property type description.",
        "gold_parse": "",
        "query": "SELECT property_type_description, SUM(buyer_offered_price) FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code GROUP BY property_type_description;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property addresses with the maximum second field feature where the vendor requested price is above average.",
        "gold_parse": "",
        "query": "SELECT property_address, MAX(fld_feature_2) FROM Properties WHERE vendor_requested_price > (SELECT AVG(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property with the minimum third other feature where the room count is the highest.",
        "gold_parse": "",
        "query": "SELECT property_id, MIN(oth_feature_3) FROM Properties WHERE room_count = (SELECT MAX(room_count) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average feature name for each property name.",
        "gold_parse": "",
        "query": "SELECT property_name, AVG(feature_name) FROM Properties JOIN Other_Available_Features ON Properties.property_type_code = Other_Available_Features.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the first house feature for properties that have been sold.",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property with the highest ID for each feature description.",
        "gold_parse": "",
        "query": "SELECT MAX(property_id), feature_description FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.property_id GROUP BY feature_description;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the property type codes for properties sold below the maximum agreed selling price.",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(property_type_code) FROM Properties WHERE agreed_selling_price < (SELECT MAX(agreed_selling_price) FROM Properties) GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property addresses with the minimum third apartment feature where the room count is greater than 5.",
        "gold_parse": "",
        "query": "SELECT property_address, MIN(apt_feature_3) FROM Properties WHERE room_count > 5;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average first field feature for properties where the vendor requested price is the lowest.",
        "gold_parse": "",
        "query": "SELECT property_id, AVG(fld_feature_1) FROM Properties WHERE vendor_requested_price < (SELECT MIN(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the properties with the maximum second house feature where the buyer offered price is average.",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(hse_feature_2) FROM Properties WHERE buyer_offered_price = (SELECT AVG(buyer_offered_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the feature type codes for each property address.",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(feature_type_code) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the number of second other features for properties on the market before January 1, 2022.",
        "gold_parse": "",
        "query": "SELECT property_id, COUNT(oth_feature_2) FROM Properties WHERE date_on_market < '2022-01-01' GROUP BY property_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the properties with the minimum first shop feature where the room count is between 3 and 6.",
        "gold_parse": "",
        "query": "SELECT property_name, MIN(shp_feature_1) FROM Properties WHERE room_count BETWEEN 3 AND 6;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average feature description for each property address.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(feature_description) FROM Properties JOIN Other_Available_Features ON Properties.property_id = Other_Available_Features.feature_id GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property with the maximum second apartment feature where the sold date is above average.",
        "gold_parse": "",
        "query": "SELECT property_id, MAX(apt_feature_2) FROM Properties WHERE date_sold > (SELECT AVG(date_sold) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the property type descriptions for each property name.",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(property_type_description) FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the buyer offered prices for properties where the property type code is also a feature type code.",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(buyer_offered_price) FROM Properties WHERE property_type_code IN (SELECT feature_type_code FROM Other_Available_Features) GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property with the minimum third shop feature where the room count is the lowest.",
        "gold_parse": "",
        "query": "SELECT property_id, MIN(shp_feature_3) FROM Properties WHERE room_count = (SELECT MIN(room_count) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average first other feature for properties where the vendor requested price is above average.",
        "gold_parse": "",
        "query": "SELECT property_name, AVG(oth_feature_1) FROM Properties WHERE vendor_requested_price > (SELECT AVG(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property address with the highest agreed selling price where the first apartment feature is not null.",
        "gold_parse": "",
        "query": "SELECT property_address, MAX(agreed_selling_price) FROM Properties WHERE apt_feature_1 IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List the properties with the minimum vendor requested price where the second house feature is null.",
        "gold_parse": "",
        "query": "SELECT property_name, MIN(vendor_requested_price) FROM Properties WHERE hse_feature_2 IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the third field features for each property ID grouped by property name.",
        "gold_parse": "",
        "query": "SELECT property_id, COUNT(fld_feature_3) FROM Properties GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average room count for properties with the first shop feature marked as 'Yes'.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(room_count) FROM Properties WHERE shp_feature_1 = 'Yes';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the property IDs for properties where the property type code matches any feature ID.",
        "gold_parse": "",
        "query": "SELECT property_name, SUM(property_id) FROM Properties WHERE property_type_code = (SELECT feature_id FROM Other_Available_Features);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the number of properties sold before January 1, 2020, grouped by property address.",
        "gold_parse": "",
        "query": "SELECT property_address, COUNT(property_name) FROM Properties WHERE date_sold < '2020-01-01';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the properties with the maximum first field feature where the buyer offered price is above average.",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(fld_feature_1) FROM Properties WHERE buyer_offered_price > (SELECT AVG(buyer_offered_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average third other feature for properties with more than 10 rooms.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(oth_feature_3) FROM Properties WHERE room_count > 10;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the properties with the minimum second shop feature where the agreed selling price is the highest.",
        "gold_parse": "",
        "query": "SELECT property_name, MIN(shp_feature_2) FROM Properties WHERE agreed_selling_price = (SELECT MAX(agreed_selling_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the property IDs for properties where the third apartment feature is not null.",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(property_id) FROM Properties WHERE apt_feature_3 IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the first house features for properties with the lowest vendor requested price.",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(hse_feature_1) FROM Properties WHERE vendor_requested_price < (SELECT MIN(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average second field feature for properties on the market after January 1, 2021.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(fld_feature_2) FROM Properties WHERE date_on_market > '2021-01-01';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the maximum feature type code for each property name.",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_code) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the buyer offered prices for properties where the second apartment feature is null.",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(buyer_offered_price) FROM Properties WHERE apt_feature_2 IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the third field features for properties with room counts between 5 and 10.",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(fld_feature_3) FROM Properties WHERE room_count BETWEEN 5 AND 10;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average first house feature for properties that have been sold.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the properties with the maximum second other feature where the vendor requested price is above average.",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(oth_feature_2) FROM Properties WHERE vendor_requested_price > (SELECT AVG(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the third shop features for properties with the lowest buyer offered price.",
        "gold_parse": "",
        "query": "SELECT property_address, COUNT(shp_feature_3) FROM Properties WHERE buyer_offered_price < (SELECT MIN(buyer_offered_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the first apartment features for properties with more than 8 rooms.",
        "gold_parse": "",
        "query": "SELECT property_name, SUM(apt_feature_1) FROM Properties WHERE room_count > 8;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average second field feature for properties with the highest agreed selling price.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(fld_feature_2) FROM Properties WHERE agreed_selling_price = (SELECT MAX(agreed_selling_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the maximum feature name for each property name.",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_name) FROM Properties JOIN Other_Available_Features ON Properties.property_id = Other_Available_Features.feature_id GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the buyer offered prices for properties where the first shop feature is not null.",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(buyer_offered_price) FROM Properties WHERE shp_feature_1 IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the second house features for properties with above average vendor requested prices.",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(hse_feature_2) FROM Properties WHERE vendor_requested_price > (SELECT AVG(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average third field feature for properties on the market before January 1, 2020.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(fld_feature_3) FROM Properties WHERE date_on_market < '2020-01-01';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the feature type codes for each property name.",
        "gold_parse": "",
        "query": "SELECT property_name, SUM(feature_type_code) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the second apartment features for properties with the lowest agreed selling price.",
        "gold_parse": "",
        "query": "SELECT property_address, COUNT(apt_feature_2) FROM Properties WHERE agreed_selling_price < (SELECT MIN(agreed_selling_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the properties with the maximum first other feature where the buyer offered price is average.",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(oth_feature_1) FROM Properties WHERE buyer_offered_price = (SELECT AVG(buyer_offered_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the third shop features for properties with fewer than 4 rooms.",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(shp_feature_3) FROM Properties WHERE room_count < 4;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the third house features for properties with the lowest vendor requested price.",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(hse_feature_3) FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average first field feature for properties sold after January 1, 2022.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(fld_feature_1) FROM Properties WHERE date_sold > '2022-01-01';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Find the highest paper ID for each author.",
        "gold_parse": "",
        "query": "SELECT authorname, MAX(paperid) FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citing papers for venues with more than 10 citations.",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(numciting) FROM venue JOIN paper ON venue.venueid = paper.venueid WHERE numcitedby > 10;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average year of papers using each dataset after the year 2000.",
        "gold_parse": "",
        "query": "SELECT datasetname, AVG(year) FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid WHERE year > 2000;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the keyphrases for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, COUNT(keyphraseid) FROM journal JOIN paper ON journal.journalid = paper.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citations by venue for venues with less than 50 citations.",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(numcitedby) FROM venue JOIN paper ON venue.venueid = paper.venueid GROUP BY venueid HAVING SUM(numcitedby) < 50;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the datasets used by each paper.",
        "gold_parse": "",
        "query": "SELECT title, COUNT(datasetid) FROM paper JOIN paperdataset ON paper.paperid = paperdataset.paperid WHERE datasetid IS NOT NULL GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average number of citing papers for each keyphrase.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, AVG(numciting) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citations for each author.",
        "gold_parse": "",
        "query": "SELECT authorname, SUM(numcitedby) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of authors in each field.",
        "gold_parse": "",
        "query": "SELECT fieldid, COUNT(authorid) FROM field JOIN paperfield ON field.fieldid = paperfield.fieldid JOIN writes ON paperfield.paperid = writes.paperid GROUP BY fieldid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the paper IDs for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, SUM(paperid) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the keyphrases used in each dataset.",
        "gold_parse": "",
        "query": "SELECT datasetname, COUNT(keyphraseid) FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid GROUP BY datasetname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the field IDs for each paper title.",
        "gold_parse": "",
        "query": "SELECT title, SUM(fieldid) FROM paper JOIN paperfield ON paper.paperid = paperfield.paperid WHERE fieldid IS NOT NULL GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average paper ID for venues with paper IDs greater than 1000.",
        "gold_parse": "",
        "query": "SELECT venuename, AVG(paperid) FROM venue JOIN paper ON venue.venueid = paper.venueid WHERE paperid > 1000 GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the datasets used by each author.",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(datasetid) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid JOIN paperdataset ON paper.paperid = paperdataset.paperid GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the keyphrase IDs for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, SUM(keyphraseid) FROM journal JOIN paper ON journal.journalid = paper.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average number of citations for papers with more than 5 citations.",
        "gold_parse": "",
        "query": "SELECT title, AVG(numcitedby) FROM paper WHERE numciting > 5 GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the field IDs for each venue.",
        "gold_parse": "",
        "query": "SELECT venuename, COUNT(fieldid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citing papers for each author with more than 50 citations.",
        "gold_parse": "",
        "query": "SELECT authorname, SUM(numciting) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE numcitedby > 50 GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average dataset ID for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, AVG(datasetid) FROM journal JOIN paper ON journal.journalid = paper.journalid JOIN paperdataset ON paper.paperid = paperdataset.paperid WHERE datasetid IS NOT NULL GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of authors for each paper.",
        "gold_parse": "",
        "query": "SELECT title, COUNT(authorid) FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the paper IDs for each venue for papers published before 2010.",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(paperid) FROM venue JOIN paper ON venue.venueid = paper.venueid WHERE year < 2010 GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the keyphrases used by each author.",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(keyphraseid) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the field IDs for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, SUM(fieldid) FROM journal JOIN paper ON journal.journalid = paper.journalid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average dataset ID for each paper title.",
        "gold_parse": "",
        "query": "SELECT title, AVG(datasetid) FROM paper JOIN paperdataset ON paper.paperid = paperdataset.paperid WHERE datasetid IS NOT NULL GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of citing papers for each venue with more than 20 citations.",
        "gold_parse": "",
        "query": "SELECT venuename, COUNT(numciting) FROM venue JOIN paper ON venue.venueid = paper.venueid WHERE numcitedby > 20 GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citations for each author for papers published after 2015.",
        "gold_parse": "",
        "query": "SELECT authorname, SUM(numcitedby) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE year > 2015 GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average number of citing papers for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, AVG(numciting) FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE numciting IS NOT NULL GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of field IDs for each paper title.",
        "gold_parse": "",
        "query": "SELECT title, COUNT(fieldid) FROM paper JOIN paperfield ON paper.paperid = paperfield.paperid WHERE fieldid IS NOT NULL GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the dataset IDs for each venue.",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(datasetid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN paperdataset ON paper.paperid = paperdataset.paperid WHERE datasetid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of citations for each author with citations greater than 0.",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(numcitedby) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE numcitedby > 0 GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Find the highest keyphrase ID for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, MAX(keyphraseid) FROM journal JOIN paper ON journal.journalid = paper.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citations for venues with more than 50 citing papers.",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(numcitedby) FROM venue JOIN paper ON venue.venueid = paper.venueid WHERE numciting > 50;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of authors for each dataset.",
        "gold_parse": "",
        "query": "SELECT datasetname, COUNT(authorid) FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid JOIN writes ON paper.paperid = writes.paperid GROUP BY datasetname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citations for each keyphrase before the year 2010.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, SUM(numcitedby) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid WHERE year < 2010 GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of journals for each field.",
        "gold_parse": "",
        "query": "SELECT fieldid, COUNT(journalid) FROM field JOIN paperfield ON field.fieldid = paperfield.fieldid JOIN paper ON paperfield.paperid = paper.paperid JOIN journal ON paper.journalid = journal.journalid GROUP BY fieldid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citing papers for each author with less than 100 citations.",
        "gold_parse": "",
        "query": "SELECT authorname, SUM(numciting) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE numcitedby < 100 GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of datasets used in each journal for papers published after the year 2000.",
        "gold_parse": "",
        "query": "SELECT journalname, COUNT(datasetid) FROM journal JOIN paper ON journal.journalid = paper.journalid JOIN paperdataset ON paper.paperid = paperdataset.paperid WHERE year > 2000 GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the author IDs for each paper title.",
        "gold_parse": "",
        "query": "SELECT title, SUM(authorid) FROM paper JOIN writes ON paper.paperid = writes.paperid WHERE authorid IS NOT NULL GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average number of citations for each venue.",
        "gold_parse": "",
        "query": "SELECT venuename, AVG(numcitedby) FROM venue JOIN paper ON venue.venueid = paper.venueid WHERE numcitedby IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Find the highest paper ID for each dataset.",
        "gold_parse": "",
        "query": "SELECT datasetname, MAX(paperid) FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid GROUP BY datasetname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the field IDs for each keyphrase.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, COUNT(fieldid) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the dataset IDs used by each author.",
        "gold_parse": "",
        "query": "SELECT authorname, SUM(datasetid) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid JOIN paperdataset ON paper.paperid = paperdataset.paperid GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average field ID for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, AVG(fieldid) FROM journal JOIN paper ON journal.journalid = paper.journalid JOIN paperfield ON paper.paperid = paperfield.paperid WHERE fieldid IS NOT NULL GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of keyphrase IDs for each paper title.",
        "gold_parse": "",
        "query": "SELECT title, COUNT(keyphraseid) FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid WHERE keyphraseid IS NOT NULL GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the author IDs for each venue.",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(authorid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN writes ON paper.paperid = writes.paperid WHERE authorid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of journals for each dataset.",
        "gold_parse": "",
        "query": "SELECT datasetname, COUNT(journalid) FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid JOIN journal ON paper.journalid = journal.journalid GROUP BY datasetname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citing papers for each keyphrase with more than 10 citations.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, SUM(numciting) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid WHERE numcitedby > 10 GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average number of citations for each author.",
        "gold_parse": "",
        "query": "SELECT authorname, AVG(numcitedby) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE numcitedby IS NOT NULL GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of citing papers for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, COUNT(numciting) FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE numciting > 0 GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the dataset IDs for each paper title.",
        "gold_parse": "",
        "query": "SELECT title, SUM(datasetid) FROM paper JOIN paperdataset ON paper.paperid = paperdataset.paperid WHERE datasetid IS NOT NULL GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of field IDs for each venue.",
        "gold_parse": "",
        "query": "SELECT venuename, COUNT(fieldid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN paperfield ON paper.paperid = paperfield.paperid WHERE fieldid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citations for each dataset.",
        "gold_parse": "",
        "query": "SELECT datasetname, SUM(numcitedby) FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid WHERE numcitedby IS NOT NULL GROUP BY datasetname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average author ID for each keyphrase.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, AVG(authorid) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid JOIN writes ON paper.paperid = writes.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of papers for each author.",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(paperid) FROM author JOIN writes ON author.authorid = writes.authorid WHERE paperid IS NOT NULL GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citing papers for each journal with less than 20 citing papers.",
        "gold_parse": "",
        "query": "SELECT journalname, SUM(numciting) FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE numciting < 20 GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of citations for each paper title.",
        "gold_parse": "",
        "query": "SELECT title, COUNT(numcitedby) FROM paper WHERE numcitedby IS NOT NULL GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of citing papers for each dataset.",
        "gold_parse": "",
        "query": "SELECT datasetname, COUNT(numciting) FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid WHERE numciting IS NOT NULL GROUP BY datasetname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the field IDs for each keyphrase.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, SUM(fieldid) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the largest city in the USA by surface area?",
        "gold_parse": "",
        "query": "SELECT Name, MAX(SurfaceArea) FROM city WHERE CountryCode = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of countries grouped by whether the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, SUM(Population) FROM countrylanguage GROUP BY IsOfficial;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy in districts with cities having a population over 1 million?",
        "gold_parse": "",
        "query": "SELECT District, AVG(LifeExpectancy) FROM city WHERE Population > 1000000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of languages spoken in each government form.",
        "gold_parse": "",
        "query": "SELECT HeadOfState, COUNT(Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY GovernmentForm;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which country has the highest Gross National Product based on city population?",
        "gold_parse": "",
        "query": "SELECT Name FROM country WHERE GNP = (SELECT MAX(Population) FROM city);",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries in each continent with a life expectancy less than 60.",
        "gold_parse": "",
        "query": "SELECT COUNT(*), Region FROM country WHERE LifeExpectancy < 60 GROUP BY Continent;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the latest independence year for each country code?",
        "gold_parse": "",
        "query": "SELECT CountryCode, MAX(IndepYear) FROM city GROUP BY CountryCode;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the Gross National Product of countries where the language is official.",
        "gold_parse": "",
        "query": "SELECT Percentage, SUM(GNP) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the smallest country by surface area in Africa.",
        "gold_parse": "",
        "query": "SELECT LocalName, MIN(SurfaceArea) FROM country WHERE Continent = 'Africa';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average Gross National Product of countries where the language is not official?",
        "gold_parse": "",
        "query": "SELECT Language, AVG(GNP) FROM countrylanguage WHERE IsOfficial = 'F' GROUP BY CountryCode;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of districts in cities from India.",
        "gold_parse": "",
        "query": "SELECT District, SUM(Population) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'India');",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which country has the highest percentage of Spanish speakers?",
        "gold_parse": "",
        "query": "SELECT CountryCode, MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of cities in each South American country grouped by city population.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode WHERE Region = 'South America' GROUP BY city.Population;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the maximum population of countries with a republic government form?",
        "gold_parse": "",
        "query": "SELECT LifeExpectancy, MAX(Population) FROM country WHERE GovernmentForm = 'Republic';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the number of districts in each country.",
        "gold_parse": "",
        "query": "SELECT Code, SUM(District) FROM city GROUP BY CountryCode;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of languages spoken in countries where the language is spoken by more than 50% of the population.",
        "gold_parse": "",
        "query": "SELECT CountryCode, COUNT(Language) FROM countrylanguage WHERE Percentage > 50;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average Gross National Product of countries with cities having a population over 5 million?",
        "gold_parse": "",
        "query": "SELECT Name, AVG(GNP) FROM country JOIN city ON country.Code = city.CountryCode WHERE Population > 5000000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the earliest independence year in each continent?",
        "gold_parse": "",
        "query": "SELECT Region, MIN(IndepYear) FROM country GROUP BY Continent;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the surface area of countries where the language is not official, grouped by language.",
        "gold_parse": "",
        "query": "SELECT CountryCode, SUM(SurfaceArea) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F' GROUP BY Language;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of cities with a population over 1 million in each region.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(city.Population) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 1000000 GROUP BY country.Region;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum life expectancy in countries where the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the smallest population of cities in each district?",
        "gold_parse": "",
        "query": "SELECT CountryCode, MIN(Population) FROM city GROUP BY District;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average percentage of non-official languages spoken in each country?",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the largest population of cities in Europe?",
        "gold_parse": "",
        "query": "SELECT CountryCode, MAX(Population) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Continent = 'Europe');",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries in each region, grouped by city name.",
        "gold_parse": "",
        "query": "SELECT Region, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode GROUP BY city.Name;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average Gross National Product of continents with a life expectancy below 70?",
        "gold_parse": "",
        "query": "SELECT Continent, AVG(GNP) FROM country WHERE LifeExpectancy < 70;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the surface area of countries with cities in the district of California.",
        "gold_parse": "",
        "query": "SELECT CountryCode, SUM(SurfaceArea) FROM city WHERE District = 'California';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of languages spoken in each government form in Asia.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Region = 'Asia' GROUP BY GovernmentForm;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the smallest population of countries with a known independence year?",
        "gold_parse": "",
        "query": "SELECT HeadOfState, MIN(Population) FROM country WHERE IndepYear IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum population of countries where the language is not official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(Population) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average independence year for each government form?",
        "gold_parse": "",
        "query": "SELECT Continent, AVG(IndepYear) FROM country GROUP BY GovernmentForm;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the life expectancy of countries in Europe.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(LifeExpectancy) FROM country WHERE Continent = 'Europe';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of cities in New York grouped by population.",
        "gold_parse": "",
        "query": "SELECT CountryCode, COUNT(*) FROM city WHERE District = 'New York' GROUP BY Population;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum surface area of regions with cities having a population less than 500,000.",
        "gold_parse": "",
        "query": "SELECT Region, MAX(SurfaceArea) FROM country JOIN city ON country.Code = city.CountryCode WHERE Population < 500000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the Gross National Product of countries where the language is official, grouped by country code.",
        "gold_parse": "",
        "query": "SELECT Language, SUM(GNP) FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY CountryCode;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum percentage of languages spoken in African countries.",
        "gold_parse": "",
        "query": "SELECT Name, MIN(Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Region = 'Africa';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy of cities in each district?",
        "gold_parse": "",
        "query": "SELECT CountryCode, AVG(LifeExpectancy) FROM city GROUP BY District;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the latest independence year of countries with cities having a population over 1 million.",
        "gold_parse": "",
        "query": "SELECT Name, MAX(IndepYear) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 1000000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of cities where the language is not official.",
        "gold_parse": "",
        "query": "SELECT Language, SUM(Population) FROM countrylanguage JOIN city ON countrylanguage.CountryCode = city.CountryCode WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of distinct regions in each continent grouped by government form.",
        "gold_parse": "",
        "query": "SELECT Continent, COUNT(DISTINCT Region) FROM country GROUP BY GovernmentForm;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum Gross National Product of countries with cities having a population less than 500,000.",
        "gold_parse": "",
        "query": "SELECT Name, MAX(GNP) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population < 500000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average surface area of cities in China?",
        "gold_parse": "",
        "query": "SELECT CountryCode, AVG(SurfaceArea) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'China');",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of regions with a life expectancy greater than 70.",
        "gold_parse": "",
        "query": "SELECT Region, SUM(Population) FROM country JOIN city ON country.Code = city.CountryCode WHERE LifeExpectancy > 70;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum old Gross National Product of countries where the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(GNPOld) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the earliest independence year of countries with cities in the district of California.",
        "gold_parse": "",
        "query": "SELECT Name, MIN(IndepYear) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.District = 'California';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of cities with a population greater than the average city population.",
        "gold_parse": "",
        "query": "SELECT CountryCode, SUM(Population) FROM city WHERE Population > (SELECT AVG(Population) FROM city);",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average surface area of countries where the language is not official?",
        "gold_parse": "",
        "query": "SELECT Language, AVG(SurfaceArea) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum life expectancy of countries with cities in North America.",
        "gold_parse": "",
        "query": "SELECT Name, MAX(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE Region = 'North America';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the Gross National Product of continents with a monarchy government form.",
        "gold_parse": "",
        "query": "SELECT Continent, SUM(GNP) FROM country WHERE GovernmentForm = 'Monarchy';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the smallest population of countries with cities having a population less than 500,000.",
        "gold_parse": "",
        "query": "SELECT Name, MIN(Population) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population < 500000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy of cities in Texas?",
        "gold_parse": "",
        "query": "SELECT CountryCode, AVG(LifeExpectancy) FROM city WHERE District = 'Texas';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries in each region with cities having a population over 1 million, grouped by city name.",
        "gold_parse": "",
        "query": "SELECT Region, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 1000000 GROUP BY city.Name;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of countries where the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, SUM(Population) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum Gross National Product of continents with a life expectancy below 60.",
        "gold_parse": "",
        "query": "SELECT Continent, MAX(GNP) FROM country WHERE LifeExpectancy < 60;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average population of countries with cities in the district of Florida?",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Population) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.District = 'Florida';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the surface area of cities in South America.",
        "gold_parse": "",
        "query": "SELECT CountryCode, SUM(SurfaceArea) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Region = 'South America');",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum life expectancy of regions with cities having a population over 2 million.",
        "gold_parse": "",
        "query": "SELECT Region, MIN(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 2000000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum population of countries where the language is official, grouped by language.",
        "gold_parse": "",
        "query": "SELECT Language, MIN(Population) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T' GROUP BY Language;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum old Gross National Product of continents with a republic government form.",
        "gold_parse": "",
        "query": "SELECT Continent, MAX(GNPOld) FROM country WHERE GovernmentForm = 'Republic';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average independence year of countries with cities in Europe?",
        "gold_parse": "",
        "query": "SELECT Name, AVG(IndepYear) FROM country JOIN city ON country.Code = city.CountryCode WHERE Region = 'Europe';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the life expectancy of cities in the district of New York.",
        "gold_parse": "",
        "query": "SELECT CountryCode, SUM(LifeExpectancy) FROM city WHERE District = 'New York';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of distinct surface areas of countries where the language is not official.",
        "gold_parse": "",
        "query": "SELECT Language, COUNT(DISTINCT SurfaceArea) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average population of continents with a population greater than the average country population?",
        "gold_parse": "",
        "query": "SELECT Continent, AVG(Population) FROM country WHERE Population > (SELECT AVG(Population) FROM country);",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum Gross National Product of countries with cities having a life expectancy below 65.",
        "gold_parse": "",
        "query": "SELECT Name, MAX(GNP) FROM country JOIN city ON country.Code = city.CountryCode WHERE LifeExpectancy < 65;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the minimum life expectancy of cities in India?",
        "gold_parse": "",
        "query": "SELECT CountryCode, MIN(LifeExpectancy) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'India');",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the surface area of regions with cities having a population over 300,000.",
        "gold_parse": "",
        "query": "SELECT Region, SUM(SurfaceArea) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 300000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum percentage of languages spoken in countries where the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(Percentage) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average Gross National Product of continents with a life expectancy greater than 75?",
        "gold_parse": "",
        "query": "SELECT Continent, AVG(GNP) FROM country WHERE LifeExpectancy > 75;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of countries with cities in Asia.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Population) FROM country JOIN city ON country.Code = city.CountryCode WHERE Region = 'Asia';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the minimum Gross National Product of cities in Texas?",
        "gold_parse": "",
        "query": "SELECT CountryCode, MIN(GNP) FROM city WHERE District = 'Texas';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum life expectancy of regions with cities having a population over 500,000.",
        "gold_parse": "",
        "query": "SELECT Region, MAX(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 500000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of continents with a monarchy government form.",
        "gold_parse": "",
        "query": "SELECT Continent, SUM(Population) FROM country WHERE GovernmentForm = 'Monarchy';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy of countries with cities in the district of California?",
        "gold_parse": "",
        "query": "SELECT Name, AVG(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.District = 'California';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of distinct populations of cities in Africa.",
        "gold_parse": "",
        "query": "SELECT CountryCode, COUNT(DISTINCT Population) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Region = 'Africa');",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the old Gross National Product of regions with cities having a life expectancy below 70.",
        "gold_parse": "",
        "query": "SELECT Region, SUM(GNPOld) FROM country JOIN city ON country.Code = city.CountryCode WHERE LifeExpectancy < 70;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum population of countries where the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, MIN(Population) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average independence year of continents with a democracy government form?",
        "gold_parse": "",
        "query": "SELECT Continent, AVG(IndepYear) FROM country WHERE GovernmentForm = 'Democracy';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the Gross National Product of countries with cities having a population over 400,000.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(GNP) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 400000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the maximum surface area of cities in Brazil?",
        "gold_parse": "",
        "query": "SELECT CountryCode, MAX(SurfaceArea) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Brazil');",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy of regions with cities having a population less than 500,000?",
        "gold_parse": "",
        "query": "SELECT Region, AVG(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population < 500000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries where the language is not official, grouped by country code.",
        "gold_parse": "",
        "query": "SELECT Language, COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F' GROUP BY CountryCode;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum population of continents with a life expectancy greater than 80.",
        "gold_parse": "",
        "query": "SELECT Continent, MIN(Population) FROM country WHERE LifeExpectancy > 80;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the latest independence year of countries with cities in the district of Nevada.",
        "gold_parse": "",
        "query": "SELECT Name, MAX(IndepYear) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.District = 'Nevada';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average Gross National Product of cities with a population less than the average city population?",
        "gold_parse": "",
        "query": "SELECT CountryCode, AVG(GNP) FROM city WHERE Population < (SELECT AVG(Population) FROM city);",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the life expectancy of regions with cities having a population over 1 million.",
        "gold_parse": "",
        "query": "SELECT Region, SUM(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 1000000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of continents of countries with a surface area greater than the average surface area.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Continent) FROM country WHERE SurfaceArea > (SELECT AVG(SurfaceArea) FROM country);",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the latest independence year of countries with the most populated city.",
        "gold_parse": "",
        "query": "SELECT CountryCode, MAX(IndepYear) FROM city WHERE Population = (SELECT MAX(Population) FROM city);",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy of countries where the language is official?",
        "gold_parse": "",
        "query": "SELECT Language, AVG(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the Gross National Product of continents with a federal republic government form.",
        "gold_parse": "",
        "query": "SELECT Continent, SUM(GNP) FROM country WHERE GovernmentForm = 'Federal Republic';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum population of countries with cities in North America.",
        "gold_parse": "",
        "query": "SELECT Name, MIN(Population) FROM country JOIN city ON country.Code = city.CountryCode WHERE Region = 'North America';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the maximum life expectancy of cities in Europe?",
        "gold_parse": "",
        "query": "SELECT CountryCode, MAX(LifeExpectancy) FROM city WHERE CountryCode = (SELECT Code FROM country WHERE Continent = 'Europe');",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average surface area of regions with cities having a population less than 200,000?",
        "gold_parse": "",
        "query": "SELECT Region, AVG(SurfaceArea) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population < 200000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of countries where the language is not official.",
        "gold_parse": "",
        "query": "SELECT Language, SUM(Population) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum old Gross National Product of continents with a life expectancy greater than 60.",
        "gold_parse": "",
        "query": "SELECT Continent, MIN(GNPOld) FROM country WHERE LifeExpectancy > 60;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average independence year of countries with cities in the district of Washington?",
        "gold_parse": "",
        "query": "SELECT Name, AVG(IndepYear) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.District = 'Washington';",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the sales of singers with the minimum net worth.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Sales) FROM singer WHERE Net_Worth_Millions = (SELECT MIN(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the average highest position of songs by singers born after 1980?",
        "gold_parse": "",
        "query": "SELECT Citizenship, AVG(Highest_Position) FROM song WHERE Birth_Year > 1980;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum net worth of singers with songs having sales less than 1000.",
        "gold_parse": "",
        "query": "SELECT Title, MAX(Net_Worth_Millions) FROM song WHERE Sales < 1000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of songs for singers whose highest position equals the average highest position.",
        "gold_parse": "",
        "query": "SELECT Singer_ID, COUNT(Title) FROM song WHERE Highest_Position = (SELECT AVG(Highest_Position) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum sales of songs by singers with USA citizenship.",
        "gold_parse": "",
        "query": "SELECT Name, MIN(Sales) FROM singer WHERE Citizenship = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the birth years of singers with songs having sales greater than 5000.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Birth_Year) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 5000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum citizenship value for songs by singers with a net worth less than 50 million.",
        "gold_parse": "",
        "query": "SELECT Title, MAX(Citizenship) FROM song WHERE Net_Worth_Millions < 50;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the average net worth of singers born before 1970?",
        "gold_parse": "",
        "query": "SELECT Singer_ID, AVG(Net_Worth_Millions) FROM singer WHERE Birth_Year < 1970;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of songs that reached the highest position for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum birth year of singers with songs having sales greater than 10000.",
        "gold_parse": "",
        "query": "SELECT Citizenship, MIN(Birth_Year) FROM singer WHERE Sales > 10000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the net worth of singers with songs released after 1990.",
        "gold_parse": "",
        "query": "SELECT Title, SUM(Net_Worth_Millions) FROM song WHERE Birth_Year > 1990;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum sales of songs by singers with a net worth greater than 100 million.",
        "gold_parse": "",
        "query": "SELECT Singer_ID, MAX(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Net_Worth_Millions > 100;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the average highest position of singers with the highest sales?",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Highest_Position) FROM singer WHERE Sales = (SELECT MAX(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of singers with songs containing 'Love' in the title for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, COUNT(Singer_ID) FROM singer WHERE Title LIKE '%Love%';",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum birth year of songs with average sales.",
        "gold_parse": "",
        "query": "SELECT Title, MIN(Birth_Year) FROM song WHERE Sales = (SELECT AVG(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the maximum highest position of singers with the minimum net worth?",
        "gold_parse": "",
        "query": "SELECT Singer_ID, MAX(Highest_Position) FROM singer WHERE Net_Worth_Millions < (SELECT MIN(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the average sales of songs by Canadian singers?",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Sales) FROM singer WHERE Citizenship = 'Canada';",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the birth years of singers with a net worth greater than the average net worth.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Birth_Year) FROM singer WHERE Net_Worth_Millions > (SELECT AVG(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum highest position of songs with sales greater than the maximum sales.",
        "gold_parse": "",
        "query": "SELECT Title, MIN(Highest_Position) FROM song WHERE Sales > (SELECT MAX(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of singers with the minimum net worth for each singer ID.",
        "gold_parse": "",
        "query": "SELECT Singer_ID, COUNT(Name) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Net_Worth_Millions = (SELECT MIN(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum sales of songs by singers born in 1985.",
        "gold_parse": "",
        "query": "SELECT Name, MAX(Sales) FROM singer WHERE Birth_Year = 1985;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the average net worth of singers with a song titled 'Greatest Hits'?",
        "gold_parse": "",
        "query": "SELECT Citizenship, AVG(Net_Worth_Millions) FROM singer WHERE Title = 'Greatest Hits';",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the birth years of songs that reached the highest position.",
        "gold_parse": "",
        "query": "SELECT Title, SUM(Birth_Year) FROM song WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum net worth of singers with songs having sales greater than 2000.",
        "gold_parse": "",
        "query": "SELECT Singer_ID, MIN(Net_Worth_Millions) FROM singer WHERE Sales > 2000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the average sales of songs by singers with the maximum citizenship value?",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Sales) FROM singer WHERE Citizenship = (SELECT MAX(Citizenship) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of highest positions of songs with average sales for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, COUNT(Highest_Position) FROM song WHERE Sales = (SELECT AVG(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum net worth of songs by singers born after the maximum birth year.",
        "gold_parse": "",
        "query": "SELECT Title, MIN(Net_Worth_Millions) FROM song WHERE Birth_Year > (SELECT MAX(Birth_Year) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the average birth year of singers with a net worth less than 10 million?",
        "gold_parse": "",
        "query": "SELECT Singer_ID, AVG(Birth_Year) FROM singer WHERE Net_Worth_Millions < 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the highest positions of songs with sales greater than 1000 for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 1000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of singers and find the maximum sales.",
        "gold_parse": "",
        "query": "SELECT COUNT(Singer_ID), MAX(Sales) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average birth year and sum of the highest positions of songs.",
        "gold_parse": "",
        "query": "SELECT AVG(Birth_Year), SUM(Highest_Position) FROM song;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum net worth of singers with songs having average sales.",
        "gold_parse": "",
        "query": "SELECT Title, MAX(Net_Worth_Millions) FROM song WHERE Sales = (SELECT AVG(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of songs with the highest position 5 for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, COUNT(Title) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 5;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum birth year of singers with songs having sales less than 500.",
        "gold_parse": "",
        "query": "SELECT Name, MIN(Birth_Year) FROM singer WHERE Sales < 500;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the net worth of singers with songs having a highest position greater than 10.",
        "gold_parse": "",
        "query": "SELECT Singer_ID, SUM(Net_Worth_Millions) FROM singer WHERE Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average sales of songs by singers with the maximum net worth.",
        "gold_parse": "",
        "query": "SELECT Title, AVG(Sales) FROM song WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of sales by singers born before 1990 for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, COUNT(Sales) FROM singer WHERE Birth_Year < 1990;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum highest position of singers with songs having sales less than the minimum sales.",
        "gold_parse": "",
        "query": "SELECT Name, MAX(Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales < (SELECT MIN(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the birth years of singers with USA citizenship.",
        "gold_parse": "",
        "query": "SELECT Singer_ID, SUM(Birth_Year) FROM singer WHERE Citizenship = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average net worth of singers with songs having sales greater than 10000.",
        "gold_parse": "",
        "query": "SELECT Title, AVG(Net_Worth_Millions) FROM song WHERE Sales > 10000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum highest position of singers born in the year with the maximum birth year.",
        "gold_parse": "",
        "query": "SELECT Citizenship, MIN(Highest_Position) FROM singer WHERE Birth_Year = (SELECT MAX(Birth_Year) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the net worth of singers with songs having sales of 2000.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Net_Worth_Millions) FROM singer WHERE Sales = 2000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum birth year of songs with the highest position less than the average highest position.",
        "gold_parse": "",
        "query": "SELECT Title, MAX(Birth_Year) FROM song WHERE Highest_Position < (SELECT AVG(Highest_Position) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the sales of songs by singers with a net worth greater than 50 million for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Net_Worth_Millions > 50;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average birth year of singers with songs having the minimum highest position.",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Birth_Year) FROM singer WHERE Highest_Position = (SELECT MIN(Highest_Position) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the net worth of songs with sales greater than the average sales.",
        "gold_parse": "",
        "query": "SELECT Title, COUNT(Net_Worth_Millions) FROM song WHERE Sales > (SELECT AVG(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum highest position of singers born before the minimum birth year for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, MAX(Highest_Position) FROM singer WHERE Birth_Year < (SELECT MIN(Birth_Year) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the sales of songs with the highest position greater than 50 for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position > 50;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average net worth of singers with songs released before 1980.",
        "gold_parse": "",
        "query": "SELECT Title, AVG(Net_Worth_Millions) FROM song WHERE Birth_Year < 1980;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum sales of songs by singers with a net worth greater than the maximum net worth for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, MIN(Sales) FROM singer WHERE Net_Worth_Millions > (SELECT MAX(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the birth years of singers with songs having the highest position of 10.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Birth_Year) FROM singer WHERE Highest_Position = 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the net worth of singers with songs having the minimum sales.",
        "gold_parse": "",
        "query": "SELECT Title, SUM(Net_Worth_Millions) FROM song WHERE Sales = (SELECT MIN(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average sales of songs by singers born after 2000 for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, AVG(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Birth_Year > 2000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum birth year of singers with songs having the average highest position.",
        "gold_parse": "",
        "query": "SELECT Name, MAX(Birth_Year) FROM singer WHERE Highest_Position = (SELECT AVG(Highest_Position) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the net worth of songs with sales greater than 500.",
        "gold_parse": "",
        "query": "SELECT Title, COUNT(Net_Worth_Millions) FROM song WHERE Sales > 500;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the highest positions of songs by singers with the minimum net worth for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Highest_Position) FROM singer WHERE Net_Worth_Millions < (SELECT MIN(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average sales of songs by singers born in 1975.",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Sales) FROM singer WHERE Birth_Year = 1975;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of singers and find the average highest position of their songs.",
        "gold_parse": "",
        "query": "SELECT COUNT(Singer_ID), AVG(Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum net worth of singers and the minimum sales of their songs.",
        "gold_parse": "",
        "query": "SELECT MAX(Net_Worth_Millions), MIN(Sales) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the sales of songs by singers with USA citizenship for each birth year.",
        "gold_parse": "",
        "query": "SELECT Birth_Year, SUM(Sales) FROM singer WHERE Citizenship = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum highest position of songs for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, MAX(Highest_Position) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum sales of songs for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, MIN(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of singers and find their average net worth.",
        "gold_parse": "",
        "query": "SELECT COUNT(Name), AVG(Net_Worth_Millions) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the net worth of singers with songs having sales greater than 1000.",
        "gold_parse": "",
        "query": "SELECT Title, SUM(Net_Worth_Millions) FROM song WHERE Sales > 1000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum birth year of singers with songs having the highest position less than 10 for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, MIN(Birth_Year) FROM singer WHERE Highest_Position < 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average sales of songs with the highest position greater than 50 for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position > 50;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of citizenships and sum the highest positions of songs.",
        "gold_parse": "",
        "query": "SELECT COUNT(Citizenship), SUM(Highest_Position) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum birth year of singers and the minimum sales of their songs.",
        "gold_parse": "",
        "query": "SELECT MAX(Birth_Year), MIN(Sales) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the highest positions of songs by singers with a net worth greater than 50 million for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Net_Worth_Millions > 50;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average sales of songs for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, AVG(Sales) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of songs and find the minimum net worth of their singers.",
        "gold_parse": "",
        "query": "SELECT COUNT(Title), MIN(Net_Worth_Millions) FROM song;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum highest position of songs and sum the birth years of singers.",
        "gold_parse": "",
        "query": "SELECT MAX(Highest_Position), SUM(Birth_Year) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the net worths of singers for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, COUNT(Net_Worth_Millions) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average sales of songs by singers born before 1990 for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Birth_Year < 1990;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of singers and sum the highest positions of their songs.",
        "gold_parse": "",
        "query": "SELECT COUNT(Singer_ID), SUM(Highest_Position) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum net worth of singers and the average sales of their songs.",
        "gold_parse": "",
        "query": "SELECT MAX(Net_Worth_Millions), AVG(Sales) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum sales of songs by singers with UK citizenship for each birth year.",
        "gold_parse": "",
        "query": "SELECT Birth_Year, MIN(Sales) FROM singer WHERE Citizenship = 'UK';",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum highest position of songs for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, MAX(Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of singers and sum their net worth.",
        "gold_parse": "",
        "query": "SELECT COUNT(Name), SUM(Net_Worth_Millions) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average net worth of singers with songs having sales less than 500.",
        "gold_parse": "",
        "query": "SELECT Title, AVG(Net_Worth_Millions) FROM song WHERE Sales < 500;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum birth year of singers with songs having the highest position greater than 10 for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, MAX(Birth_Year) FROM singer WHERE Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the sales of songs for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of citizenships and find the average highest position of songs.",
        "gold_parse": "",
        "query": "SELECT COUNT(Citizenship), AVG(Highest_Position) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum birth year of singers and sum the sales of their songs.",
        "gold_parse": "",
        "query": "SELECT MAX(Birth_Year), SUM(Sales) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the average highest position of songs by singers with a net worth greater than 10 million for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Net_Worth_Millions > 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the birth years of singers for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, COUNT(Birth_Year) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the sales of songs with the highest position less than 20 for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position < 20;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of songs and find the maximum net worth of their singers.",
        "gold_parse": "",
        "query": "SELECT COUNT(Title), MAX(Net_Worth_Millions) FROM song;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the maximum highest position of songs and the average birth year of singers.",
        "gold_parse": "",
        "query": "SELECT MAX(Highest_Position), AVG(Birth_Year) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the net worth of singers for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Net_Worth_Millions) FROM singer;",
        "correctness": 0
    }
]